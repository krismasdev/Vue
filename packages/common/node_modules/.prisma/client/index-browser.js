
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.16.2
 * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
 */
Prisma.prismaVersion = {
  client: "4.16.2",
  engine: "4bc8b6e1b66cb932731fb1bdbbc550d1e010de81"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  role: 'role',
  firstName: 'firstName',
  lastName: 'lastName',
  phoneNumber: 'phoneNumber',
  birthDate: 'birthDate',
  address: 'address',
  zipCode: 'zipCode',
  city: 'city',
  idNumber: 'idNumber',
  idIssueDate: 'idIssueDate',
  profilePicturePath: 'profilePicturePath',
  isInClub: 'isInClub',
  courseId: 'courseId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isActive: 'isActive',
  isCalendarEnable: 'isCalendarEnable',
  calendarBlockingDeadline: 'calendarBlockingDeadline',
  receiveEmailsOnNewEvent: 'receiveEmailsOnNewEvent'
};

exports.Prisma.WebPushSubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  endpoint: 'endpoint',
  p256dh: 'p256dh',
  auth: 'auth',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  chatEnabled: 'chatEnabled',
  calendarEnabled: 'calendarEnabled'
};

exports.Prisma.QuizAttemptScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PasswordRecoveryTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailVerificationTokenScalarFieldEnum = {
  id: 'id',
  email: 'email',
  token: 'token',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ZoomMeetingScalarFieldEnum = {
  id: 'id',
  meetingId: 'meetingId',
  joinUrl: 'joinUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VideoScalarFieldEnum = {
  id: 'id',
  url: 'url',
  title: 'title',
  date: 'date',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VideosOnCoursesScalarFieldEnum = {
  videoId: 'videoId',
  courseId: 'courseId'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  currency: 'currency',
  method: 'method',
  type: 'type',
  userId: 'userId',
  description: 'description',
  paidAt: 'paidAt',
  stripePaymentIntentId: 'stripePaymentIntentId',
  woocommerceOrderId: 'woocommerceOrderId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FileScalarFieldEnum = {
  id: 'id',
  name: 'name',
  s3Key: 's3Key',
  contentType: 'contentType',
  folderId: 'folderId',
  courseId: 'courseId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FolderScalarFieldEnum = {
  id: 'id',
  name: 'name',
  parentId: 'parentId',
  isRoot: 'isRoot',
  courseId: 'courseId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CourseScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PredefinedEventScalarFieldEnum = {
  id: 'id',
  title: 'title',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PredefinedEventOnCoursesScalarFieldEnum = {
  predefinedEventId: 'predefinedEventId',
  courseId: 'courseId'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  startDate: 'startDate',
  endDate: 'endDate',
  totalSlots: 'totalSlots',
  description: 'description',
  predefinedEventId: 'predefinedEventId',
  title: 'title',
  isClub: 'isClub',
  isHidden: 'isHidden',
  enableBooking: 'enableBooking',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  color: 'color',
  recurrenceRule: 'recurrenceRule',
  recurrenceEnd: 'recurrenceEnd'
};

exports.Prisma.UsersOnEventsScalarFieldEnum = {
  userId: 'userId',
  eventId: 'eventId',
  isCompleted: 'isCompleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  waitlistEventId: 'waitlistEventId',
  visitedEventId: 'visitedEventId'
};

exports.Prisma.ChatScalarFieldEnum = {
  id: 'id',
  name: 'name',
  pictureS3Key: 'pictureS3Key',
  isGroup: 'isGroup',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatsOnUsersScalarFieldEnum = {
  chatId: 'chatId',
  userId: 'userId',
  lastSeenAt: 'lastSeenAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  deletedAt: 'deletedAt',
  senderId: 'senderId',
  chatId: 'chatId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuizzesOnCourseScalarFieldEnum = {
  quizId: 'quizId',
  courseId: 'courseId'
};

exports.Prisma.QuizScalarFieldEnum = {
  id: 'id',
  name: 'name',
  nQuestionsPerAttempt: 'nQuestionsPerAttempt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  content: 'content',
  quizId: 'quizId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnswerScalarFieldEnum = {
  id: 'id',
  content: 'content',
  isCorrect: 'isCorrect',
  questionId: 'questionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = {
  NEWUSER: 'NEWUSER',
  AWAITINGSTUDENT: 'AWAITINGSTUDENT',
  AWAITINGTEACHER: 'AWAITINGTEACHER',
  STUDENT: 'STUDENT',
  TEACHER: 'TEACHER',
  ADMIN: 'ADMIN'
};

exports.PaymentMethod = {
  CASH: 'CASH',
  CARD: 'CARD',
  EFECTIVO: 'EFECTIVO',
  STRIPE: 'STRIPE',
  WOOCOMMERCE: 'WOOCOMMERCE'
};

exports.PaymentType = {
  ONE_TIME: 'ONE_TIME',
  SUBSCRIPTION: 'SUBSCRIPTION'
};

exports.Prisma.ModelName = {
  User: 'User',
  WebPushSubscription: 'WebPushSubscription',
  QuizAttempt: 'QuizAttempt',
  PasswordRecoveryToken: 'PasswordRecoveryToken',
  EmailVerificationToken: 'EmailVerificationToken',
  ZoomMeeting: 'ZoomMeeting',
  Video: 'Video',
  VideosOnCourses: 'VideosOnCourses',
  Payment: 'Payment',
  File: 'File',
  Folder: 'Folder',
  Course: 'Course',
  PredefinedEvent: 'PredefinedEvent',
  PredefinedEventOnCourses: 'PredefinedEventOnCourses',
  Event: 'Event',
  UsersOnEvents: 'UsersOnEvents',
  Chat: 'Chat',
  ChatsOnUsers: 'ChatsOnUsers',
  Message: 'Message',
  QuizzesOnCourse: 'QuizzesOnCourse',
  Quiz: 'Quiz',
  Question: 'Question',
  Answer: 'Answer'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
