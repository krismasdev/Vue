/// <reference types="multer" />
import { UsersService } from './users.service';
import { UpdateManagerProfileDto, UpdateStudentProfileDto, ChangeEmailDto, UpdateUserDto, ChangePasswordDto, OnboardStudentDto, OnboardTeacherDto, GetAllUsersQueryDto } from './dto';
import { User as IUser } from '@prisma/client';
import { EventEmitter2 } from '@nestjs/event-emitter';
export declare class UsersController {
    private readonly usersService;
    private readonly eventEmitter;
    constructor(usersService: UsersService, eventEmitter: EventEmitter2);
    cleanUpOrphanedProfilePics(): Promise<void>;
    getBasicInfo(): Promise<Omit<{
        pictureUrl: string;
        id: string;
        firstName: string;
        lastName: string;
        profilePicturePath: string;
        role: import(".prisma/client").Role;
        courseId: string;
    }, "password" | "profilePicturePath">[]>;
    getMeProfile(userId: string): Promise<Omit<{
        pictureUrl: string;
        course: import("@prisma/client/runtime").GetResult<{
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
        }, unknown, never> & {};
        chats: (import("@prisma/client/runtime").GetResult<{
            chatId: string;
            userId: string;
            lastSeenAt: Date;
        }, unknown, never> & {})[];
        events: (import("@prisma/client/runtime").GetResult<{
            userId: string;
            eventId: string;
            isCompleted: boolean;
            createdAt: Date;
            updatedAt: Date;
            waitlistEventId: string;
            visitedEventId: string;
        }, unknown, never> & {})[];
        payments: (import("@prisma/client/runtime").GetResult<{
            id: string;
            amount: number;
            currency: string;
            method: import(".prisma/client").PaymentMethod;
            type: import(".prisma/client").PaymentType;
            userId: string;
            description: string;
            paidAt: Date;
            stripePaymentIntentId: string;
            woocommerceOrderId: string;
            createdAt: Date;
            updatedAt: Date;
        }, unknown, never> & {})[];
        email: string;
        id: string;
        password: string;
        role: import(".prisma/client").Role;
        firstName: string;
        lastName: string;
        phoneNumber: string;
        birthDate: Date;
        address: string;
        zipCode: string;
        city: string;
        idNumber: string;
        idIssueDate: Date;
        profilePicturePath: string;
        isInClub: boolean;
        courseId: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        isCalendarEnable: boolean;
        calendarBlockingDeadline: Date;
        receiveEmailsOnNewEvent: boolean;
    }, "password" | "profilePicturePath">>;
    getUser(userId: string): Promise<Omit<{
        pictureUrl: string;
        course: import("@prisma/client/runtime").GetResult<{
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
        }, unknown, never> & {};
        chats: (import("@prisma/client/runtime").GetResult<{
            chatId: string;
            userId: string;
            lastSeenAt: Date;
        }, unknown, never> & {})[];
        events: (import("@prisma/client/runtime").GetResult<{
            userId: string;
            eventId: string;
            isCompleted: boolean;
            createdAt: Date;
            updatedAt: Date;
            waitlistEventId: string;
            visitedEventId: string;
        }, unknown, never> & {})[];
        payments: (import("@prisma/client/runtime").GetResult<{
            id: string;
            amount: number;
            currency: string;
            method: import(".prisma/client").PaymentMethod;
            type: import(".prisma/client").PaymentType;
            userId: string;
            description: string;
            paidAt: Date;
            stripePaymentIntentId: string;
            woocommerceOrderId: string;
            createdAt: Date;
            updatedAt: Date;
        }, unknown, never> & {})[];
        email: string;
        id: string;
        password: string;
        role: import(".prisma/client").Role;
        firstName: string;
        lastName: string;
        phoneNumber: string;
        birthDate: Date;
        address: string;
        zipCode: string;
        city: string;
        idNumber: string;
        idIssueDate: Date;
        profilePicturePath: string;
        isInClub: boolean;
        courseId: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        isCalendarEnable: boolean;
        calendarBlockingDeadline: Date;
        receiveEmailsOnNewEvent: boolean;
    }, "password" | "profilePicturePath">>;
    getUserByPhone(phone: string): Promise<import("@prisma/client/runtime").GetResult<{
        id: string;
        email: string;
        password: string;
        role: import(".prisma/client").Role;
        firstName: string;
        lastName: string;
        phoneNumber: string;
        birthDate: Date;
        address: string;
        zipCode: string;
        city: string;
        idNumber: string;
        idIssueDate: Date;
        profilePicturePath: string;
        isInClub: boolean;
        courseId: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        isCalendarEnable: boolean;
        calendarBlockingDeadline: Date;
        receiveEmailsOnNewEvent: boolean;
    }, unknown, never> & {}>;
    getAllUsers({ pendingTaskId, roles, search, courseId, createdAt }: GetAllUsersQueryDto): Promise<Omit<{
        progress: number;
        course: import("@prisma/client/runtime").GetResult<{
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
        }, unknown, never> & {};
        pictureUrl: string;
        payments: {
            id: string;
        }[];
        chats: (import("@prisma/client/runtime").GetResult<{
            chatId: string;
            userId: string;
            lastSeenAt: Date;
        }, unknown, never> & {})[];
        events: ({
            event: import("@prisma/client/runtime").GetResult<{
                id: string;
                startDate: Date;
                endDate: Date;
                totalSlots: number;
                description: string;
                predefinedEventId: string;
                title: string;
                isClub: boolean;
                isHidden: boolean;
                enableBooking: boolean;
                createdAt: Date;
                updatedAt: Date;
                color: string;
                recurrenceRule: string;
                recurrenceEnd: Date;
            }, unknown, never> & {};
        } & import("@prisma/client/runtime").GetResult<{
            userId: string;
            eventId: string;
            isCompleted: boolean;
            createdAt: Date;
            updatedAt: Date;
            waitlistEventId: string;
            visitedEventId: string;
        }, unknown, never> & {})[];
        email: string;
        id: string;
        password: string;
        role: import(".prisma/client").Role;
        firstName: string;
        lastName: string;
        phoneNumber: string;
        birthDate: Date;
        address: string;
        zipCode: string;
        city: string;
        idNumber: string;
        idIssueDate: Date;
        profilePicturePath: string;
        isInClub: boolean;
        courseId: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        isCalendarEnable: boolean;
        calendarBlockingDeadline: Date;
        receiveEmailsOnNewEvent: boolean;
        hasPaid: boolean;
    }, "password" | "profilePicturePath">[]>;
    getUsersByEmails(emails: string[]): Promise<Omit<{
        pictureUrl: string;
        email: string;
        id: string;
        password: string;
        role: import(".prisma/client").Role;
        firstName: string;
        lastName: string;
        phoneNumber: string;
        birthDate: Date;
        address: string;
        zipCode: string;
        city: string;
        idNumber: string;
        idIssueDate: Date;
        profilePicturePath: string;
        isInClub: boolean;
        courseId: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        isCalendarEnable: boolean;
        calendarBlockingDeadline: Date;
        receiveEmailsOnNewEvent: boolean;
    }, "password" | "profilePicturePath">[]>;
    updateUserInfo(userId: string, updateUserDto: UpdateUserDto): Promise<void>;
    updateIsActive(userId: string, isActive: boolean): Promise<void>;
    updateCalendarAccess(userId: string, isCalendarEnable: boolean): Promise<void>;
    deleteUser(userId: string): Promise<void>;
    updateProfile(updateProfileDto: UpdateManagerProfileDto | UpdateStudentProfileDto, newImage: Express.Multer.File | undefined, user: IUser): Promise<void>;
    changePassword(changePasswordDto: ChangePasswordDto, userId: string): Promise<void>;
    onboardUser(profilePic: Express.Multer.File, onboardUserDto: OnboardTeacherDto | OnboardStudentDto, userId: string): Promise<void>;
    acceptUser(userId: string): Promise<void>;
    changeEmail(changeEmailDto: ChangeEmailDto, userId: string): Promise<void>;
    changeEmailNotifications(receiveEmailsOnNewEvent: boolean, userId: string): Promise<void>;
}
