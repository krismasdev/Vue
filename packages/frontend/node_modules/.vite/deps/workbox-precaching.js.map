{
  "version": 3,
  "sources": ["../../../../../node_modules/workbox-precaching/_version.js", "../../../../../node_modules/workbox-precaching/utils/createCacheKey.js", "../../../../../node_modules/workbox-precaching/utils/PrecacheInstallReportPlugin.js", "../../../../../node_modules/workbox-precaching/utils/PrecacheCacheKeyPlugin.js", "../../../../../node_modules/workbox-precaching/utils/printCleanupDetails.js", "../../../../../node_modules/workbox-precaching/utils/printInstallDetails.js", "../../../../../node_modules/workbox-strategies/_version.js", "../../../../../node_modules/workbox-strategies/StrategyHandler.js", "../../../../../node_modules/workbox-strategies/Strategy.js", "../../../../../node_modules/workbox-precaching/PrecacheStrategy.js", "../../../../../node_modules/workbox-precaching/PrecacheController.js", "../../../../../node_modules/workbox-precaching/utils/getOrCreatePrecacheController.js", "../../../../../node_modules/workbox-precaching/addPlugins.js", "../../../../../node_modules/workbox-routing/_version.js", "../../../../../node_modules/workbox-routing/utils/constants.js", "../../../../../node_modules/workbox-routing/utils/normalizeHandler.js", "../../../../../node_modules/workbox-routing/Route.js", "../../../../../node_modules/workbox-routing/RegExpRoute.js", "../../../../../node_modules/workbox-routing/Router.js", "../../../../../node_modules/workbox-routing/utils/getOrCreateDefaultRouter.js", "../../../../../node_modules/workbox-routing/registerRoute.js", "../../../../../node_modules/workbox-precaching/utils/removeIgnoredSearchParams.js", "../../../../../node_modules/workbox-precaching/utils/generateURLVariations.js", "../../../../../node_modules/workbox-precaching/PrecacheRoute.js", "../../../../../node_modules/workbox-precaching/addRoute.js", "../../../../../node_modules/workbox-precaching/utils/deleteOutdatedCaches.js", "../../../../../node_modules/workbox-precaching/cleanupOutdatedCaches.js", "../../../../../node_modules/workbox-precaching/createHandlerBoundToURL.js", "../../../../../node_modules/workbox-precaching/getCacheKeyForURL.js", "../../../../../node_modules/workbox-precaching/matchPrecache.js", "../../../../../node_modules/workbox-precaching/precache.js", "../../../../../node_modules/workbox-precaching/precacheAndRoute.js", "../../../../../node_modules/workbox-precaching/PrecacheFallbackPlugin.js"],
  "sourcesContent": ["\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:precaching:7.2.0'] && _();\n}\ncatch (e) { }\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport '../_version.js';\n// Name of the search parameter used to store revision info.\nconst REVISION_SEARCH_PARAM = '__WB_REVISION__';\n/**\n * Converts a manifest entry into a versioned URL suitable for precaching.\n *\n * @param {Object|string} entry\n * @return {string} A URL with versioning info.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function createCacheKey(entry) {\n    if (!entry) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If a precache manifest entry is a string, it's assumed to be a versioned\n    // URL, like '/app.abcd1234.js'. Return as-is.\n    if (typeof entry === 'string') {\n        const urlObject = new URL(entry, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    const { revision, url } = entry;\n    if (!url) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If there's just a URL and no revision, then it's also assumed to be a\n    // versioned URL.\n    if (!revision) {\n        const urlObject = new URL(url, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    // Otherwise, construct a properly versioned URL using the custom Workbox\n    // search parameter along with the revision info.\n    const cacheKeyURL = new URL(url, location.href);\n    const originalURL = new URL(url, location.href);\n    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\n    return {\n        cacheKey: cacheKeyURL.href,\n        url: originalURL.href,\n    };\n}\n", "/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to determine the\n * of assets that were updated (or not updated) during the install event.\n *\n * @private\n */\nclass PrecacheInstallReportPlugin {\n    constructor() {\n        this.updatedURLs = [];\n        this.notUpdatedURLs = [];\n        this.handlerWillStart = async ({ request, state, }) => {\n            // TODO: `state` should never be undefined...\n            if (state) {\n                state.originalRequest = request;\n            }\n        };\n        this.cachedResponseWillBeUsed = async ({ event, state, cachedResponse, }) => {\n            if (event.type === 'install') {\n                if (state &&\n                    state.originalRequest &&\n                    state.originalRequest instanceof Request) {\n                    // TODO: `state` should never be undefined...\n                    const url = state.originalRequest.url;\n                    if (cachedResponse) {\n                        this.notUpdatedURLs.push(url);\n                    }\n                    else {\n                        this.updatedURLs.push(url);\n                    }\n                }\n            }\n            return cachedResponse;\n        };\n    }\n}\nexport { PrecacheInstallReportPlugin };\n", "/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to translate URLs into\n * the corresponding cache key, based on the current revision info.\n *\n * @private\n */\nclass PrecacheCacheKeyPlugin {\n    constructor({ precacheController }) {\n        this.cacheKeyWillBeUsed = async ({ request, params, }) => {\n            // Params is type any, can't change right now.\n            /* eslint-disable */\n            const cacheKey = (params === null || params === void 0 ? void 0 : params.cacheKey) ||\n                this._precacheController.getCacheKeyForURL(request.url);\n            /* eslint-enable */\n            return cacheKey\n                ? new Request(cacheKey, { headers: request.headers })\n                : request;\n        };\n        this._precacheController = precacheController;\n    }\n}\nexport { PrecacheCacheKeyPlugin };\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport '../_version.js';\n/**\n * @param {string} groupTitle\n * @param {Array<string>} deletedURLs\n *\n * @private\n */\nconst logGroup = (groupTitle, deletedURLs) => {\n    logger.groupCollapsed(groupTitle);\n    for (const url of deletedURLs) {\n        logger.log(url);\n    }\n    logger.groupEnd();\n};\n/**\n * @param {Array<string>} deletedURLs\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function printCleanupDetails(deletedURLs) {\n    const deletionCount = deletedURLs.length;\n    if (deletionCount > 0) {\n        logger.groupCollapsed(`During precaching cleanup, ` +\n            `${deletionCount} cached ` +\n            `request${deletionCount === 1 ? ' was' : 's were'} deleted.`);\n        logGroup('Deleted Cache Requests', deletedURLs);\n        logger.groupEnd();\n    }\n}\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport '../_version.js';\n/**\n * @param {string} groupTitle\n * @param {Array<string>} urls\n *\n * @private\n */\nfunction _nestedGroup(groupTitle, urls) {\n    if (urls.length === 0) {\n        return;\n    }\n    logger.groupCollapsed(groupTitle);\n    for (const url of urls) {\n        logger.log(url);\n    }\n    logger.groupEnd();\n}\n/**\n * @param {Array<string>} urlsToPrecache\n * @param {Array<string>} urlsAlreadyPrecached\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function printInstallDetails(urlsToPrecache, urlsAlreadyPrecached) {\n    const precachedCount = urlsToPrecache.length;\n    const alreadyPrecachedCount = urlsAlreadyPrecached.length;\n    if (precachedCount || alreadyPrecachedCount) {\n        let message = `Precaching ${precachedCount} file${precachedCount === 1 ? '' : 's'}.`;\n        if (alreadyPrecachedCount > 0) {\n            message +=\n                ` ${alreadyPrecachedCount} ` +\n                    `file${alreadyPrecachedCount === 1 ? ' is' : 's are'} already cached.`;\n        }\n        logger.groupCollapsed(message);\n        _nestedGroup(`View newly precached URLs.`, urlsToPrecache);\n        _nestedGroup(`View previously precached URLs.`, urlsAlreadyPrecached);\n        logger.groupEnd();\n    }\n}\n", "\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:strategies:7.2.0'] && _();\n}\ncatch (e) { }\n", "/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheMatchIgnoreParams } from 'workbox-core/_private/cacheMatchIgnoreParams.js';\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { executeQuotaErrorCallbacks } from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\nfunction toRequest(input) {\n    return typeof input === 'string' ? new Request(input) : input;\n}\n/**\n * A class created every time a Strategy instance instance calls\n * {@link workbox-strategies.Strategy~handle} or\n * {@link workbox-strategies.Strategy~handleAll} that wraps all fetch and\n * cache actions around plugin callbacks and keeps track of when the strategy\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\n *\n * @memberof workbox-strategies\n */\nclass StrategyHandler {\n    /**\n     * Creates a new instance associated with the passed strategy and event\n     * that's handling the request.\n     *\n     * The constructor also initializes the state that will be passed to each of\n     * the plugins handling this request.\n     *\n     * @param {workbox-strategies.Strategy} strategy\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params] The return value from the\n     *     {@link workbox-routing~matchCallback} (if applicable).\n     */\n    constructor(strategy, options) {\n        this._cacheKeys = {};\n        /**\n         * The request the strategy is performing (passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * @name request\n         * @instance\n         * @type {Request}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * The event associated with this request.\n         * @name event\n         * @instance\n         * @type {ExtendableEvent}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `URL` instance of `request.url` (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `url` param will be present if the strategy was invoked\n         * from a workbox `Route` object.\n         * @name url\n         * @instance\n         * @type {URL|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `param` value (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `param` param will be present if the strategy was invoked\n         * from a workbox `Route` object and the\n         * {@link workbox-routing~matchCallback} returned\n         * a truthy value (it will be that value).\n         * @name params\n         * @instance\n         * @type {*|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(options.event, ExtendableEvent, {\n                moduleName: 'workbox-strategies',\n                className: 'StrategyHandler',\n                funcName: 'constructor',\n                paramName: 'options.event',\n            });\n        }\n        Object.assign(this, options);\n        this.event = options.event;\n        this._strategy = strategy;\n        this._handlerDeferred = new Deferred();\n        this._extendLifetimePromises = [];\n        // Copy the plugins list (since it's mutable on the strategy),\n        // so any mutations don't affect this handler instance.\n        this._plugins = [...strategy.plugins];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins) {\n            this._pluginStateMap.set(plugin, {});\n        }\n        this.event.waitUntil(this._handlerDeferred.promise);\n    }\n    /**\n     * Fetches a given request (and invokes any applicable plugin callback\n     * methods) using the `fetchOptions` (for non-navigation requests) and\n     * `plugins` defined on the `Strategy` object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - `requestWillFetch()`\n     * - `fetchDidSucceed()`\n     * - `fetchDidFail()`\n     *\n     * @param {Request|string} input The URL or request to fetch.\n     * @return {Promise<Response>}\n     */\n    async fetch(input) {\n        const { event } = this;\n        let request = toRequest(input);\n        if (request.mode === 'navigate' &&\n            event instanceof FetchEvent &&\n            event.preloadResponse) {\n            const possiblePreloadResponse = (await event.preloadResponse);\n            if (possiblePreloadResponse) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Using a preloaded navigation response for ` +\n                        `'${getFriendlyURL(request.url)}'`);\n                }\n                return possiblePreloadResponse;\n            }\n        }\n        // If there is a fetchDidFail plugin, we need to save a clone of the\n        // original request before it's either modified by a requestWillFetch\n        // plugin or before the original request's body is consumed via fetch().\n        const originalRequest = this.hasCallback('fetchDidFail')\n            ? request.clone()\n            : null;\n        try {\n            for (const cb of this.iterateCallbacks('requestWillFetch')) {\n                request = await cb({ request: request.clone(), event });\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                throw new WorkboxError('plugin-error-request-will-fetch', {\n                    thrownErrorMessage: err.message,\n                });\n            }\n        }\n        // The request can be altered by plugins with `requestWillFetch` making\n        // the original request (most likely from a `fetch` event) different\n        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            // See https://github.com/GoogleChrome/workbox/issues/1796\n            fetchResponse = await fetch(request, request.mode === 'navigate' ? undefined : this._strategy.fetchOptions);\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' returned a response with ` +\n                    `status '${fetchResponse.status}'.`);\n            }\n            for (const callback of this.iterateCallbacks('fetchDidSucceed')) {\n                fetchResponse = await callback({\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                });\n            }\n            return fetchResponse;\n        }\n        catch (error) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' threw an error.`, error);\n            }\n            // `originalRequest` will only exist if a `fetchDidFail` callback\n            // is being used (see above).\n            if (originalRequest) {\n                await this.runCallbacks('fetchDidFail', {\n                    error: error,\n                    event,\n                    originalRequest: originalRequest.clone(),\n                    request: pluginFilteredRequest.clone(),\n                });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n     * the response generated by `this.fetch()`.\n     *\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n     * so you do not have to manually call `waitUntil()` on the event.\n     *\n     * @param {Request|string} input The request or URL to fetch and cache.\n     * @return {Promise<Response>}\n     */\n    async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        void this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    }\n    /**\n     * Matches a request from the cache (and invokes any applicable plugin\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n     * defined on the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillBeUsed()\n     * - cachedResponseWillBeUsed()\n     *\n     * @param {Request|string} key The Request or URL to use as the cache key.\n     * @return {Promise<Response|undefined>} A matching response, if found.\n     */\n    async cacheMatch(key) {\n        const request = toRequest(key);\n        let cachedResponse;\n        const { cacheName, matchOptions } = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, 'read');\n        const multiMatchOptions = Object.assign(Object.assign({}, matchOptions), { cacheName });\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        if (process.env.NODE_ENV !== 'production') {\n            if (cachedResponse) {\n                logger.debug(`Found a cached response in '${cacheName}'.`);\n            }\n            else {\n                logger.debug(`No cached response found in '${cacheName}'.`);\n            }\n        }\n        for (const callback of this.iterateCallbacks('cachedResponseWillBeUsed')) {\n            cachedResponse =\n                (await callback({\n                    cacheName,\n                    matchOptions,\n                    cachedResponse,\n                    request: effectiveRequest,\n                    event: this.event,\n                })) || undefined;\n        }\n        return cachedResponse;\n    }\n    /**\n     * Puts a request/response pair in the cache (and invokes any applicable\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\n     * the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillBeUsed()\n     * - cacheWillUpdate()\n     * - cacheDidUpdate()\n     *\n     * @param {Request|string} key The request or URL to use as the cache key.\n     * @param {Response} response The response to cache.\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\n     * not be cached, and `true` otherwise.\n     */\n    async cachePut(key, response) {\n        const request = toRequest(key);\n        // Run in the next task to avoid blocking other cache reads.\n        // https://github.com/w3c/ServiceWorker/issues/1397\n        await timeout(0);\n        const effectiveRequest = await this.getCacheKey(request, 'write');\n        if (process.env.NODE_ENV !== 'production') {\n            if (effectiveRequest.method && effectiveRequest.method !== 'GET') {\n                throw new WorkboxError('attempt-to-cache-non-get-request', {\n                    url: getFriendlyURL(effectiveRequest.url),\n                    method: effectiveRequest.method,\n                });\n            }\n            // See https://github.com/GoogleChrome/workbox/issues/2818\n            const vary = response.headers.get('Vary');\n            if (vary) {\n                logger.debug(`The response for ${getFriendlyURL(effectiveRequest.url)} ` +\n                    `has a 'Vary: ${vary}' header. ` +\n                    `Consider setting the {ignoreVary: true} option on your strategy ` +\n                    `to ensure cache matching and deletion works as expected.`);\n            }\n        }\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.error(`Cannot cache non-existent response for ` +\n                    `'${getFriendlyURL(effectiveRequest.url)}'.`);\n            }\n            throw new WorkboxError('cache-put-with-no-response', {\n                url: getFriendlyURL(effectiveRequest.url),\n            });\n        }\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' ` +\n                    `will not be cached.`, responseToCache);\n            }\n            return false;\n        }\n        const { cacheName, matchOptions } = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        const hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\n        const oldResponse = hasCacheUpdateCallback\n            ? await cacheMatchIgnoreParams(\n            // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n            // feature. Consider into ways to only add this behavior if using\n            // precaching.\n            cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions)\n            : null;\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Updating the '${cacheName}' cache with a new Response ` +\n                `for ${getFriendlyURL(effectiveRequest.url)}.`);\n        }\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n                if (error.name === 'QuotaExceededError') {\n                    await executeQuotaErrorCallbacks();\n                }\n                throw error;\n            }\n        }\n        for (const callback of this.iterateCallbacks('cacheDidUpdate')) {\n            await callback({\n                cacheName,\n                oldResponse,\n                newResponse: responseToCache.clone(),\n                request: effectiveRequest,\n                event: this.event,\n            });\n        }\n        return true;\n    }\n    /**\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n     * executes any of those callbacks found in sequence. The final `Request`\n     * object returned by the last plugin is treated as the cache key for cache\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n     * been registered, the passed request is returned unmodified\n     *\n     * @param {Request} request\n     * @param {string} mode\n     * @return {Promise<Request>}\n     */\n    async getCacheKey(request, mode) {\n        const key = `${request.url} | ${mode}`;\n        if (!this._cacheKeys[key]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks('cacheKeyWillBeUsed')) {\n                effectiveRequest = toRequest(await callback({\n                    mode,\n                    request: effectiveRequest,\n                    event: this.event,\n                    // params has a type any can't change right now.\n                    params: this.params, // eslint-disable-line\n                }));\n            }\n            this._cacheKeys[key] = effectiveRequest;\n        }\n        return this._cacheKeys[key];\n    }\n    /**\n     * Returns true if the strategy has at least one plugin with the given\n     * callback.\n     *\n     * @param {string} name The name of the callback to check for.\n     * @return {boolean}\n     */\n    hasCallback(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (name in plugin) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Runs all plugin callbacks matching the given name, in order, passing the\n     * given param object (merged ith the current plugin state) as the only\n     * argument.\n     *\n     * Note: since this method runs all plugins, it's not suitable for cases\n     * where the return value of a callback needs to be applied prior to calling\n     * the next callback. See\n     * {@link workbox-strategies.StrategyHandler#iterateCallbacks}\n     * below for how to handle that case.\n     *\n     * @param {string} name The name of the callback to run within each plugin.\n     * @param {Object} param The object to pass as the first (and only) param\n     *     when executing each callback. This object will be merged with the\n     *     current plugin state prior to callback execution.\n     */\n    async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name)) {\n            // TODO(philipwalton): not sure why `any` is needed. It seems like\n            // this should work with `as WorkboxPluginCallbackParam[C]`.\n            await callback(param);\n        }\n    }\n    /**\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\n     * where each callback is wrapped with the current handler state (i.e. when\n     * you call each callback, whatever object parameter you pass it will\n     * be merged with the plugin's current state).\n     *\n     * @param {string} name The name fo the callback to run\n     * @return {Array<Function>}\n     */\n    *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (typeof plugin[name] === 'function') {\n                const state = this._pluginStateMap.get(plugin);\n                const statefulCallback = (param) => {\n                    const statefulParam = Object.assign(Object.assign({}, param), { state });\n                    // TODO(philipwalton): not sure why `any` is needed. It seems like\n                    // this should work with `as WorkboxPluginCallbackParam[C]`.\n                    return plugin[name](statefulParam);\n                };\n                yield statefulCallback;\n            }\n        }\n    }\n    /**\n     * Adds a promise to the\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\n     * of the event event associated with the request being handled (usually a\n     * `FetchEvent`).\n     *\n     * Note: you can await\n     * {@link workbox-strategies.StrategyHandler~doneWaiting}\n     * to know when all added promises have settled.\n     *\n     * @param {Promise} promise A promise to add to the extend lifetime promises\n     *     of the event that triggered the request.\n     */\n    waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    }\n    /**\n     * Returns a promise that resolves once all promises passed to\n     * {@link workbox-strategies.StrategyHandler~waitUntil}\n     * have settled.\n     *\n     * Note: any work done after `doneWaiting()` settles should be manually\n     * passed to an event's `waitUntil()` method (not this handler's\n     * `waitUntil()` method), otherwise the service worker thread my be killed\n     * prior to your work completing.\n     */\n    async doneWaiting() {\n        let promise;\n        while ((promise = this._extendLifetimePromises.shift())) {\n            await promise;\n        }\n    }\n    /**\n     * Stops running the strategy and immediately resolves any pending\n     * `waitUntil()` promises.\n     */\n    destroy() {\n        this._handlerDeferred.resolve(null);\n    }\n    /**\n     * This method will call cacheWillUpdate on the available plugins (or use\n     * status === 200) to determine if the Response is safe and valid to cache.\n     *\n     * @param {Request} options.request\n     * @param {Response} options.response\n     * @return {Promise<Response|undefined>}\n     *\n     * @private\n     */\n    async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks('cacheWillUpdate')) {\n            responseToCache =\n                (await callback({\n                    request: this.request,\n                    response: responseToCache,\n                    event: this.event,\n                })) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) {\n                break;\n            }\n        }\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) {\n                responseToCache = undefined;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (responseToCache) {\n                    if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                            logger.warn(`The response for '${this.request.url}' ` +\n                                `is an opaque response. The caching strategy that you're ` +\n                                `using will not cache opaque responses by default.`);\n                        }\n                        else {\n                            logger.debug(`The response for '${this.request.url}' ` +\n                                `returned a status code of '${response.status}' and won't ` +\n                                `be cached as a result.`);\n                        }\n                    }\n                }\n            }\n        }\n        return responseToCache;\n    }\n}\nexport { StrategyHandler };\n", "/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { StrategyHandler } from './StrategyHandler.js';\nimport './_version.js';\n/**\n * An abstract base class that all other strategy classes must extend from:\n *\n * @memberof workbox-strategies\n */\nclass Strategy {\n    /**\n     * Creates a new instance of the strategy and sets all documented option\n     * properties as public instance properties.\n     *\n     * Note: if a custom strategy class extends the base Strategy class and does\n     * not need more than these properties, it does not need to define its own\n     * constructor.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     */\n    constructor(options = {}) {\n        /**\n         * Cache name to store and retrieve\n         * requests. Defaults to the cache names provided by\n         * {@link workbox-core.cacheNames}.\n         *\n         * @type {string}\n         */\n        this.cacheName = cacheNames.getRuntimeName(options.cacheName);\n        /**\n         * The list\n         * [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n         * used by this strategy.\n         *\n         * @type {Array<Object>}\n         */\n        this.plugins = options.plugins || [];\n        /**\n         * Values passed along to the\n         * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}\n         * of all fetch() requests made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.fetchOptions = options.fetchOptions;\n        /**\n         * The\n         * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n         * for any `cache.match()` or `cache.put()` calls made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.matchOptions = options.matchOptions;\n    }\n    /**\n     * Perform a request strategy and returns a `Promise` that will resolve with\n     * a `Response`, invoking all relevant plugin callbacks.\n     *\n     * When a strategy instance is registered with a Workbox\n     * {@link workbox-routing.Route}, this method is automatically\n     * called when the route matches.\n     *\n     * Alternatively, this method can be used in a standalone `FetchEvent`\n     * listener by passing it to `event.respondWith()`.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     */\n    handle(options) {\n        const [responseDone] = this.handleAll(options);\n        return responseDone;\n    }\n    /**\n     * Similar to {@link workbox-strategies.Strategy~handle}, but\n     * instead of just returning a `Promise` that resolves to a `Response` it\n     * it will return an tuple of `[response, done]` promises, where the former\n     * (`response`) is equivalent to what `handle()` returns, and the latter is a\n     * Promise that will resolve once any promises that were added to\n     * `event.waitUntil()` as part of performing the strategy have completed.\n     *\n     * You can await the `done` promise to ensure any extra work performed by\n     * the strategy (usually caching responses) completes successfully.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     * @return {Array<Promise>} A tuple of [response, done]\n     *     promises that can be used to determine when the response resolves as\n     *     well as when the handler has completed all its work.\n     */\n    handleAll(options) {\n        // Allow for flexible options to be passed.\n        if (options instanceof FetchEvent) {\n            options = {\n                event: options,\n                request: options.request,\n            };\n        }\n        const event = options.event;\n        const request = typeof options.request === 'string'\n            ? new Request(options.request)\n            : options.request;\n        const params = 'params' in options ? options.params : undefined;\n        const handler = new StrategyHandler(this, { event, request, params });\n        const responseDone = this._getResponse(handler, request, event);\n        const handlerDone = this._awaitComplete(responseDone, handler, request, event);\n        // Return an array of promises, suitable for use with Promise.all().\n        return [responseDone, handlerDone];\n    }\n    async _getResponse(handler, request, event) {\n        await handler.runCallbacks('handlerWillStart', { event, request });\n        let response = undefined;\n        try {\n            response = await this._handle(request, handler);\n            // The \"official\" Strategy subclasses all throw this error automatically,\n            // but in case a third-party Strategy doesn't, ensure that we have a\n            // consistent failure when there's no response or an error response.\n            if (!response || response.type === 'error') {\n                throw new WorkboxError('no-response', { url: request.url });\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                for (const callback of handler.iterateCallbacks('handlerDidError')) {\n                    response = await callback({ error, event, request });\n                    if (response) {\n                        break;\n                    }\n                }\n            }\n            if (!response) {\n                throw error;\n            }\n            else if (process.env.NODE_ENV !== 'production') {\n                logger.log(`While responding to '${getFriendlyURL(request.url)}', ` +\n                    `an ${error instanceof Error ? error.toString() : ''} error occurred. Using a fallback response provided by ` +\n                    `a handlerDidError plugin.`);\n            }\n        }\n        for (const callback of handler.iterateCallbacks('handlerWillRespond')) {\n            response = await callback({ event, request, response });\n        }\n        return response;\n    }\n    async _awaitComplete(responseDone, handler, request, event) {\n        let response;\n        let error;\n        try {\n            response = await responseDone;\n        }\n        catch (error) {\n            // Ignore errors, as response errors should be caught via the `response`\n            // promise above. The `done` promise will only throw for errors in\n            // promises passed to `handler.waitUntil()`.\n        }\n        try {\n            await handler.runCallbacks('handlerDidRespond', {\n                event,\n                request,\n                response,\n            });\n            await handler.doneWaiting();\n        }\n        catch (waitUntilError) {\n            if (waitUntilError instanceof Error) {\n                error = waitUntilError;\n            }\n        }\n        await handler.runCallbacks('handlerDidComplete', {\n            event,\n            request,\n            response,\n            error: error,\n        });\n        handler.destroy();\n        if (error) {\n            throw error;\n        }\n    }\n}\nexport { Strategy };\n/**\n * Classes extending the `Strategy` based class should implement this method,\n * and leverage the {@link workbox-strategies.StrategyHandler}\n * arg to perform all fetching and cache logic, which will ensure all relevant\n * cache, cache options, fetch options and plugins are used (per the current\n * strategy instance).\n *\n * @name _handle\n * @instance\n * @abstract\n * @function\n * @param {Request} request\n * @param {workbox-strategies.StrategyHandler} handler\n * @return {Promise<Response>}\n *\n * @memberof workbox-strategies.Strategy\n */\n", "/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { copyResponse } from 'workbox-core/copyResponse.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from 'workbox-strategies/Strategy.js';\nimport './_version.js';\n/**\n * A {@link workbox-strategies.Strategy} implementation\n * specifically designed to work with\n * {@link workbox-precaching.PrecacheController}\n * to both cache and fetch precached assets.\n *\n * Note: an instance of this class is created automatically when creating a\n * `PrecacheController`; it's generally not necessary to create this yourself.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-precaching\n */\nclass PrecacheStrategy extends Strategy {\n    /**\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] {@link https://developers.google.com/web/tools/workbox/guides/using-plugins|Plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters|init}\n     * of all fetch() requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * {@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions|CacheQueryOptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor(options = {}) {\n        options.cacheName = cacheNames.getPrecacheName(options.cacheName);\n        super(options);\n        this._fallbackToNetwork =\n            options.fallbackToNetwork === false ? false : true;\n        // Redirected responses cannot be used to satisfy a navigation request, so\n        // any redirected response must be \"copied\" rather than cloned, so the new\n        // response doesn't contain the `redirected` flag. See:\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\n        this.plugins.push(PrecacheStrategy.copyRedirectedCacheableResponsesPlugin);\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const response = await handler.cacheMatch(request);\n        if (response) {\n            return response;\n        }\n        // If this is an `install` event for an entry that isn't already cached,\n        // then populate the cache.\n        if (handler.event && handler.event.type === 'install') {\n            return await this._handleInstall(request, handler);\n        }\n        // Getting here means something went wrong. An entry that should have been\n        // precached wasn't found in the cache.\n        return await this._handleFetch(request, handler);\n    }\n    async _handleFetch(request, handler) {\n        let response;\n        const params = (handler.params || {});\n        // Fall back to the network if we're configured to do so.\n        if (this._fallbackToNetwork) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.warn(`The precached response for ` +\n                    `${getFriendlyURL(request.url)} in ${this.cacheName} was not ` +\n                    `found. Falling back to the network.`);\n            }\n            const integrityInManifest = params.integrity;\n            const integrityInRequest = request.integrity;\n            const noIntegrityConflict = !integrityInRequest || integrityInRequest === integrityInManifest;\n            // Do not add integrity if the original request is no-cors\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            response = await handler.fetch(new Request(request, {\n                integrity: request.mode !== 'no-cors'\n                    ? integrityInRequest || integrityInManifest\n                    : undefined,\n            }));\n            // It's only \"safe\" to repair the cache if we're using SRI to guarantee\n            // that the response matches the precache manifest's expectations,\n            // and there's either a) no integrity property in the incoming request\n            // or b) there is an integrity, and it matches the precache manifest.\n            // See https://github.com/GoogleChrome/workbox/issues/2858\n            // Also if the original request users no-cors we don't use integrity.\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            if (integrityInManifest &&\n                noIntegrityConflict &&\n                request.mode !== 'no-cors') {\n                this._useDefaultCacheabilityPluginIfNeeded();\n                const wasCached = await handler.cachePut(request, response.clone());\n                if (process.env.NODE_ENV !== 'production') {\n                    if (wasCached) {\n                        logger.log(`A response for ${getFriendlyURL(request.url)} ` +\n                            `was used to \"repair\" the precache.`);\n                    }\n                }\n            }\n        }\n        else {\n            // This shouldn't normally happen, but there are edge cases:\n            // https://github.com/GoogleChrome/workbox/issues/1441\n            throw new WorkboxError('missing-precache-entry', {\n                cacheName: this.cacheName,\n                url: request.url,\n            });\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            const cacheKey = params.cacheKey || (await handler.getCacheKey(request, 'read'));\n            // Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Precaching is responding to: ` + getFriendlyURL(request.url));\n            logger.log(`Serving the precached url: ${getFriendlyURL(cacheKey instanceof Request ? cacheKey.url : cacheKey)}`);\n            logger.groupCollapsed(`View request details here.`);\n            logger.log(request);\n            logger.groupEnd();\n            logger.groupCollapsed(`View response details here.`);\n            logger.log(response);\n            logger.groupEnd();\n            logger.groupEnd();\n        }\n        return response;\n    }\n    async _handleInstall(request, handler) {\n        this._useDefaultCacheabilityPluginIfNeeded();\n        const response = await handler.fetch(request);\n        // Make sure we defer cachePut() until after we know the response\n        // should be cached; see https://github.com/GoogleChrome/workbox/issues/2737\n        const wasCached = await handler.cachePut(request, response.clone());\n        if (!wasCached) {\n            // Throwing here will lead to the `install` handler failing, which\n            // we want to do if *any* of the responses aren't safe to cache.\n            throw new WorkboxError('bad-precaching-response', {\n                url: request.url,\n                status: response.status,\n            });\n        }\n        return response;\n    }\n    /**\n     * This method is complex, as there a number of things to account for:\n     *\n     * The `plugins` array can be set at construction, and/or it might be added to\n     * to at any time before the strategy is used.\n     *\n     * At the time the strategy is used (i.e. during an `install` event), there\n     * needs to be at least one plugin that implements `cacheWillUpdate` in the\n     * array, other than `copyRedirectedCacheableResponsesPlugin`.\n     *\n     * - If this method is called and there are no suitable `cacheWillUpdate`\n     * plugins, we need to add `defaultPrecacheCacheabilityPlugin`.\n     *\n     * - If this method is called and there is exactly one `cacheWillUpdate`, then\n     * we don't have to do anything (this might be a previously added\n     * `defaultPrecacheCacheabilityPlugin`, or it might be a custom plugin).\n     *\n     * - If this method is called and there is more than one `cacheWillUpdate`,\n     * then we need to check if one is `defaultPrecacheCacheabilityPlugin`. If so,\n     * we need to remove it. (This situation is unlikely, but it could happen if\n     * the strategy is used multiple times, the first without a `cacheWillUpdate`,\n     * and then later on after manually adding a custom `cacheWillUpdate`.)\n     *\n     * See https://github.com/GoogleChrome/workbox/issues/2737 for more context.\n     *\n     * @private\n     */\n    _useDefaultCacheabilityPluginIfNeeded() {\n        let defaultPluginIndex = null;\n        let cacheWillUpdatePluginCount = 0;\n        for (const [index, plugin] of this.plugins.entries()) {\n            // Ignore the copy redirected plugin when determining what to do.\n            if (plugin === PrecacheStrategy.copyRedirectedCacheableResponsesPlugin) {\n                continue;\n            }\n            // Save the default plugin's index, in case it needs to be removed.\n            if (plugin === PrecacheStrategy.defaultPrecacheCacheabilityPlugin) {\n                defaultPluginIndex = index;\n            }\n            if (plugin.cacheWillUpdate) {\n                cacheWillUpdatePluginCount++;\n            }\n        }\n        if (cacheWillUpdatePluginCount === 0) {\n            this.plugins.push(PrecacheStrategy.defaultPrecacheCacheabilityPlugin);\n        }\n        else if (cacheWillUpdatePluginCount > 1 && defaultPluginIndex !== null) {\n            // Only remove the default plugin; multiple custom plugins are allowed.\n            this.plugins.splice(defaultPluginIndex, 1);\n        }\n        // Nothing needs to be done if cacheWillUpdatePluginCount is 1\n    }\n}\nPrecacheStrategy.defaultPrecacheCacheabilityPlugin = {\n    async cacheWillUpdate({ response }) {\n        if (!response || response.status >= 400) {\n            return null;\n        }\n        return response;\n    },\n};\nPrecacheStrategy.copyRedirectedCacheableResponsesPlugin = {\n    async cacheWillUpdate({ response }) {\n        return response.redirected ? await copyResponse(response) : response;\n    },\n};\nexport { PrecacheStrategy };\n", "/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { waitUntil } from 'workbox-core/_private/waitUntil.js';\nimport { createCacheKey } from './utils/createCacheKey.js';\nimport { PrecacheInstallReportPlugin } from './utils/PrecacheInstallReportPlugin.js';\nimport { PrecacheCacheKeyPlugin } from './utils/PrecacheCacheKeyPlugin.js';\nimport { printCleanupDetails } from './utils/printCleanupDetails.js';\nimport { printInstallDetails } from './utils/printInstallDetails.js';\nimport { PrecacheStrategy } from './PrecacheStrategy.js';\nimport './_version.js';\n/**\n * Performs efficient precaching of assets.\n *\n * @memberof workbox-precaching\n */\nclass PrecacheController {\n    /**\n     * Create a new PrecacheController.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] The cache to use for precaching.\n     * @param {string} [options.plugins] Plugins to use when precaching as well\n     * as responding to fetch events for precached assets.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor({ cacheName, plugins = [], fallbackToNetwork = true, } = {}) {\n        this._urlsToCacheKeys = new Map();\n        this._urlsToCacheModes = new Map();\n        this._cacheKeysToIntegrities = new Map();\n        this._strategy = new PrecacheStrategy({\n            cacheName: cacheNames.getPrecacheName(cacheName),\n            plugins: [\n                ...plugins,\n                new PrecacheCacheKeyPlugin({ precacheController: this }),\n            ],\n            fallbackToNetwork,\n        });\n        // Bind the install and activate methods to the instance.\n        this.install = this.install.bind(this);\n        this.activate = this.activate.bind(this);\n    }\n    /**\n     * @type {workbox-precaching.PrecacheStrategy} The strategy created by this controller and\n     * used to cache assets and respond to fetch events.\n     */\n    get strategy() {\n        return this._strategy;\n    }\n    /**\n     * Adds items to the precache list, removing any duplicates and\n     * stores the files in the\n     * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n     * worker installs.\n     *\n     * This method can be called multiple times.\n     *\n     * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n     */\n    precache(entries) {\n        this.addToCacheList(entries);\n        if (!this._installAndActiveListenersAdded) {\n            self.addEventListener('install', this.install);\n            self.addEventListener('activate', this.activate);\n            this._installAndActiveListenersAdded = true;\n        }\n    }\n    /**\n     * This method will add items to the precache list, removing duplicates\n     * and ensuring the information is valid.\n     *\n     * @param {Array<workbox-precaching.PrecacheController.PrecacheEntry|string>} entries\n     *     Array of entries to precache.\n     */\n    addToCacheList(entries) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArray(entries, {\n                moduleName: 'workbox-precaching',\n                className: 'PrecacheController',\n                funcName: 'addToCacheList',\n                paramName: 'entries',\n            });\n        }\n        const urlsToWarnAbout = [];\n        for (const entry of entries) {\n            // See https://github.com/GoogleChrome/workbox/issues/2259\n            if (typeof entry === 'string') {\n                urlsToWarnAbout.push(entry);\n            }\n            else if (entry && entry.revision === undefined) {\n                urlsToWarnAbout.push(entry.url);\n            }\n            const { cacheKey, url } = createCacheKey(entry);\n            const cacheMode = typeof entry !== 'string' && entry.revision ? 'reload' : 'default';\n            if (this._urlsToCacheKeys.has(url) &&\n                this._urlsToCacheKeys.get(url) !== cacheKey) {\n                throw new WorkboxError('add-to-cache-list-conflicting-entries', {\n                    firstEntry: this._urlsToCacheKeys.get(url),\n                    secondEntry: cacheKey,\n                });\n            }\n            if (typeof entry !== 'string' && entry.integrity) {\n                if (this._cacheKeysToIntegrities.has(cacheKey) &&\n                    this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\n                    throw new WorkboxError('add-to-cache-list-conflicting-integrities', {\n                        url,\n                    });\n                }\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\n            }\n            this._urlsToCacheKeys.set(url, cacheKey);\n            this._urlsToCacheModes.set(url, cacheMode);\n            if (urlsToWarnAbout.length > 0) {\n                const warningMessage = `Workbox is precaching URLs without revision ` +\n                    `info: ${urlsToWarnAbout.join(', ')}\\nThis is generally NOT safe. ` +\n                    `Learn more at https://bit.ly/wb-precache`;\n                if (process.env.NODE_ENV === 'production') {\n                    // Use console directly to display this warning without bloating\n                    // bundle sizes by pulling in all of the logger codebase in prod.\n                    console.warn(warningMessage);\n                }\n                else {\n                    logger.warn(warningMessage);\n                }\n            }\n        }\n    }\n    /**\n     * Precaches new and updated assets. Call this method from the service worker\n     * install event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.InstallResult>}\n     */\n    install(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const installReportPlugin = new PrecacheInstallReportPlugin();\n            this.strategy.plugins.push(installReportPlugin);\n            // Cache entries one at a time.\n            // See https://github.com/GoogleChrome/workbox/issues/2528\n            for (const [url, cacheKey] of this._urlsToCacheKeys) {\n                const integrity = this._cacheKeysToIntegrities.get(cacheKey);\n                const cacheMode = this._urlsToCacheModes.get(url);\n                const request = new Request(url, {\n                    integrity,\n                    cache: cacheMode,\n                    credentials: 'same-origin',\n                });\n                await Promise.all(this.strategy.handleAll({\n                    params: { cacheKey },\n                    request,\n                    event,\n                }));\n            }\n            const { updatedURLs, notUpdatedURLs } = installReportPlugin;\n            if (process.env.NODE_ENV !== 'production') {\n                printInstallDetails(updatedURLs, notUpdatedURLs);\n            }\n            return { updatedURLs, notUpdatedURLs };\n        });\n    }\n    /**\n     * Deletes assets that are no longer present in the current precache manifest.\n     * Call this method from the service worker activate event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.CleanupResult>}\n     */\n    activate(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            const currentlyCachedRequests = await cache.keys();\n            const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\n            const deletedURLs = [];\n            for (const request of currentlyCachedRequests) {\n                if (!expectedCacheKeys.has(request.url)) {\n                    await cache.delete(request);\n                    deletedURLs.push(request.url);\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                printCleanupDetails(deletedURLs);\n            }\n            return { deletedURLs };\n        });\n    }\n    /**\n     * Returns a mapping of a precached URL to the corresponding cache key, taking\n     * into account the revision information for the URL.\n     *\n     * @return {Map<string, string>} A URL to cache key mapping.\n     */\n    getURLsToCacheKeys() {\n        return this._urlsToCacheKeys;\n    }\n    /**\n     * Returns a list of all the URLs that have been precached by the current\n     * service worker.\n     *\n     * @return {Array<string>} The precached URLs.\n     */\n    getCachedURLs() {\n        return [...this._urlsToCacheKeys.keys()];\n    }\n    /**\n     * Returns the cache key used for storing a given URL. If that URL is\n     * unversioned, like `/index.html', then the cache key will be the original\n     * URL with a search parameter appended to it.\n     *\n     * @param {string} url A URL whose cache key you want to look up.\n     * @return {string} The versioned URL that corresponds to a cache key\n     * for the original URL, or undefined if that URL isn't precached.\n     */\n    getCacheKeyForURL(url) {\n        const urlObject = new URL(url, location.href);\n        return this._urlsToCacheKeys.get(urlObject.href);\n    }\n    /**\n     * @param {string} url A cache key whose SRI you want to look up.\n     * @return {string} The subresource integrity associated with the cache key,\n     * or undefined if it's not set.\n     */\n    getIntegrityForCacheKey(cacheKey) {\n        return this._cacheKeysToIntegrities.get(cacheKey);\n    }\n    /**\n     * This acts as a drop-in replacement for\n     * [`cache.match()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/match)\n     * with the following differences:\n     *\n     * - It knows what the name of the precache is, and only checks in that cache.\n     * - It allows you to pass in an \"original\" URL without versioning parameters,\n     * and it will automatically look up the correct cache key for the currently\n     * active revision of that URL.\n     *\n     * E.g., `matchPrecache('index.html')` will find the correct precached\n     * response for the currently active service worker, even if the actual cache\n     * key is `'/index.html?__WB_REVISION__=1234abcd'`.\n     *\n     * @param {string|Request} request The key (without revisioning parameters)\n     * to look up in the precache.\n     * @return {Promise<Response|undefined>}\n     */\n    async matchPrecache(request) {\n        const url = request instanceof Request ? request.url : request;\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (cacheKey) {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            return cache.match(cacheKey);\n        }\n        return undefined;\n    }\n    /**\n     * Returns a function that looks up `url` in the precache (taking into\n     * account revision information), and returns the corresponding `Response`.\n     *\n     * @param {string} url The precached URL which will be used to lookup the\n     * `Response`.\n     * @return {workbox-routing~handlerCallback}\n     */\n    createHandlerBoundToURL(url) {\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (!cacheKey) {\n            throw new WorkboxError('non-precached-url', { url });\n        }\n        return (options) => {\n            options.request = new Request(url);\n            options.params = Object.assign({ cacheKey }, options.params);\n            return this.strategy.handle(options);\n        };\n    }\n}\nexport { PrecacheController };\n", "/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { PrecacheController } from '../PrecacheController.js';\nimport '../_version.js';\nlet precacheController;\n/**\n * @return {PrecacheController}\n * @private\n */\nexport const getOrCreatePrecacheController = () => {\n    if (!precacheController) {\n        precacheController = new PrecacheController();\n    }\n    return precacheController;\n};\n", "/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Adds plugins to the precaching strategy.\n *\n * @param {Array<Object>} plugins\n *\n * @memberof workbox-precaching\n */\nfunction addPlugins(plugins) {\n    const precacheController = getOrCreatePrecacheController();\n    precacheController.strategy.plugins.push(...plugins);\n}\nexport { addPlugins };\n", "\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:routing:7.2.0'] && _();\n}\ncatch (e) { }\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The default HTTP method, 'GET', used when there's no specific method\n * configured for a route.\n *\n * @type {string}\n *\n * @private\n */\nexport const defaultMethod = 'GET';\n/**\n * The list of valid HTTP methods associated with requests that could be routed.\n *\n * @type {Array<string>}\n *\n * @private\n */\nexport const validMethods = [\n    'DELETE',\n    'GET',\n    'HEAD',\n    'PATCH',\n    'POST',\n    'PUT',\n];\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {function()|Object} handler Either a function, or an object with a\n * 'handle' method.\n * @return {Object} An object with a handle method.\n *\n * @private\n */\nexport const normalizeHandler = (handler) => {\n    if (handler && typeof handler === 'object') {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.hasMethod(handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return handler;\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(handler, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return { handle: handler };\n    }\n};\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods } from './utils/constants.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof workbox-routing\n */\nclass Route {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(match, handler, method = defaultMethod) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(match, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'match',\n            });\n            if (method) {\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\n            }\n        }\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n    /**\n     *\n     * @param {workbox-routing-handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response\n     */\n    setCatchHandler(handler) {\n        this.catchHandler = normalizeHandler(handler);\n    }\n}\nexport { Route };\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * {@link workbox-routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * @memberof workbox-routing\n * @extends workbox-routing.Route\n */\nclass RegExpRoute extends Route {\n    /**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * the captured values will be passed to the\n     * {@link workbox-routing~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(regExp, handler, method) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(regExp, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'RegExpRoute',\n                funcName: 'constructor',\n                paramName: 'pattern',\n            });\n        }\n        const match = ({ url }) => {\n            const result = regExp.exec(url.href);\n            // Return immediately if there's no match.\n            if (!result) {\n                return;\n            }\n            // Require that the match start at the first character in the URL string\n            // if it's a cross-origin request.\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n            // behind this behavior.\n            if (url.origin !== location.origin && result.index !== 0) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`The regular expression '${regExp.toString()}' only partially matched ` +\n                        `against the cross-origin URL '${url.toString()}'. RegExpRoute's will only ` +\n                        `handle cross-origin requests if they match the entire URL.`);\n                }\n                return;\n            }\n            // If the route matches, but there aren't any capture groups defined, then\n            // this will return [], which is truthy and therefore sufficient to\n            // indicate a match.\n            // If there are capture groups, then it will return their values.\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\nexport { RegExpRoute };\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { defaultMethod } from './utils/constants.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\n/**\n * The Router can be used to process a `FetchEvent` using one or more\n * {@link workbox-routing.Route}, responding with a `Response` if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof workbox-routing\n */\nclass Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n        this._routes = new Map();\n        this._defaultHandlerMap = new Map();\n    }\n    /**\n     * @return {Map<string, Array<workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n    get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n    addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', ((event) => {\n            const { request } = event;\n            const responsePromise = this.handleRequest({ request, event });\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            }\n        }));\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n    addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', ((event) => {\n            // event.data is type 'any'\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (event.data && event.data.type === 'CACHE_URLS') {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                const { payload } = event.data;\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n                }\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n                    if (typeof entry === 'string') {\n                        entry = [entry];\n                    }\n                    const request = new Request(...entry);\n                    return this.handleRequest({ request, event });\n                    // TODO(philipwalton): TypeScript errors without this typecast for\n                    // some reason (probably a bug). The real type here should work but\n                    // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) {\n                    void requestPromises.then(() => event.ports[0].postMessage(true));\n                }\n            }\n        }));\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle.\n     * @param {ExtendableEvent} options.event The event that triggered the\n     *     request.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n    handleRequest({ request, event, }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'handleRequest',\n                paramName: 'options.request',\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n            }\n            return;\n        }\n        const sameOrigin = url.origin === location.origin;\n        const { params, route } = this.findMatchingRoute({\n            event,\n            request,\n            sameOrigin,\n            url,\n        });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== 'production') {\n            if (handler) {\n                debugMessages.push([`Found a route to handle this request:`, route]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`,\n                        params,\n                    ]);\n                }\n            }\n        }\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        const method = request.method;\n        if (!handler && this._defaultHandlerMap.has(method)) {\n            if (process.env.NODE_ENV !== 'production') {\n                debugMessages.push(`Failed to find a matching route. Falling ` +\n                    `back to the default handler for ${method}.`);\n            }\n            handler = this._defaultHandlerMap.get(method);\n        }\n        if (!handler) {\n            if (process.env.NODE_ENV !== 'production') {\n                // No handler so Workbox will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n            }\n            return;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            // We have a handler, meaning Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n            debugMessages.forEach((msg) => {\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                }\n                else {\n                    logger.log(msg);\n                }\n            });\n            logger.groupEnd();\n        }\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({ url, request, event, params });\n        }\n        catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        // Get route's catch handler, if it exists\n        const catchHandler = route && route.catchHandler;\n        if (responsePromise instanceof Promise &&\n            (this._catchHandler || catchHandler)) {\n            responsePromise = responsePromise.catch(async (err) => {\n                // If there's a route catch handler, process that first\n                if (catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to route's Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    try {\n                        return await catchHandler.handle({ url, request, event, params });\n                    }\n                    catch (catchErr) {\n                        if (catchErr instanceof Error) {\n                            err = catchErr;\n                        }\n                    }\n                }\n                if (this._catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to global Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    return this._catchHandler.handle({ url, request, event });\n                }\n                throw err;\n            });\n        }\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {boolean} options.sameOrigin The result of comparing `url.origin`\n     *     against the current origin.\n     * @param {Request} options.request The request to match.\n     * @param {Event} options.event The corresponding event.\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n    findMatchingRoute({ url, sameOrigin, request, event, }) {\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes) {\n            let params;\n            // route.match returns type any, not possible to change right now.\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const matchResult = route.match({ url, sameOrigin, request, event });\n            if (matchResult) {\n                if (process.env.NODE_ENV !== 'production') {\n                    // Warn developers that using an async matchCallback is almost always\n                    // not the right thing to do.\n                    if (matchResult instanceof Promise) {\n                        logger.warn(`While routing ${getFriendlyURL(url)}, an async ` +\n                            `matchCallback function was used. Please convert the ` +\n                            `following route to use a synchronous matchCallback function:`, route);\n                    }\n                }\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                params = matchResult;\n                if (Array.isArray(params) && params.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                }\n                else if (matchResult.constructor === Object && // eslint-disable-line\n                    Object.keys(matchResult).length === 0) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                }\n                else if (typeof matchResult === 'boolean') {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                }\n                // Return early if have a match.\n                return { route, params };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Each HTTP method ('GET', 'POST', etc.) gets its own default handler.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to associate with this\n     * default handler. Each method has its own default.\n     */\n    setDefaultHandler(handler, method = defaultMethod) {\n        this._defaultHandlerMap.set(method, normalizeHandler(handler));\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to register.\n     */\n    registerRoute(route) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(route, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route, 'match', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.isType(route.handler, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route.handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.handler',\n            });\n            assert.isType(route.method, 'string', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.method',\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to unregister.\n     */\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\n                method: route.method,\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        }\n        else {\n            throw new WorkboxError('unregister-route-route-not-registered');\n        }\n    }\n}\nexport { Router };\n", "/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Router } from '../Router.js';\nimport '../_version.js';\nlet defaultRouter;\n/**\n * Creates a new, singleton Router instance if one does not exist. If one\n * does already exist, that instance is returned.\n *\n * @private\n * @return {Router}\n */\nexport const getOrCreateDefaultRouter = () => {\n    if (!defaultRouter) {\n        defaultRouter = new Router();\n        // The helpers that use the default Router assume these listeners exist.\n        defaultRouter.addFetchListener();\n        defaultRouter.addCacheListener();\n    }\n    return defaultRouter;\n};\n", "/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Route } from './Route.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call {@link workbox-routing.Router#registerRoute}.\n *\n * @param {RegExp|string|workbox-routing.Route~matchCallback|workbox-routing.Route} capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {workbox-routing~handlerCallback} [handler] A callback\n * function that returns a Promise resulting in a Response. This parameter\n * is required if `capture` is not a `Route` object.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n * @return {workbox-routing.Route} The generated `Route`.\n *\n * @memberof workbox-routing\n */\nfunction registerRoute(capture, handler, method) {\n    let route;\n    if (typeof capture === 'string') {\n        const captureUrl = new URL(capture, location.href);\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n                throw new WorkboxError('invalid-string', {\n                    moduleName: 'workbox-routing',\n                    funcName: 'registerRoute',\n                    paramName: 'capture',\n                });\n            }\n            // We want to check if Express-style wildcards are in the pathname only.\n            // TODO: Remove this log message in v4.\n            const valueToCheck = capture.startsWith('http')\n                ? captureUrl.pathname\n                : capture;\n            // See https://github.com/pillarjs/path-to-regexp#parameters\n            const wildcards = '[*:?+]';\n            if (new RegExp(`${wildcards}`).exec(valueToCheck)) {\n                logger.debug(`The '$capture' parameter contains an Express-style wildcard ` +\n                    `character (${wildcards}). Strings are now always interpreted as ` +\n                    `exact matches; use a RegExp for partial or wildcard matches.`);\n            }\n        }\n        const matchCallback = ({ url }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if (url.pathname === captureUrl.pathname &&\n                    url.origin !== captureUrl.origin) {\n                    logger.debug(`${capture} only partially matches the cross-origin URL ` +\n                        `${url.toString()}. This route will only handle cross-origin requests ` +\n                        `if they match the entire URL.`);\n                }\n            }\n            return url.href === captureUrl.href;\n        };\n        // If `capture` is a string then `handler` and `method` must be present.\n        route = new Route(matchCallback, handler, method);\n    }\n    else if (capture instanceof RegExp) {\n        // If `capture` is a `RegExp` then `handler` and `method` must be present.\n        route = new RegExpRoute(capture, handler, method);\n    }\n    else if (typeof capture === 'function') {\n        // If `capture` is a function then `handler` and `method` must be present.\n        route = new Route(capture, handler, method);\n    }\n    else if (capture instanceof Route) {\n        route = capture;\n    }\n    else {\n        throw new WorkboxError('unsupported-route-type', {\n            moduleName: 'workbox-routing',\n            funcName: 'registerRoute',\n            paramName: 'capture',\n        });\n    }\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.registerRoute(route);\n    return route;\n}\nexport { registerRoute };\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Removes any URL search parameters that should be ignored.\n *\n * @param {URL} urlObject The original URL.\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\n * each search parameter name. Matches mean that the search parameter should be\n * ignored.\n * @return {URL} The URL with any ignored search parameters removed.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching = []) {\n    // Convert the iterable into an array at the start of the loop to make sure\n    // deletion doesn't mess up iteration.\n    for (const paramName of [...urlObject.searchParams.keys()]) {\n        if (ignoreURLParametersMatching.some((regExp) => regExp.test(paramName))) {\n            urlObject.searchParams.delete(paramName);\n        }\n    }\n    return urlObject;\n}\n", "/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function* generateURLVariations(url, { ignoreURLParametersMatching = [/^utm_/, /^fbclid$/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) {\n    const urlObject = new URL(url, location.href);\n    urlObject.hash = '';\n    yield urlObject.href;\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n    yield urlWithoutIgnoredParams.href;\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\n        directoryURL.pathname += directoryIndex;\n        yield directoryURL.href;\n    }\n    if (cleanURLs) {\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\n        cleanURL.pathname += '.html';\n        yield cleanURL.href;\n    }\n    if (urlManipulation) {\n        const additionalURLs = urlManipulation({ url: urlObject });\n        for (const urlToAttempt of additionalURLs) {\n            yield urlToAttempt.href;\n        }\n    }\n}\n", "/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { Route } from 'workbox-routing/Route.js';\nimport { generateURLVariations } from './utils/generateURLVariations.js';\nimport './_version.js';\n/**\n * A subclass of {@link workbox-routing.Route} that takes a\n * {@link workbox-precaching.PrecacheController}\n * instance and uses it to match incoming requests and handle fetching\n * responses from the precache.\n *\n * @memberof workbox-precaching\n * @extends workbox-routing.Route\n */\nclass PrecacheRoute extends Route {\n    /**\n     * @param {PrecacheController} precacheController A `PrecacheController`\n     * instance used to both match requests and respond to fetch events.\n     * @param {Object} [options] Options to control how requests are matched\n     * against the list of precached URLs.\n     * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n     * check cache entries for a URLs ending with '/' to see if there is a hit when\n     * appending the `directoryIndex` value.\n     * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/, /^fbclid$/]] An\n     * array of regex's to remove search params when looking for a cache match.\n     * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n     * check the cache for the URL with a `.html` added to the end of the end.\n     * @param {workbox-precaching~urlManipulation} [options.urlManipulation]\n     * This is a function that should take a URL and return an array of\n     * alternative URLs that should be checked for precache matches.\n     */\n    constructor(precacheController, options) {\n        const match = ({ request, }) => {\n            const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\n            for (const possibleURL of generateURLVariations(request.url, options)) {\n                const cacheKey = urlsToCacheKeys.get(possibleURL);\n                if (cacheKey) {\n                    const integrity = precacheController.getIntegrityForCacheKey(cacheKey);\n                    return { cacheKey, integrity };\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Precaching did not find a match for ` + getFriendlyURL(request.url));\n            }\n            return;\n        };\n        super(match, precacheController.strategy);\n    }\n}\nexport { PrecacheRoute };\n", "/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { registerRoute } from 'workbox-routing/registerRoute.js';\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport { PrecacheRoute } from './PrecacheRoute.js';\nimport './_version.js';\n/**\n * Add a `fetch` listener to the service worker that will\n * respond to\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * @param {Object} [options] See the {@link workbox-precaching.PrecacheRoute}\n * options.\n *\n * @memberof workbox-precaching\n */\nfunction addRoute(options) {\n    const precacheController = getOrCreatePrecacheController();\n    const precacheRoute = new PrecacheRoute(precacheController, options);\n    registerRoute(precacheRoute);\n}\nexport { addRoute };\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst SUBSTRING_TO_FIND = '-precache-';\n/**\n * Cleans up incompatible precaches that were created by older versions of\n * Workbox, by a service worker registered under the current scope.\n *\n * This is meant to be called as part of the `activate` event.\n *\n * This should be safe to use as long as you don't include `substringToFind`\n * (defaulting to `-precache-`) in your non-precache cache names.\n *\n * @param {string} currentPrecacheName The cache name currently in use for\n * precaching. This cache won't be deleted.\n * @param {string} [substringToFind='-precache-'] Cache names which include this\n * substring will be deleted (excluding `currentPrecacheName`).\n * @return {Array<string>} A list of all the cache names that were deleted.\n *\n * @private\n * @memberof workbox-precaching\n */\nconst deleteOutdatedCaches = async (currentPrecacheName, substringToFind = SUBSTRING_TO_FIND) => {\n    const cacheNames = await self.caches.keys();\n    const cacheNamesToDelete = cacheNames.filter((cacheName) => {\n        return (cacheName.includes(substringToFind) &&\n            cacheName.includes(self.registration.scope) &&\n            cacheName !== currentPrecacheName);\n    });\n    await Promise.all(cacheNamesToDelete.map((cacheName) => self.caches.delete(cacheName)));\n    return cacheNamesToDelete;\n};\nexport { deleteOutdatedCaches };\n", "/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { deleteOutdatedCaches } from './utils/deleteOutdatedCaches.js';\nimport './_version.js';\n/**\n * Adds an `activate` event listener which will clean up incompatible\n * precaches that were created by older versions of Workbox.\n *\n * @memberof workbox-precaching\n */\nfunction cleanupOutdatedCaches() {\n    // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n    self.addEventListener('activate', ((event) => {\n        const cacheName = cacheNames.getPrecacheName();\n        event.waitUntil(deleteOutdatedCaches(cacheName).then((cachesDeleted) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if (cachesDeleted.length > 0) {\n                    logger.log(`The following out-of-date precaches were cleaned up ` +\n                        `automatically:`, cachesDeleted);\n                }\n            }\n        }));\n    }));\n}\nexport { cleanupOutdatedCaches };\n", "/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Helper function that calls\n * {@link PrecacheController#createHandlerBoundToURL} on the default\n * {@link PrecacheController} instance.\n *\n * If you are creating your own {@link PrecacheController}, then call the\n * {@link PrecacheController#createHandlerBoundToURL} on that instance,\n * instead of using this function.\n *\n * @param {string} url The precached URL which will be used to lookup the\n * `Response`.\n * @param {boolean} [fallbackToNetwork=true] Whether to attempt to get the\n * response from the network if there's a precache miss.\n * @return {workbox-routing~handlerCallback}\n *\n * @memberof workbox-precaching\n */\nfunction createHandlerBoundToURL(url) {\n    const precacheController = getOrCreatePrecacheController();\n    return precacheController.createHandlerBoundToURL(url);\n}\nexport { createHandlerBoundToURL };\n", "/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Takes in a URL, and returns the corresponding URL that could be used to\n * lookup the entry in the precache.\n *\n * If a relative URL is provided, the location of the service worker file will\n * be used as the base.\n *\n * For precached entries without revision information, the cache key will be the\n * same as the original URL.\n *\n * For precached entries with revision information, the cache key will be the\n * original URL with the addition of a query parameter used for keeping track of\n * the revision info.\n *\n * @param {string} url The URL whose cache key to look up.\n * @return {string} The cache key that corresponds to that URL.\n *\n * @memberof workbox-precaching\n */\nfunction getCacheKeyForURL(url) {\n    const precacheController = getOrCreatePrecacheController();\n    return precacheController.getCacheKeyForURL(url);\n}\nexport { getCacheKeyForURL };\n", "/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Helper function that calls\n * {@link PrecacheController#matchPrecache} on the default\n * {@link PrecacheController} instance.\n *\n * If you are creating your own {@link PrecacheController}, then call\n * {@link PrecacheController#matchPrecache} on that instance,\n * instead of using this function.\n *\n * @param {string|Request} request The key (without revisioning parameters)\n * to look up in the precache.\n * @return {Promise<Response|undefined>}\n *\n * @memberof workbox-precaching\n */\nfunction matchPrecache(request) {\n    const precacheController = getOrCreatePrecacheController();\n    return precacheController.matchPrecache(request);\n}\nexport { matchPrecache };\n", "/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Adds items to the precache list, removing any duplicates and\n * stores the files in the\n * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n * worker installs.\n *\n * This method can be called multiple times.\n *\n * Please note: This method **will not** serve any of the cached files for you.\n * It only precaches files. To respond to a network request you call\n * {@link workbox-precaching.addRoute}.\n *\n * If you have a single array of files to precache, you can just call\n * {@link workbox-precaching.precacheAndRoute}.\n *\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n *\n * @memberof workbox-precaching\n */\nfunction precache(entries) {\n    const precacheController = getOrCreatePrecacheController();\n    precacheController.precache(entries);\n}\nexport { precache };\n", "/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { addRoute } from './addRoute.js';\nimport { precache } from './precache.js';\nimport './_version.js';\n/**\n * This method will add entries to the precache list and add a route to\n * respond to fetch events.\n *\n * This is a convenience method that will call\n * {@link workbox-precaching.precache} and\n * {@link workbox-precaching.addRoute} in a single call.\n *\n * @param {Array<Object|string>} entries Array of entries to precache.\n * @param {Object} [options] See the\n * {@link workbox-precaching.PrecacheRoute} options.\n *\n * @memberof workbox-precaching\n */\nfunction precacheAndRoute(entries, options) {\n    precache(entries);\n    addRoute(options);\n}\nexport { precacheAndRoute };\n", "/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * `PrecacheFallbackPlugin` allows you to specify an \"offline fallback\"\n * response to be used when a given strategy is unable to generate a response.\n *\n * It does this by intercepting the `handlerDidError` plugin callback\n * and returning a precached response, taking the expected revision parameter\n * into account automatically.\n *\n * Unless you explicitly pass in a `PrecacheController` instance to the\n * constructor, the default instance will be used. Generally speaking, most\n * developers will end up using the default.\n *\n * @memberof workbox-precaching\n */\nclass PrecacheFallbackPlugin {\n    /**\n     * Constructs a new PrecacheFallbackPlugin with the associated fallbackURL.\n     *\n     * @param {Object} config\n     * @param {string} config.fallbackURL A precached URL to use as the fallback\n     *     if the associated strategy can't generate a response.\n     * @param {PrecacheController} [config.precacheController] An optional\n     *     PrecacheController instance. If not provided, the default\n     *     PrecacheController will be used.\n     */\n    constructor({ fallbackURL, precacheController, }) {\n        /**\n         * @return {Promise<Response>} The precache response for the fallback URL.\n         *\n         * @private\n         */\n        this.handlerDidError = () => this._precacheController.matchPrecache(this._fallbackURL);\n        this._fallbackURL = fallbackURL;\n        this._precacheController =\n            precacheController || getOrCreatePrecacheController();\n    }\n}\nexport { PrecacheFallbackPlugin };\n"],
  "mappings": "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",
  "names": ["precacheController", "error", "precacheController", "defaultRouter", "precacheController", "precacheController", "cacheNames", "precacheController", "precacheController", "precacheController", "precacheController", "precacheController"]
}
