/// <reference types="multer" />
import { DatabaseService } from '../database/database.service';
import { UpdateManagerProfileDto, UpdateStudentProfileDto, ChangePasswordDto, ChangeEmailDto, OnboardStudentDto, OnboardTeacherDto, UpdateUserDto } from './dto';
import { AuthService } from 'src/auth/auth.service';
import { Prisma, Role } from '@prisma/client';
import { StorageService } from 'src/storage/storage.service';
import { ConfigService } from '@nestjs/config';
export declare class UsersService {
    private readonly databaseService;
    private readonly authService;
    private readonly storageService;
    private readonly configService;
    constructor(databaseService: DatabaseService, authService: AuthService, storageService: StorageService, configService: ConfigService);
    readonly BASE_PROFILE_PICTURE_PATH = "profile-images";
    private readonly shouldGenerateRandomPictureWhenNull;
    private sanitizeUser;
    resetExpiredCalendarDeadlines(): Promise<void>;
    private buildProfilePicture;
    cleanUpOrphanedProfilePics(): Promise<number>;
    updateEmailNotificationSettings(userId: string, receiveEmailsOnNewEvent: boolean): Promise<void>;
    setSendinblueAttribute({ email, attributeKey, attributeValue, }: {
        email: string;
        attributeKey: string;
        attributeValue: string;
    }): Promise<void>;
    buildPictureUrl(profilePicturePath: string | null, id: string): string;
    updateIsActive(id: string, isActive: boolean): Promise<void>;
    updateCalendarAccess(userId: string, isCalendarEnable: boolean): Promise<{
        user: import("@prisma/client/runtime").GetResult<{
            id: string;
            email: string;
            password: string;
            role: Role;
            firstName: string;
            lastName: string;
            phoneNumber: string;
            birthDate: Date;
            address: string;
            zipCode: string;
            city: string;
            idNumber: string;
            idIssueDate: Date;
            profilePicturePath: string;
            isInClub: boolean;
            courseId: string;
            createdAt: Date;
            updatedAt: Date;
            isActive: boolean;
            isCalendarEnable: boolean;
            calendarBlockingDeadline: Date;
            receiveEmailsOnNewEvent: boolean;
        }, unknown, never> & {};
        waitlistEmails: string[];
    }>;
    findOneById(id: string): Promise<Omit<{
        pictureUrl: string;
        course: import("@prisma/client/runtime").GetResult<{
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
        }, unknown, never> & {};
        chats: (import("@prisma/client/runtime").GetResult<{
            chatId: string;
            userId: string;
            lastSeenAt: Date;
        }, unknown, never> & {})[];
        events: (import("@prisma/client/runtime").GetResult<{
            userId: string;
            eventId: string;
            isCompleted: boolean;
            createdAt: Date;
            updatedAt: Date;
            waitlistEventId: string;
            visitedEventId: string;
        }, unknown, never> & {})[];
        payments: (import("@prisma/client/runtime").GetResult<{
            id: string;
            amount: number;
            currency: string;
            method: import(".prisma/client").PaymentMethod;
            type: import(".prisma/client").PaymentType;
            userId: string;
            description: string;
            paidAt: Date;
            stripePaymentIntentId: string;
            woocommerceOrderId: string;
            createdAt: Date;
            updatedAt: Date;
        }, unknown, never> & {})[];
        email: string;
        id: string;
        password: string;
        role: Role;
        firstName: string;
        lastName: string;
        phoneNumber: string;
        birthDate: Date;
        address: string;
        zipCode: string;
        city: string;
        idNumber: string;
        idIssueDate: Date;
        profilePicturePath: string;
        isInClub: boolean;
        courseId: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        isCalendarEnable: boolean;
        calendarBlockingDeadline: Date;
        receiveEmailsOnNewEvent: boolean;
    }, "password" | "profilePicturePath">>;
    findOneByPhone(phoneNumber: string): Promise<import("@prisma/client/runtime").GetResult<{
        id: string;
        email: string;
        password: string;
        role: Role;
        firstName: string;
        lastName: string;
        phoneNumber: string;
        birthDate: Date;
        address: string;
        zipCode: string;
        city: string;
        idNumber: string;
        idIssueDate: Date;
        profilePicturePath: string;
        isInClub: boolean;
        courseId: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        isCalendarEnable: boolean;
        calendarBlockingDeadline: Date;
        receiveEmailsOnNewEvent: boolean;
    }, unknown, never> & {}>;
    findAllBasicInfo(where?: Prisma.UserWhereInput): Promise<Omit<{
        pictureUrl: string;
        id: string;
        firstName: string;
        lastName: string;
        profilePicturePath: string;
        role: Role;
        courseId: string;
    }, "password" | "profilePicturePath">[]>;
    findUsersByEmails(emails: string[]): Promise<Omit<{
        pictureUrl: string;
        email: string;
        id: string;
        password: string;
        role: Role;
        firstName: string;
        lastName: string;
        phoneNumber: string;
        birthDate: Date;
        address: string;
        zipCode: string;
        city: string;
        idNumber: string;
        idIssueDate: Date;
        profilePicturePath: string;
        isInClub: boolean;
        courseId: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        isCalendarEnable: boolean;
        calendarBlockingDeadline: Date;
        receiveEmailsOnNewEvent: boolean;
    }, "password" | "profilePicturePath">[]>;
    updateProfile(updateProfileDto: UpdateManagerProfileDto | UpdateStudentProfileDto, userId: string, newImage?: Express.Multer.File): Promise<void>;
    onboardUser(onboardUserDto: OnboardStudentDto | OnboardTeacherDto, profilePic: Express.Multer.File, id: string): Promise<void>;
    changeEmail(changeEmailDto: ChangeEmailDto, userId: string): Promise<void>;
    findAllPublic({ roles, search, pendingTaskId, courseId, createdAt, }: {
        roles?: string[];
        search?: string;
        pendingTaskId?: string;
        courseId?: string;
        createdAt: 'asc' | 'desc';
    }): Promise<Omit<{
        progress: number;
        course: import("@prisma/client/runtime").GetResult<{
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
        }, unknown, never> & {};
        pictureUrl: string;
        payments: {
            id: string;
        }[];
        chats: (import("@prisma/client/runtime").GetResult<{
            chatId: string;
            userId: string;
            lastSeenAt: Date;
        }, unknown, never> & {})[];
        events: ({
            event: import("@prisma/client/runtime").GetResult<{
                id: string;
                startDate: Date;
                endDate: Date;
                totalSlots: number;
                description: string;
                predefinedEventId: string;
                title: string;
                isClub: boolean;
                isHidden: boolean;
                enableBooking: boolean;
                createdAt: Date;
                updatedAt: Date;
                color: string;
                recurrenceRule: string;
                recurrenceEnd: Date;
            }, unknown, never> & {};
        } & import("@prisma/client/runtime").GetResult<{
            userId: string;
            eventId: string;
            isCompleted: boolean;
            createdAt: Date;
            updatedAt: Date;
            waitlistEventId: string;
            visitedEventId: string;
        }, unknown, never> & {})[];
        email: string;
        id: string;
        password: string;
        role: Role;
        firstName: string;
        lastName: string;
        phoneNumber: string;
        birthDate: Date;
        address: string;
        zipCode: string;
        city: string;
        idNumber: string;
        idIssueDate: Date;
        profilePicturePath: string;
        isInClub: boolean;
        courseId: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        isCalendarEnable: boolean;
        calendarBlockingDeadline: Date;
        receiveEmailsOnNewEvent: boolean;
        hasPaid: boolean;
    }, "password" | "profilePicturePath">[]>;
    findAll(where: Prisma.UserWhereInput): Promise<Omit<{
        pictureUrl: string;
        course: import("@prisma/client/runtime").GetResult<{
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
        }, unknown, never> & {};
        chats: (import("@prisma/client/runtime").GetResult<{
            chatId: string;
            userId: string;
            lastSeenAt: Date;
        }, unknown, never> & {})[];
        events: (import("@prisma/client/runtime").GetResult<{
            userId: string;
            eventId: string;
            isCompleted: boolean;
            createdAt: Date;
            updatedAt: Date;
            waitlistEventId: string;
            visitedEventId: string;
        }, unknown, never> & {})[];
        email: string;
        id: string;
        password: string;
        role: Role;
        firstName: string;
        lastName: string;
        phoneNumber: string;
        birthDate: Date;
        address: string;
        zipCode: string;
        city: string;
        idNumber: string;
        idIssueDate: Date;
        profilePicturePath: string;
        isInClub: boolean;
        courseId: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        isCalendarEnable: boolean;
        calendarBlockingDeadline: Date;
        receiveEmailsOnNewEvent: boolean;
    }, "password" | "profilePicturePath">[]>;
    updateUser(updateUserDto: UpdateUserDto, userId: string): Promise<void>;
    delete(userId: string): Promise<void>;
    changePassword(changePasswordDto: ChangePasswordDto, userId: string): Promise<void>;
    acceptAwaitingApproval(userId: string): Promise<void>;
}
