import type { Component } from 'vue';
import { ExternalToast, ToastT, PromiseData, PromiseT, ToastToDismiss } from './types';
declare class Observer {
    subscribers: Array<(toast: ExternalToast | ToastToDismiss) => void>;
    toasts: Array<ToastT | ToastToDismiss>;
    constructor();
    subscribe: (subscriber: (toast: ToastT | ToastToDismiss) => void) => () => void;
    publish: (data: ToastT) => void;
    dismiss: (id?: string | number | undefined) => string | number | undefined;
    message: (message: string | Component, data?: ExternalToast | undefined) => string | number;
    error: (message: string | Component, data?: ExternalToast | undefined) => string | number;
    success: (message: string | Component, data?: ExternalToast | undefined) => string | number;
    promise: (promise: PromiseT, data?: PromiseData | undefined) => string | number;
    custom: (component: Component, data?: ExternalToast | undefined) => void;
}
export declare const ToastState: Observer;
export declare const toast: ((message: string | Component, data?: ExternalToast | undefined) => string | number) & {
    success: (message: string | Component, data?: ExternalToast | undefined) => string | number;
    error: (message: string | Component, data?: ExternalToast | undefined) => string | number;
    custom: (component: Component, data?: ExternalToast | undefined) => void;
    message: (message: string | Component, data?: ExternalToast | undefined) => string | number;
    promise: (promise: PromiseT, data?: PromiseData | undefined) => string | number;
    dismiss: (id?: string | number | undefined) => string | number | undefined;
};
export {};
