
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type UserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "User"
  objects: {
    payments: PaymentPayload<ExtArgs>[]
    chats: ChatsOnUsersPayload<ExtArgs>[]
    events: UsersOnEventsPayload<ExtArgs>[]
    messages: MessagePayload<ExtArgs>[]
    course: CoursePayload<ExtArgs> | null
    passwordRecoveryToken: PasswordRecoveryTokenPayload<ExtArgs> | null
    quizAttempts: QuizAttemptPayload<ExtArgs>[]
    WebPushSubscription: WebPushSubscriptionPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    email: string
    password: string
    role: Role
    firstName: string | null
    lastName: string | null
    phoneNumber: string | null
    birthDate: Date | null
    address: string | null
    zipCode: string | null
    city: string | null
    idNumber: string | null
    idIssueDate: Date | null
    profilePicturePath: string | null
    isInClub: boolean
    courseId: string | null
    createdAt: Date
    updatedAt: Date
    /**
     * False means the user has no access to the platform
     */
    isActive: boolean
    isCalendarEnable: boolean
    calendarBlockingDeadline: Date | null
    receiveEmailsOnNewEvent: boolean
  }, ExtArgs["result"]["user"]>
  composites: {}
}

/**
 * Model User
 * 
 */
export type User = runtime.Types.DefaultSelection<UserPayload>
export type WebPushSubscriptionPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "WebPushSubscription"
  objects: {
    user: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    userId: string
    endpoint: string
    p256dh: string
    auth: string
    createdAt: Date
    updatedAt: Date
    chatEnabled: boolean
    calendarEnabled: boolean
  }, ExtArgs["result"]["webPushSubscription"]>
  composites: {}
}

/**
 * Model WebPushSubscription
 * 
 */
export type WebPushSubscription = runtime.Types.DefaultSelection<WebPushSubscriptionPayload>
export type QuizAttemptPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "QuizAttempt"
  objects: {
    user: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    userId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["quizAttempt"]>
  composites: {}
}

/**
 * Model QuizAttempt
 * Stores a quiz attempt for a user
 */
export type QuizAttempt = runtime.Types.DefaultSelection<QuizAttemptPayload>
export type PasswordRecoveryTokenPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "PasswordRecoveryToken"
  objects: {
    user: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    token: string
    userId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["passwordRecoveryToken"]>
  composites: {}
}

/**
 * Model PasswordRecoveryToken
 * Stores a password recovery token for a user. That token can be used to reset the user's password when they are locked out.
 * The expiration of the token is responsibility of the backend app.
 */
export type PasswordRecoveryToken = runtime.Types.DefaultSelection<PasswordRecoveryTokenPayload>
export type EmailVerificationTokenPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "EmailVerificationToken"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: string
    email: string
    token: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["emailVerificationToken"]>
  composites: {}
}

/**
 * Model EmailVerificationToken
 * Stores an email verification token for a user. That token can be used to verify the user's email when they register or change their email.
 * It is not associated to a user, because the user might not exist yet.
 */
export type EmailVerificationToken = runtime.Types.DefaultSelection<EmailVerificationTokenPayload>
export type ZoomMeetingPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "ZoomMeeting"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: string
    /**
     * Zoom's meeting ID. Provided by Zoom
     */
    meetingId: string
    /**
     * Url that the user can use to join the meeting. Includes the password. Provided by Zooms
     */
    joinUrl: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["zoomMeeting"]>
  composites: {}
}

/**
 * Model ZoomMeeting
 * Stores a Zoom Meeting
 */
export type ZoomMeeting = runtime.Types.DefaultSelection<ZoomMeetingPayload>
export type VideoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Video"
  objects: {
    courses: VideosOnCoursesPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    url: string
    title: string
    /**
     * Designates the date of the video. Is intended to be used, for example, to group videos by month/year.
     */
    date: Date
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["video"]>
  composites: {}
}

/**
 * Model Video
 * 
 */
export type Video = runtime.Types.DefaultSelection<VideoPayload>
export type VideosOnCoursesPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "VideosOnCourses"
  objects: {
    video: VideoPayload<ExtArgs>
    course: CoursePayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    videoId: string
    courseId: string
  }, ExtArgs["result"]["videosOnCourses"]>
  composites: {}
}

/**
 * Model VideosOnCourses
 * 
 */
export type VideosOnCourses = runtime.Types.DefaultSelection<VideosOnCoursesPayload>
export type PaymentPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Payment"
  objects: {
    user: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    amount: number
    currency: string
    method: PaymentMethod
    type: PaymentType
    userId: string
    description: string | null
    paidAt: Date
    /**
     * Used not to repeat fetched from external services payments
     */
    stripePaymentIntentId: string | null
    woocommerceOrderId: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["payment"]>
  composites: {}
}

/**
 * Model Payment
 * Stores a payment associated to an user. Can be fetched from Stripe or manually created.
 */
export type Payment = runtime.Types.DefaultSelection<PaymentPayload>
export type FilePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "File"
  objects: {
    folder: FolderPayload<ExtArgs>
    Course: CoursePayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    name: string
    s3Key: string
    contentType: string
    folderId: string
    courseId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["file"]>
  composites: {}
}

/**
 * Model File
 * Represents a file entity in the file system
 */
export type File = runtime.Types.DefaultSelection<FilePayload>
export type FolderPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Folder"
  objects: {
    files: FilePayload<ExtArgs>[]
    folders: FolderPayload<ExtArgs>[]
    parent: FolderPayload<ExtArgs> | null
    course: CoursePayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    name: string
    parentId: string | null
    isRoot: boolean
    courseId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["folder"]>
  composites: {}
}

/**
 * Model Folder
 * Represents a folder entity in the file system
 */
export type Folder = runtime.Types.DefaultSelection<FolderPayload>
export type CoursePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Course"
  objects: {
    folders: FolderPayload<ExtArgs>[]
    files: FilePayload<ExtArgs>[]
    videos: VideosOnCoursesPayload<ExtArgs>[]
    students: UserPayload<ExtArgs>[]
    quizzes: QuizzesOnCoursePayload<ExtArgs>[]
    predefinedEvents: PredefinedEventOnCoursesPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["course"]>
  composites: {}
}

/**
 * Model Course
 * Represents a course
 */
export type Course = runtime.Types.DefaultSelection<CoursePayload>
export type PredefinedEventPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "PredefinedEvent"
  objects: {
    events: EventPayload<ExtArgs>[]
    courses: PredefinedEventOnCoursesPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    title: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["predefinedEvent"]>
  composites: {}
}

/**
 * Model PredefinedEvent
 * Represents a predefined event. Those are events for courses. 
 * Every course event is associated to a predefined event.
 */
export type PredefinedEvent = runtime.Types.DefaultSelection<PredefinedEventPayload>
export type PredefinedEventOnCoursesPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "PredefinedEventOnCourses"
  objects: {
    predefinedEvent: PredefinedEventPayload<ExtArgs>
    course: CoursePayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    predefinedEventId: string
    courseId: string
  }, ExtArgs["result"]["predefinedEventOnCourses"]>
  composites: {}
}

/**
 * Model PredefinedEventOnCourses
 * 
 */
export type PredefinedEventOnCourses = runtime.Types.DefaultSelection<PredefinedEventOnCoursesPayload>
export type EventPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Event"
  objects: {
    /**
     * Only present for course events. They provide the title.
     */
    predefinedEvent: PredefinedEventPayload<ExtArgs> | null
    /**
     * Booked users
     */
    users: UsersOnEventsPayload<ExtArgs>[]
    waitlist: UsersOnEventsPayload<ExtArgs>[]
    visitedUsers: UsersOnEventsPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    /**
     * The start date of the event
     */
    startDate: Date
    /**
     * The end date of the event
     */
    endDate: Date
    totalSlots: number
    description: string | null
    predefinedEventId: string | null
    /**
     * Only present for club events.
     */
    title: string | null
    isClub: boolean
    isHidden: boolean
    enableBooking: boolean
    createdAt: Date
    updatedAt: Date
    color: string | null
    recurrenceRule: string | null
    recurrenceEnd: Date | null
  }, ExtArgs["result"]["event"]>
  composites: {}
}

/**
 * Model Event
 * Represents an event. Course events are associated to a predefined event, while club events are not.
 */
export type Event = runtime.Types.DefaultSelection<EventPayload>
export type UsersOnEventsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "UsersOnEvents"
  objects: {
    user: UserPayload<ExtArgs>
    event: EventPayload<ExtArgs>
    waitlistEvent: EventPayload<ExtArgs> | null
    visitedEvent: EventPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    userId: string
    eventId: string
    isCompleted: boolean
    createdAt: Date
    updatedAt: Date
    waitlistEventId: string | null
    visitedEventId: string | null
  }, ExtArgs["result"]["usersOnEvents"]>
  composites: {}
}

/**
 * Model UsersOnEvents
 * Represents a user booked on an event. Can be completed or not. The backend app is responsible for marking it as completed.
 */
export type UsersOnEvents = runtime.Types.DefaultSelection<UsersOnEventsPayload>
export type ChatPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Chat"
  objects: {
    users: ChatsOnUsersPayload<ExtArgs>[]
    messages: MessagePayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    name: string | null
    /**
     * Not present for private chats
     */
    pictureS3Key: string | null
    /**
     * True if the chat is a group chat, false if it is a private chat
     */
    isGroup: boolean
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["chat"]>
  composites: {}
}

/**
 * Model Chat
 * Models a chat. Can be a group chat or a private chat.
 */
export type Chat = runtime.Types.DefaultSelection<ChatPayload>
export type ChatsOnUsersPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "ChatsOnUsers"
  objects: {
    chat: ChatPayload<ExtArgs>
    user: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    chatId: string
    userId: string
    lastSeenAt: Date
  }, ExtArgs["result"]["chatsOnUsers"]>
  composites: {}
}

/**
 * Model ChatsOnUsers
 * 
 */
export type ChatsOnUsers = runtime.Types.DefaultSelection<ChatsOnUsersPayload>
export type MessagePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Message"
  objects: {
    sender: UserPayload<ExtArgs>
    chat: ChatPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    content: string
    /**
     * Null if the message has not been deleted
     */
    deletedAt: Date | null
    senderId: string
    chatId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["message"]>
  composites: {}
}

/**
 * Model Message
 * Models a message in a chat
 */
export type Message = runtime.Types.DefaultSelection<MessagePayload>
export type QuizzesOnCoursePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "QuizzesOnCourse"
  objects: {
    quiz: QuizPayload<ExtArgs>
    course: CoursePayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    quizId: string
    courseId: string
  }, ExtArgs["result"]["quizzesOnCourse"]>
  composites: {}
}

/**
 * Model QuizzesOnCourse
 * 
 */
export type QuizzesOnCourse = runtime.Types.DefaultSelection<QuizzesOnCoursePayload>
export type QuizPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Quiz"
  objects: {
    courses: QuizzesOnCoursePayload<ExtArgs>[]
    questions: QuestionPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    name: string
    nQuestionsPerAttempt: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["quiz"]>
  composites: {}
}

/**
 * Model Quiz
 * Represents a quiz. A quiz is a set of questions that the user can answer.
 */
export type Quiz = runtime.Types.DefaultSelection<QuizPayload>
export type QuestionPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Question"
  objects: {
    /**
     * All the possible answers to the question. Only one of them is correct and marked with the isCorrect field
     */
    answers: AnswerPayload<ExtArgs>[]
    quiz: QuizPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    content: string
    quizId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["question"]>
  composites: {}
}

/**
 * Model Question
 * Represents a question in a Quiz
 */
export type Question = runtime.Types.DefaultSelection<QuestionPayload>
export type AnswerPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Answer"
  objects: {
    question: QuestionPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    /**
     * Text of the answer
     */
    content: string
    /**
     * Whether the answer is correct or not
     */
    isCorrect: boolean
    questionId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["answer"]>
  composites: {}
}

/**
 * Model Answer
 * Represents an answer to a Quiz Question
 */
export type Answer = runtime.Types.DefaultSelection<AnswerPayload>

/**
 * Enums
 */

export const Role: {
  NEWUSER: 'NEWUSER',
  AWAITINGSTUDENT: 'AWAITINGSTUDENT',
  AWAITINGTEACHER: 'AWAITINGTEACHER',
  STUDENT: 'STUDENT',
  TEACHER: 'TEACHER',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const PaymentMethod: {
  CASH: 'CASH',
  CARD: 'CARD',
  EFECTIVO: 'EFECTIVO',
  STRIPE: 'STRIPE',
  WOOCOMMERCE: 'WOOCOMMERCE'
};

export type PaymentMethod = (typeof PaymentMethod)[keyof typeof PaymentMethod]


export const PaymentType: {
  ONE_TIME: 'ONE_TIME',
  SUBSCRIPTION: 'SUBSCRIPTION'
};

export type PaymentType = (typeof PaymentType)[keyof typeof PaymentType]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.webPushSubscription`: Exposes CRUD operations for the **WebPushSubscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WebPushSubscriptions
    * const webPushSubscriptions = await prisma.webPushSubscription.findMany()
    * ```
    */
  get webPushSubscription(): Prisma.WebPushSubscriptionDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.quizAttempt`: Exposes CRUD operations for the **QuizAttempt** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuizAttempts
    * const quizAttempts = await prisma.quizAttempt.findMany()
    * ```
    */
  get quizAttempt(): Prisma.QuizAttemptDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.passwordRecoveryToken`: Exposes CRUD operations for the **PasswordRecoveryToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PasswordRecoveryTokens
    * const passwordRecoveryTokens = await prisma.passwordRecoveryToken.findMany()
    * ```
    */
  get passwordRecoveryToken(): Prisma.PasswordRecoveryTokenDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.emailVerificationToken`: Exposes CRUD operations for the **EmailVerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailVerificationTokens
    * const emailVerificationTokens = await prisma.emailVerificationToken.findMany()
    * ```
    */
  get emailVerificationToken(): Prisma.EmailVerificationTokenDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.zoomMeeting`: Exposes CRUD operations for the **ZoomMeeting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ZoomMeetings
    * const zoomMeetings = await prisma.zoomMeeting.findMany()
    * ```
    */
  get zoomMeeting(): Prisma.ZoomMeetingDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.video`: Exposes CRUD operations for the **Video** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Videos
    * const videos = await prisma.video.findMany()
    * ```
    */
  get video(): Prisma.VideoDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.videosOnCourses`: Exposes CRUD operations for the **VideosOnCourses** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VideosOnCourses
    * const videosOnCourses = await prisma.videosOnCourses.findMany()
    * ```
    */
  get videosOnCourses(): Prisma.VideosOnCoursesDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **Payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.PaymentDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.file`: Exposes CRUD operations for the **File** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Files
    * const files = await prisma.file.findMany()
    * ```
    */
  get file(): Prisma.FileDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.folder`: Exposes CRUD operations for the **Folder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Folders
    * const folders = await prisma.folder.findMany()
    * ```
    */
  get folder(): Prisma.FolderDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.course`: Exposes CRUD operations for the **Course** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.course.findMany()
    * ```
    */
  get course(): Prisma.CourseDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.predefinedEvent`: Exposes CRUD operations for the **PredefinedEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PredefinedEvents
    * const predefinedEvents = await prisma.predefinedEvent.findMany()
    * ```
    */
  get predefinedEvent(): Prisma.PredefinedEventDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.predefinedEventOnCourses`: Exposes CRUD operations for the **PredefinedEventOnCourses** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PredefinedEventOnCourses
    * const predefinedEventOnCourses = await prisma.predefinedEventOnCourses.findMany()
    * ```
    */
  get predefinedEventOnCourses(): Prisma.PredefinedEventOnCoursesDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.EventDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.usersOnEvents`: Exposes CRUD operations for the **UsersOnEvents** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UsersOnEvents
    * const usersOnEvents = await prisma.usersOnEvents.findMany()
    * ```
    */
  get usersOnEvents(): Prisma.UsersOnEventsDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.chat`: Exposes CRUD operations for the **Chat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chats
    * const chats = await prisma.chat.findMany()
    * ```
    */
  get chat(): Prisma.ChatDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.chatsOnUsers`: Exposes CRUD operations for the **ChatsOnUsers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatsOnUsers
    * const chatsOnUsers = await prisma.chatsOnUsers.findMany()
    * ```
    */
  get chatsOnUsers(): Prisma.ChatsOnUsersDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.quizzesOnCourse`: Exposes CRUD operations for the **QuizzesOnCourse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuizzesOnCourses
    * const quizzesOnCourses = await prisma.quizzesOnCourse.findMany()
    * ```
    */
  get quizzesOnCourse(): Prisma.QuizzesOnCourseDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.quiz`: Exposes CRUD operations for the **Quiz** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Quizzes
    * const quizzes = await prisma.quiz.findMany()
    * ```
    */
  get quiz(): Prisma.QuizDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.question`: Exposes CRUD operations for the **Question** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.question.findMany()
    * ```
    */
  get question(): Prisma.QuestionDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.answer`: Exposes CRUD operations for the **Answer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Answers
    * const answers = await prisma.answer.findMany()
    * ```
    */
  get answer(): Prisma.AnswerDelegate<GlobalReject, ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 4.16.2
   * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    WebPushSubscription: 'WebPushSubscription',
    QuizAttempt: 'QuizAttempt',
    PasswordRecoveryToken: 'PasswordRecoveryToken',
    EmailVerificationToken: 'EmailVerificationToken',
    ZoomMeeting: 'ZoomMeeting',
    Video: 'Video',
    VideosOnCourses: 'VideosOnCourses',
    Payment: 'Payment',
    File: 'File',
    Folder: 'Folder',
    Course: 'Course',
    PredefinedEvent: 'PredefinedEvent',
    PredefinedEventOnCourses: 'PredefinedEventOnCourses',
    Event: 'Event',
    UsersOnEvents: 'UsersOnEvents',
    Chat: 'Chat',
    ChatsOnUsers: 'ChatsOnUsers',
    Message: 'Message',
    QuizzesOnCourse: 'QuizzesOnCourse',
    Quiz: 'Quiz',
    Question: 'Question',
    Answer: 'Answer'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'webPushSubscription' | 'quizAttempt' | 'passwordRecoveryToken' | 'emailVerificationToken' | 'zoomMeeting' | 'video' | 'videosOnCourses' | 'payment' | 'file' | 'folder' | 'course' | 'predefinedEvent' | 'predefinedEventOnCourses' | 'event' | 'usersOnEvents' | 'chat' | 'chatsOnUsers' | 'message' | 'quizzesOnCourse' | 'quiz' | 'question' | 'answer'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: UserPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      WebPushSubscription: {
        payload: WebPushSubscriptionPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.WebPushSubscriptionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WebPushSubscriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WebPushSubscriptionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WebPushSubscriptionPayload>
          }
          findFirst: {
            args: Prisma.WebPushSubscriptionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WebPushSubscriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WebPushSubscriptionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WebPushSubscriptionPayload>
          }
          findMany: {
            args: Prisma.WebPushSubscriptionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WebPushSubscriptionPayload>[]
          }
          create: {
            args: Prisma.WebPushSubscriptionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WebPushSubscriptionPayload>
          }
          createMany: {
            args: Prisma.WebPushSubscriptionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.WebPushSubscriptionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WebPushSubscriptionPayload>
          }
          update: {
            args: Prisma.WebPushSubscriptionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WebPushSubscriptionPayload>
          }
          deleteMany: {
            args: Prisma.WebPushSubscriptionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.WebPushSubscriptionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.WebPushSubscriptionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WebPushSubscriptionPayload>
          }
          aggregate: {
            args: Prisma.WebPushSubscriptionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateWebPushSubscription>
          }
          groupBy: {
            args: Prisma.WebPushSubscriptionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<WebPushSubscriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.WebPushSubscriptionCountArgs<ExtArgs>,
            result: $Utils.Optional<WebPushSubscriptionCountAggregateOutputType> | number
          }
        }
      }
      QuizAttempt: {
        payload: QuizAttemptPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.QuizAttemptFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuizAttemptPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuizAttemptFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuizAttemptPayload>
          }
          findFirst: {
            args: Prisma.QuizAttemptFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuizAttemptPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuizAttemptFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuizAttemptPayload>
          }
          findMany: {
            args: Prisma.QuizAttemptFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuizAttemptPayload>[]
          }
          create: {
            args: Prisma.QuizAttemptCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuizAttemptPayload>
          }
          createMany: {
            args: Prisma.QuizAttemptCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.QuizAttemptDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuizAttemptPayload>
          }
          update: {
            args: Prisma.QuizAttemptUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuizAttemptPayload>
          }
          deleteMany: {
            args: Prisma.QuizAttemptDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.QuizAttemptUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.QuizAttemptUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuizAttemptPayload>
          }
          aggregate: {
            args: Prisma.QuizAttemptAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateQuizAttempt>
          }
          groupBy: {
            args: Prisma.QuizAttemptGroupByArgs<ExtArgs>,
            result: $Utils.Optional<QuizAttemptGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuizAttemptCountArgs<ExtArgs>,
            result: $Utils.Optional<QuizAttemptCountAggregateOutputType> | number
          }
        }
      }
      PasswordRecoveryToken: {
        payload: PasswordRecoveryTokenPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.PasswordRecoveryTokenFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PasswordRecoveryTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PasswordRecoveryTokenFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PasswordRecoveryTokenPayload>
          }
          findFirst: {
            args: Prisma.PasswordRecoveryTokenFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PasswordRecoveryTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PasswordRecoveryTokenFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PasswordRecoveryTokenPayload>
          }
          findMany: {
            args: Prisma.PasswordRecoveryTokenFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PasswordRecoveryTokenPayload>[]
          }
          create: {
            args: Prisma.PasswordRecoveryTokenCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PasswordRecoveryTokenPayload>
          }
          createMany: {
            args: Prisma.PasswordRecoveryTokenCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PasswordRecoveryTokenDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PasswordRecoveryTokenPayload>
          }
          update: {
            args: Prisma.PasswordRecoveryTokenUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PasswordRecoveryTokenPayload>
          }
          deleteMany: {
            args: Prisma.PasswordRecoveryTokenDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PasswordRecoveryTokenUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PasswordRecoveryTokenUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PasswordRecoveryTokenPayload>
          }
          aggregate: {
            args: Prisma.PasswordRecoveryTokenAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePasswordRecoveryToken>
          }
          groupBy: {
            args: Prisma.PasswordRecoveryTokenGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PasswordRecoveryTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.PasswordRecoveryTokenCountArgs<ExtArgs>,
            result: $Utils.Optional<PasswordRecoveryTokenCountAggregateOutputType> | number
          }
        }
      }
      EmailVerificationToken: {
        payload: EmailVerificationTokenPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.EmailVerificationTokenFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EmailVerificationTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailVerificationTokenFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EmailVerificationTokenPayload>
          }
          findFirst: {
            args: Prisma.EmailVerificationTokenFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EmailVerificationTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailVerificationTokenFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EmailVerificationTokenPayload>
          }
          findMany: {
            args: Prisma.EmailVerificationTokenFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EmailVerificationTokenPayload>[]
          }
          create: {
            args: Prisma.EmailVerificationTokenCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EmailVerificationTokenPayload>
          }
          createMany: {
            args: Prisma.EmailVerificationTokenCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EmailVerificationTokenDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EmailVerificationTokenPayload>
          }
          update: {
            args: Prisma.EmailVerificationTokenUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EmailVerificationTokenPayload>
          }
          deleteMany: {
            args: Prisma.EmailVerificationTokenDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EmailVerificationTokenUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EmailVerificationTokenUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EmailVerificationTokenPayload>
          }
          aggregate: {
            args: Prisma.EmailVerificationTokenAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEmailVerificationToken>
          }
          groupBy: {
            args: Prisma.EmailVerificationTokenGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EmailVerificationTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailVerificationTokenCountArgs<ExtArgs>,
            result: $Utils.Optional<EmailVerificationTokenCountAggregateOutputType> | number
          }
        }
      }
      ZoomMeeting: {
        payload: ZoomMeetingPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ZoomMeetingFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ZoomMeetingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ZoomMeetingFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ZoomMeetingPayload>
          }
          findFirst: {
            args: Prisma.ZoomMeetingFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ZoomMeetingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ZoomMeetingFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ZoomMeetingPayload>
          }
          findMany: {
            args: Prisma.ZoomMeetingFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ZoomMeetingPayload>[]
          }
          create: {
            args: Prisma.ZoomMeetingCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ZoomMeetingPayload>
          }
          createMany: {
            args: Prisma.ZoomMeetingCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ZoomMeetingDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ZoomMeetingPayload>
          }
          update: {
            args: Prisma.ZoomMeetingUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ZoomMeetingPayload>
          }
          deleteMany: {
            args: Prisma.ZoomMeetingDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ZoomMeetingUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ZoomMeetingUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ZoomMeetingPayload>
          }
          aggregate: {
            args: Prisma.ZoomMeetingAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateZoomMeeting>
          }
          groupBy: {
            args: Prisma.ZoomMeetingGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ZoomMeetingGroupByOutputType>[]
          }
          count: {
            args: Prisma.ZoomMeetingCountArgs<ExtArgs>,
            result: $Utils.Optional<ZoomMeetingCountAggregateOutputType> | number
          }
        }
      }
      Video: {
        payload: VideoPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.VideoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VideoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VideoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VideoPayload>
          }
          findFirst: {
            args: Prisma.VideoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VideoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VideoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VideoPayload>
          }
          findMany: {
            args: Prisma.VideoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VideoPayload>[]
          }
          create: {
            args: Prisma.VideoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VideoPayload>
          }
          createMany: {
            args: Prisma.VideoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.VideoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VideoPayload>
          }
          update: {
            args: Prisma.VideoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VideoPayload>
          }
          deleteMany: {
            args: Prisma.VideoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.VideoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.VideoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VideoPayload>
          }
          aggregate: {
            args: Prisma.VideoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVideo>
          }
          groupBy: {
            args: Prisma.VideoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VideoGroupByOutputType>[]
          }
          count: {
            args: Prisma.VideoCountArgs<ExtArgs>,
            result: $Utils.Optional<VideoCountAggregateOutputType> | number
          }
        }
      }
      VideosOnCourses: {
        payload: VideosOnCoursesPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.VideosOnCoursesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VideosOnCoursesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VideosOnCoursesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VideosOnCoursesPayload>
          }
          findFirst: {
            args: Prisma.VideosOnCoursesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VideosOnCoursesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VideosOnCoursesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VideosOnCoursesPayload>
          }
          findMany: {
            args: Prisma.VideosOnCoursesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VideosOnCoursesPayload>[]
          }
          create: {
            args: Prisma.VideosOnCoursesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VideosOnCoursesPayload>
          }
          createMany: {
            args: Prisma.VideosOnCoursesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.VideosOnCoursesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VideosOnCoursesPayload>
          }
          update: {
            args: Prisma.VideosOnCoursesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VideosOnCoursesPayload>
          }
          deleteMany: {
            args: Prisma.VideosOnCoursesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.VideosOnCoursesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.VideosOnCoursesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VideosOnCoursesPayload>
          }
          aggregate: {
            args: Prisma.VideosOnCoursesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVideosOnCourses>
          }
          groupBy: {
            args: Prisma.VideosOnCoursesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VideosOnCoursesGroupByOutputType>[]
          }
          count: {
            args: Prisma.VideosOnCoursesCountArgs<ExtArgs>,
            result: $Utils.Optional<VideosOnCoursesCountAggregateOutputType> | number
          }
        }
      }
      Payment: {
        payload: PaymentPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.PaymentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PaymentPayload>
          }
          findFirst: {
            args: Prisma.PaymentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PaymentPayload>
          }
          findMany: {
            args: Prisma.PaymentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PaymentPayload>[]
          }
          create: {
            args: Prisma.PaymentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PaymentPayload>
          }
          createMany: {
            args: Prisma.PaymentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PaymentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PaymentPayload>
          }
          update: {
            args: Prisma.PaymentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PaymentPayload>
          }
          deleteMany: {
            args: Prisma.PaymentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PaymentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PaymentPayload>
          }
          aggregate: {
            args: Prisma.PaymentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePayment>
          }
          groupBy: {
            args: Prisma.PaymentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentCountArgs<ExtArgs>,
            result: $Utils.Optional<PaymentCountAggregateOutputType> | number
          }
        }
      }
      File: {
        payload: FilePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.FileFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FileFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FilePayload>
          }
          findFirst: {
            args: Prisma.FileFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FileFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FilePayload>
          }
          findMany: {
            args: Prisma.FileFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FilePayload>[]
          }
          create: {
            args: Prisma.FileCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FilePayload>
          }
          createMany: {
            args: Prisma.FileCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FileDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FilePayload>
          }
          update: {
            args: Prisma.FileUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FilePayload>
          }
          deleteMany: {
            args: Prisma.FileDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FileUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FileUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FilePayload>
          }
          aggregate: {
            args: Prisma.FileAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFile>
          }
          groupBy: {
            args: Prisma.FileGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FileGroupByOutputType>[]
          }
          count: {
            args: Prisma.FileCountArgs<ExtArgs>,
            result: $Utils.Optional<FileCountAggregateOutputType> | number
          }
        }
      }
      Folder: {
        payload: FolderPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.FolderFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FolderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FolderFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FolderPayload>
          }
          findFirst: {
            args: Prisma.FolderFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FolderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FolderFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FolderPayload>
          }
          findMany: {
            args: Prisma.FolderFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FolderPayload>[]
          }
          create: {
            args: Prisma.FolderCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FolderPayload>
          }
          createMany: {
            args: Prisma.FolderCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FolderDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FolderPayload>
          }
          update: {
            args: Prisma.FolderUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FolderPayload>
          }
          deleteMany: {
            args: Prisma.FolderDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FolderUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FolderUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FolderPayload>
          }
          aggregate: {
            args: Prisma.FolderAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFolder>
          }
          groupBy: {
            args: Prisma.FolderGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FolderGroupByOutputType>[]
          }
          count: {
            args: Prisma.FolderCountArgs<ExtArgs>,
            result: $Utils.Optional<FolderCountAggregateOutputType> | number
          }
        }
      }
      Course: {
        payload: CoursePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.CourseFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CoursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CoursePayload>
          }
          findFirst: {
            args: Prisma.CourseFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CoursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CoursePayload>
          }
          findMany: {
            args: Prisma.CourseFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CoursePayload>[]
          }
          create: {
            args: Prisma.CourseCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CoursePayload>
          }
          createMany: {
            args: Prisma.CourseCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CourseDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CoursePayload>
          }
          update: {
            args: Prisma.CourseUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CoursePayload>
          }
          deleteMany: {
            args: Prisma.CourseDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CourseUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CourseUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CoursePayload>
          }
          aggregate: {
            args: Prisma.CourseAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCourse>
          }
          groupBy: {
            args: Prisma.CourseGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CourseGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseCountArgs<ExtArgs>,
            result: $Utils.Optional<CourseCountAggregateOutputType> | number
          }
        }
      }
      PredefinedEvent: {
        payload: PredefinedEventPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.PredefinedEventFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PredefinedEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PredefinedEventFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PredefinedEventPayload>
          }
          findFirst: {
            args: Prisma.PredefinedEventFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PredefinedEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PredefinedEventFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PredefinedEventPayload>
          }
          findMany: {
            args: Prisma.PredefinedEventFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PredefinedEventPayload>[]
          }
          create: {
            args: Prisma.PredefinedEventCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PredefinedEventPayload>
          }
          createMany: {
            args: Prisma.PredefinedEventCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PredefinedEventDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PredefinedEventPayload>
          }
          update: {
            args: Prisma.PredefinedEventUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PredefinedEventPayload>
          }
          deleteMany: {
            args: Prisma.PredefinedEventDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PredefinedEventUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PredefinedEventUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PredefinedEventPayload>
          }
          aggregate: {
            args: Prisma.PredefinedEventAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePredefinedEvent>
          }
          groupBy: {
            args: Prisma.PredefinedEventGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PredefinedEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.PredefinedEventCountArgs<ExtArgs>,
            result: $Utils.Optional<PredefinedEventCountAggregateOutputType> | number
          }
        }
      }
      PredefinedEventOnCourses: {
        payload: PredefinedEventOnCoursesPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.PredefinedEventOnCoursesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PredefinedEventOnCoursesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PredefinedEventOnCoursesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PredefinedEventOnCoursesPayload>
          }
          findFirst: {
            args: Prisma.PredefinedEventOnCoursesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PredefinedEventOnCoursesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PredefinedEventOnCoursesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PredefinedEventOnCoursesPayload>
          }
          findMany: {
            args: Prisma.PredefinedEventOnCoursesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PredefinedEventOnCoursesPayload>[]
          }
          create: {
            args: Prisma.PredefinedEventOnCoursesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PredefinedEventOnCoursesPayload>
          }
          createMany: {
            args: Prisma.PredefinedEventOnCoursesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PredefinedEventOnCoursesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PredefinedEventOnCoursesPayload>
          }
          update: {
            args: Prisma.PredefinedEventOnCoursesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PredefinedEventOnCoursesPayload>
          }
          deleteMany: {
            args: Prisma.PredefinedEventOnCoursesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PredefinedEventOnCoursesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PredefinedEventOnCoursesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PredefinedEventOnCoursesPayload>
          }
          aggregate: {
            args: Prisma.PredefinedEventOnCoursesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePredefinedEventOnCourses>
          }
          groupBy: {
            args: Prisma.PredefinedEventOnCoursesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PredefinedEventOnCoursesGroupByOutputType>[]
          }
          count: {
            args: Prisma.PredefinedEventOnCoursesCountArgs<ExtArgs>,
            result: $Utils.Optional<PredefinedEventOnCoursesCountAggregateOutputType> | number
          }
        }
      }
      Event: {
        payload: EventPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.EventFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EventPayload>
          }
          findFirst: {
            args: Prisma.EventFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EventPayload>
          }
          findMany: {
            args: Prisma.EventFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EventPayload>[]
          }
          create: {
            args: Prisma.EventCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EventPayload>
          }
          createMany: {
            args: Prisma.EventCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EventDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EventPayload>
          }
          update: {
            args: Prisma.EventUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EventPayload>
          }
          deleteMany: {
            args: Prisma.EventDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EventUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EventUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EventPayload>
          }
          aggregate: {
            args: Prisma.EventAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEvent>
          }
          groupBy: {
            args: Prisma.EventGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EventGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventCountArgs<ExtArgs>,
            result: $Utils.Optional<EventCountAggregateOutputType> | number
          }
        }
      }
      UsersOnEvents: {
        payload: UsersOnEventsPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.UsersOnEventsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsersOnEventsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersOnEventsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsersOnEventsPayload>
          }
          findFirst: {
            args: Prisma.UsersOnEventsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsersOnEventsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersOnEventsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsersOnEventsPayload>
          }
          findMany: {
            args: Prisma.UsersOnEventsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsersOnEventsPayload>[]
          }
          create: {
            args: Prisma.UsersOnEventsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsersOnEventsPayload>
          }
          createMany: {
            args: Prisma.UsersOnEventsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UsersOnEventsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsersOnEventsPayload>
          }
          update: {
            args: Prisma.UsersOnEventsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsersOnEventsPayload>
          }
          deleteMany: {
            args: Prisma.UsersOnEventsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UsersOnEventsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UsersOnEventsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsersOnEventsPayload>
          }
          aggregate: {
            args: Prisma.UsersOnEventsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsersOnEvents>
          }
          groupBy: {
            args: Prisma.UsersOnEventsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersOnEventsGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersOnEventsCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersOnEventsCountAggregateOutputType> | number
          }
        }
      }
      Chat: {
        payload: ChatPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ChatFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatPayload>
          }
          findFirst: {
            args: Prisma.ChatFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatPayload>
          }
          findMany: {
            args: Prisma.ChatFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatPayload>[]
          }
          create: {
            args: Prisma.ChatCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatPayload>
          }
          createMany: {
            args: Prisma.ChatCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ChatDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatPayload>
          }
          update: {
            args: Prisma.ChatUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatPayload>
          }
          deleteMany: {
            args: Prisma.ChatDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ChatUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ChatUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatPayload>
          }
          aggregate: {
            args: Prisma.ChatAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateChat>
          }
          groupBy: {
            args: Prisma.ChatGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ChatGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatCountArgs<ExtArgs>,
            result: $Utils.Optional<ChatCountAggregateOutputType> | number
          }
        }
      }
      ChatsOnUsers: {
        payload: ChatsOnUsersPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ChatsOnUsersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatsOnUsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatsOnUsersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatsOnUsersPayload>
          }
          findFirst: {
            args: Prisma.ChatsOnUsersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatsOnUsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatsOnUsersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatsOnUsersPayload>
          }
          findMany: {
            args: Prisma.ChatsOnUsersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatsOnUsersPayload>[]
          }
          create: {
            args: Prisma.ChatsOnUsersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatsOnUsersPayload>
          }
          createMany: {
            args: Prisma.ChatsOnUsersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ChatsOnUsersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatsOnUsersPayload>
          }
          update: {
            args: Prisma.ChatsOnUsersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatsOnUsersPayload>
          }
          deleteMany: {
            args: Prisma.ChatsOnUsersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ChatsOnUsersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ChatsOnUsersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatsOnUsersPayload>
          }
          aggregate: {
            args: Prisma.ChatsOnUsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateChatsOnUsers>
          }
          groupBy: {
            args: Prisma.ChatsOnUsersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ChatsOnUsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatsOnUsersCountArgs<ExtArgs>,
            result: $Utils.Optional<ChatsOnUsersCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: MessagePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>,
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      QuizzesOnCourse: {
        payload: QuizzesOnCoursePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.QuizzesOnCourseFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuizzesOnCoursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuizzesOnCourseFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuizzesOnCoursePayload>
          }
          findFirst: {
            args: Prisma.QuizzesOnCourseFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuizzesOnCoursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuizzesOnCourseFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuizzesOnCoursePayload>
          }
          findMany: {
            args: Prisma.QuizzesOnCourseFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuizzesOnCoursePayload>[]
          }
          create: {
            args: Prisma.QuizzesOnCourseCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuizzesOnCoursePayload>
          }
          createMany: {
            args: Prisma.QuizzesOnCourseCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.QuizzesOnCourseDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuizzesOnCoursePayload>
          }
          update: {
            args: Prisma.QuizzesOnCourseUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuizzesOnCoursePayload>
          }
          deleteMany: {
            args: Prisma.QuizzesOnCourseDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.QuizzesOnCourseUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.QuizzesOnCourseUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuizzesOnCoursePayload>
          }
          aggregate: {
            args: Prisma.QuizzesOnCourseAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateQuizzesOnCourse>
          }
          groupBy: {
            args: Prisma.QuizzesOnCourseGroupByArgs<ExtArgs>,
            result: $Utils.Optional<QuizzesOnCourseGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuizzesOnCourseCountArgs<ExtArgs>,
            result: $Utils.Optional<QuizzesOnCourseCountAggregateOutputType> | number
          }
        }
      }
      Quiz: {
        payload: QuizPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.QuizFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuizPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuizFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuizPayload>
          }
          findFirst: {
            args: Prisma.QuizFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuizPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuizFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuizPayload>
          }
          findMany: {
            args: Prisma.QuizFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuizPayload>[]
          }
          create: {
            args: Prisma.QuizCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuizPayload>
          }
          createMany: {
            args: Prisma.QuizCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.QuizDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuizPayload>
          }
          update: {
            args: Prisma.QuizUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuizPayload>
          }
          deleteMany: {
            args: Prisma.QuizDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.QuizUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.QuizUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuizPayload>
          }
          aggregate: {
            args: Prisma.QuizAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateQuiz>
          }
          groupBy: {
            args: Prisma.QuizGroupByArgs<ExtArgs>,
            result: $Utils.Optional<QuizGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuizCountArgs<ExtArgs>,
            result: $Utils.Optional<QuizCountAggregateOutputType> | number
          }
        }
      }
      Question: {
        payload: QuestionPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.QuestionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuestionPayload>
          }
          findFirst: {
            args: Prisma.QuestionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuestionPayload>
          }
          findMany: {
            args: Prisma.QuestionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuestionPayload>[]
          }
          create: {
            args: Prisma.QuestionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuestionPayload>
          }
          createMany: {
            args: Prisma.QuestionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.QuestionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuestionPayload>
          }
          update: {
            args: Prisma.QuestionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuestionPayload>
          }
          deleteMany: {
            args: Prisma.QuestionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.QuestionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuestionPayload>
          }
          aggregate: {
            args: Prisma.QuestionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateQuestion>
          }
          groupBy: {
            args: Prisma.QuestionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<QuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionCountArgs<ExtArgs>,
            result: $Utils.Optional<QuestionCountAggregateOutputType> | number
          }
        }
      }
      Answer: {
        payload: AnswerPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.AnswerFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AnswerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnswerFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AnswerPayload>
          }
          findFirst: {
            args: Prisma.AnswerFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AnswerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnswerFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AnswerPayload>
          }
          findMany: {
            args: Prisma.AnswerFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AnswerPayload>[]
          }
          create: {
            args: Prisma.AnswerCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AnswerPayload>
          }
          createMany: {
            args: Prisma.AnswerCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AnswerDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AnswerPayload>
          }
          update: {
            args: Prisma.AnswerUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AnswerPayload>
          }
          deleteMany: {
            args: Prisma.AnswerDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AnswerUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AnswerUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AnswerPayload>
          }
          aggregate: {
            args: Prisma.AnswerAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAnswer>
          }
          groupBy: {
            args: Prisma.AnswerGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AnswerGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnswerCountArgs<ExtArgs>,
            result: $Utils.Optional<AnswerCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    payments: number
    chats: number
    events: number
    messages: number
    quizAttempts: number
    WebPushSubscription: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    payments?: boolean | UserCountOutputTypeCountPaymentsArgs
    chats?: boolean | UserCountOutputTypeCountChatsArgs
    events?: boolean | UserCountOutputTypeCountEventsArgs
    messages?: boolean | UserCountOutputTypeCountMessagesArgs
    quizAttempts?: boolean | UserCountOutputTypeCountQuizAttemptsArgs
    WebPushSubscription?: boolean | UserCountOutputTypeCountWebPushSubscriptionArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChatsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ChatsOnUsersWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UsersOnEventsWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountQuizAttemptsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: QuizAttemptWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWebPushSubscriptionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: WebPushSubscriptionWhereInput
  }



  /**
   * Count Type VideoCountOutputType
   */


  export type VideoCountOutputType = {
    courses: number
  }

  export type VideoCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    courses?: boolean | VideoCountOutputTypeCountCoursesArgs
  }

  // Custom InputTypes

  /**
   * VideoCountOutputType without action
   */
  export type VideoCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideoCountOutputType
     */
    select?: VideoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * VideoCountOutputType without action
   */
  export type VideoCountOutputTypeCountCoursesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: VideosOnCoursesWhereInput
  }



  /**
   * Count Type FolderCountOutputType
   */


  export type FolderCountOutputType = {
    files: number
    folders: number
  }

  export type FolderCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    files?: boolean | FolderCountOutputTypeCountFilesArgs
    folders?: boolean | FolderCountOutputTypeCountFoldersArgs
  }

  // Custom InputTypes

  /**
   * FolderCountOutputType without action
   */
  export type FolderCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FolderCountOutputType
     */
    select?: FolderCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * FolderCountOutputType without action
   */
  export type FolderCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
  }


  /**
   * FolderCountOutputType without action
   */
  export type FolderCountOutputTypeCountFoldersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FolderWhereInput
  }



  /**
   * Count Type CourseCountOutputType
   */


  export type CourseCountOutputType = {
    folders: number
    files: number
    videos: number
    students: number
    quizzes: number
    predefinedEvents: number
  }

  export type CourseCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    folders?: boolean | CourseCountOutputTypeCountFoldersArgs
    files?: boolean | CourseCountOutputTypeCountFilesArgs
    videos?: boolean | CourseCountOutputTypeCountVideosArgs
    students?: boolean | CourseCountOutputTypeCountStudentsArgs
    quizzes?: boolean | CourseCountOutputTypeCountQuizzesArgs
    predefinedEvents?: boolean | CourseCountOutputTypeCountPredefinedEventsArgs
  }

  // Custom InputTypes

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCountOutputType
     */
    select?: CourseCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountFoldersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FolderWhereInput
  }


  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
  }


  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountVideosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: VideosOnCoursesWhereInput
  }


  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountQuizzesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: QuizzesOnCourseWhereInput
  }


  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountPredefinedEventsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PredefinedEventOnCoursesWhereInput
  }



  /**
   * Count Type PredefinedEventCountOutputType
   */


  export type PredefinedEventCountOutputType = {
    events: number
    courses: number
  }

  export type PredefinedEventCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    events?: boolean | PredefinedEventCountOutputTypeCountEventsArgs
    courses?: boolean | PredefinedEventCountOutputTypeCountCoursesArgs
  }

  // Custom InputTypes

  /**
   * PredefinedEventCountOutputType without action
   */
  export type PredefinedEventCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedEventCountOutputType
     */
    select?: PredefinedEventCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PredefinedEventCountOutputType without action
   */
  export type PredefinedEventCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }


  /**
   * PredefinedEventCountOutputType without action
   */
  export type PredefinedEventCountOutputTypeCountCoursesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PredefinedEventOnCoursesWhereInput
  }



  /**
   * Count Type EventCountOutputType
   */


  export type EventCountOutputType = {
    users: number
    waitlist: number
    visitedUsers: number
  }

  export type EventCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    users?: boolean | EventCountOutputTypeCountUsersArgs
    waitlist?: boolean | EventCountOutputTypeCountWaitlistArgs
    visitedUsers?: boolean | EventCountOutputTypeCountVisitedUsersArgs
  }

  // Custom InputTypes

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventCountOutputType
     */
    select?: EventCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UsersOnEventsWhereInput
  }


  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountWaitlistArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UsersOnEventsWhereInput
  }


  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountVisitedUsersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UsersOnEventsWhereInput
  }



  /**
   * Count Type ChatCountOutputType
   */


  export type ChatCountOutputType = {
    users: number
    messages: number
  }

  export type ChatCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    users?: boolean | ChatCountOutputTypeCountUsersArgs
    messages?: boolean | ChatCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes

  /**
   * ChatCountOutputType without action
   */
  export type ChatCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatCountOutputType
     */
    select?: ChatCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ChatCountOutputType without action
   */
  export type ChatCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ChatsOnUsersWhereInput
  }


  /**
   * ChatCountOutputType without action
   */
  export type ChatCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }



  /**
   * Count Type QuizCountOutputType
   */


  export type QuizCountOutputType = {
    courses: number
    questions: number
  }

  export type QuizCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    courses?: boolean | QuizCountOutputTypeCountCoursesArgs
    questions?: boolean | QuizCountOutputTypeCountQuestionsArgs
  }

  // Custom InputTypes

  /**
   * QuizCountOutputType without action
   */
  export type QuizCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizCountOutputType
     */
    select?: QuizCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * QuizCountOutputType without action
   */
  export type QuizCountOutputTypeCountCoursesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: QuizzesOnCourseWhereInput
  }


  /**
   * QuizCountOutputType without action
   */
  export type QuizCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
  }



  /**
   * Count Type QuestionCountOutputType
   */


  export type QuestionCountOutputType = {
    answers: number
  }

  export type QuestionCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    answers?: boolean | QuestionCountOutputTypeCountAnswersArgs
  }

  // Custom InputTypes

  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionCountOutputType
     */
    select?: QuestionCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeCountAnswersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AnswerWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    role: Role | null
    firstName: string | null
    lastName: string | null
    phoneNumber: string | null
    birthDate: Date | null
    address: string | null
    zipCode: string | null
    city: string | null
    idNumber: string | null
    idIssueDate: Date | null
    profilePicturePath: string | null
    isInClub: boolean | null
    courseId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isActive: boolean | null
    isCalendarEnable: boolean | null
    calendarBlockingDeadline: Date | null
    receiveEmailsOnNewEvent: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    role: Role | null
    firstName: string | null
    lastName: string | null
    phoneNumber: string | null
    birthDate: Date | null
    address: string | null
    zipCode: string | null
    city: string | null
    idNumber: string | null
    idIssueDate: Date | null
    profilePicturePath: string | null
    isInClub: boolean | null
    courseId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isActive: boolean | null
    isCalendarEnable: boolean | null
    calendarBlockingDeadline: Date | null
    receiveEmailsOnNewEvent: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    role: number
    firstName: number
    lastName: number
    phoneNumber: number
    birthDate: number
    address: number
    zipCode: number
    city: number
    idNumber: number
    idIssueDate: number
    profilePicturePath: number
    isInClub: number
    courseId: number
    createdAt: number
    updatedAt: number
    isActive: number
    isCalendarEnable: number
    calendarBlockingDeadline: number
    receiveEmailsOnNewEvent: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    firstName?: true
    lastName?: true
    phoneNumber?: true
    birthDate?: true
    address?: true
    zipCode?: true
    city?: true
    idNumber?: true
    idIssueDate?: true
    profilePicturePath?: true
    isInClub?: true
    courseId?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
    isCalendarEnable?: true
    calendarBlockingDeadline?: true
    receiveEmailsOnNewEvent?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    firstName?: true
    lastName?: true
    phoneNumber?: true
    birthDate?: true
    address?: true
    zipCode?: true
    city?: true
    idNumber?: true
    idIssueDate?: true
    profilePicturePath?: true
    isInClub?: true
    courseId?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
    isCalendarEnable?: true
    calendarBlockingDeadline?: true
    receiveEmailsOnNewEvent?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    firstName?: true
    lastName?: true
    phoneNumber?: true
    birthDate?: true
    address?: true
    zipCode?: true
    city?: true
    idNumber?: true
    idIssueDate?: true
    profilePicturePath?: true
    isInClub?: true
    courseId?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
    isCalendarEnable?: true
    calendarBlockingDeadline?: true
    receiveEmailsOnNewEvent?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    role: Role
    firstName: string | null
    lastName: string | null
    phoneNumber: string | null
    birthDate: Date | null
    address: string | null
    zipCode: string | null
    city: string | null
    idNumber: string | null
    idIssueDate: Date | null
    profilePicturePath: string | null
    isInClub: boolean
    courseId: string | null
    createdAt: Date
    updatedAt: Date
    isActive: boolean
    isCalendarEnable: boolean
    calendarBlockingDeadline: Date | null
    receiveEmailsOnNewEvent: boolean
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    firstName?: boolean
    lastName?: boolean
    phoneNumber?: boolean
    birthDate?: boolean
    address?: boolean
    zipCode?: boolean
    city?: boolean
    idNumber?: boolean
    idIssueDate?: boolean
    profilePicturePath?: boolean
    isInClub?: boolean
    courseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    isCalendarEnable?: boolean
    calendarBlockingDeadline?: boolean
    receiveEmailsOnNewEvent?: boolean
    payments?: boolean | User$paymentsArgs<ExtArgs>
    chats?: boolean | User$chatsArgs<ExtArgs>
    events?: boolean | User$eventsArgs<ExtArgs>
    messages?: boolean | User$messagesArgs<ExtArgs>
    course?: boolean | CourseArgs<ExtArgs>
    passwordRecoveryToken?: boolean | PasswordRecoveryTokenArgs<ExtArgs>
    quizAttempts?: boolean | User$quizAttemptsArgs<ExtArgs>
    WebPushSubscription?: boolean | User$WebPushSubscriptionArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    firstName?: boolean
    lastName?: boolean
    phoneNumber?: boolean
    birthDate?: boolean
    address?: boolean
    zipCode?: boolean
    city?: boolean
    idNumber?: boolean
    idIssueDate?: boolean
    profilePicturePath?: boolean
    isInClub?: boolean
    courseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    isCalendarEnable?: boolean
    calendarBlockingDeadline?: boolean
    receiveEmailsOnNewEvent?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    payments?: boolean | User$paymentsArgs<ExtArgs>
    chats?: boolean | User$chatsArgs<ExtArgs>
    events?: boolean | User$eventsArgs<ExtArgs>
    messages?: boolean | User$messagesArgs<ExtArgs>
    course?: boolean | CourseArgs<ExtArgs>
    passwordRecoveryToken?: boolean | PasswordRecoveryTokenArgs<ExtArgs>
    quizAttempts?: boolean | User$quizAttemptsArgs<ExtArgs>
    WebPushSubscription?: boolean | User$WebPushSubscriptionArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }


  type UserGetPayload<S extends boolean | null | undefined | UserArgs> = $Types.GetResult<UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<UserPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    payments<T extends User$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, User$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<PaymentPayload<ExtArgs>, T, 'findMany', never>| Null>;

    chats<T extends User$chatsArgs<ExtArgs> = {}>(args?: Subset<T, User$chatsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ChatsOnUsersPayload<ExtArgs>, T, 'findMany', never>| Null>;

    events<T extends User$eventsArgs<ExtArgs> = {}>(args?: Subset<T, User$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<UsersOnEventsPayload<ExtArgs>, T, 'findMany', never>| Null>;

    messages<T extends User$messagesArgs<ExtArgs> = {}>(args?: Subset<T, User$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findMany', never>| Null>;

    course<T extends CourseArgs<ExtArgs> = {}>(args?: Subset<T, CourseArgs<ExtArgs>>): Prisma__CourseClient<$Types.GetResult<CoursePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    passwordRecoveryToken<T extends PasswordRecoveryTokenArgs<ExtArgs> = {}>(args?: Subset<T, PasswordRecoveryTokenArgs<ExtArgs>>): Prisma__PasswordRecoveryTokenClient<$Types.GetResult<PasswordRecoveryTokenPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    quizAttempts<T extends User$quizAttemptsArgs<ExtArgs> = {}>(args?: Subset<T, User$quizAttemptsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<QuizAttemptPayload<ExtArgs>, T, 'findMany', never>| Null>;

    WebPushSubscription<T extends User$WebPushSubscriptionArgs<ExtArgs> = {}>(args?: Subset<T, User$WebPushSubscriptionArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<WebPushSubscriptionPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.payments
   */
  export type User$paymentsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: Enumerable<PaymentOrderByWithRelationInput>
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PaymentScalarFieldEnum>
  }


  /**
   * User.chats
   */
  export type User$chatsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatsOnUsers
     */
    select?: ChatsOnUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatsOnUsersInclude<ExtArgs> | null
    where?: ChatsOnUsersWhereInput
    orderBy?: Enumerable<ChatsOnUsersOrderByWithRelationInput>
    cursor?: ChatsOnUsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChatsOnUsersScalarFieldEnum>
  }


  /**
   * User.events
   */
  export type User$eventsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersOnEvents
     */
    select?: UsersOnEventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersOnEventsInclude<ExtArgs> | null
    where?: UsersOnEventsWhereInput
    orderBy?: Enumerable<UsersOnEventsOrderByWithRelationInput>
    cursor?: UsersOnEventsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UsersOnEventsScalarFieldEnum>
  }


  /**
   * User.messages
   */
  export type User$messagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: Enumerable<MessageOrderByWithRelationInput>
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MessageScalarFieldEnum>
  }


  /**
   * User.quizAttempts
   */
  export type User$quizAttemptsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizAttempt
     */
    select?: QuizAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuizAttemptInclude<ExtArgs> | null
    where?: QuizAttemptWhereInput
    orderBy?: Enumerable<QuizAttemptOrderByWithRelationInput>
    cursor?: QuizAttemptWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<QuizAttemptScalarFieldEnum>
  }


  /**
   * User.WebPushSubscription
   */
  export type User$WebPushSubscriptionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebPushSubscription
     */
    select?: WebPushSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WebPushSubscriptionInclude<ExtArgs> | null
    where?: WebPushSubscriptionWhereInput
    orderBy?: Enumerable<WebPushSubscriptionOrderByWithRelationInput>
    cursor?: WebPushSubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<WebPushSubscriptionScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model WebPushSubscription
   */


  export type AggregateWebPushSubscription = {
    _count: WebPushSubscriptionCountAggregateOutputType | null
    _min: WebPushSubscriptionMinAggregateOutputType | null
    _max: WebPushSubscriptionMaxAggregateOutputType | null
  }

  export type WebPushSubscriptionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    endpoint: string | null
    p256dh: string | null
    auth: string | null
    createdAt: Date | null
    updatedAt: Date | null
    chatEnabled: boolean | null
    calendarEnabled: boolean | null
  }

  export type WebPushSubscriptionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    endpoint: string | null
    p256dh: string | null
    auth: string | null
    createdAt: Date | null
    updatedAt: Date | null
    chatEnabled: boolean | null
    calendarEnabled: boolean | null
  }

  export type WebPushSubscriptionCountAggregateOutputType = {
    id: number
    userId: number
    endpoint: number
    p256dh: number
    auth: number
    createdAt: number
    updatedAt: number
    chatEnabled: number
    calendarEnabled: number
    _all: number
  }


  export type WebPushSubscriptionMinAggregateInputType = {
    id?: true
    userId?: true
    endpoint?: true
    p256dh?: true
    auth?: true
    createdAt?: true
    updatedAt?: true
    chatEnabled?: true
    calendarEnabled?: true
  }

  export type WebPushSubscriptionMaxAggregateInputType = {
    id?: true
    userId?: true
    endpoint?: true
    p256dh?: true
    auth?: true
    createdAt?: true
    updatedAt?: true
    chatEnabled?: true
    calendarEnabled?: true
  }

  export type WebPushSubscriptionCountAggregateInputType = {
    id?: true
    userId?: true
    endpoint?: true
    p256dh?: true
    auth?: true
    createdAt?: true
    updatedAt?: true
    chatEnabled?: true
    calendarEnabled?: true
    _all?: true
  }

  export type WebPushSubscriptionAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which WebPushSubscription to aggregate.
     */
    where?: WebPushSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebPushSubscriptions to fetch.
     */
    orderBy?: Enumerable<WebPushSubscriptionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WebPushSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebPushSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebPushSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WebPushSubscriptions
    **/
    _count?: true | WebPushSubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WebPushSubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WebPushSubscriptionMaxAggregateInputType
  }

  export type GetWebPushSubscriptionAggregateType<T extends WebPushSubscriptionAggregateArgs> = {
        [P in keyof T & keyof AggregateWebPushSubscription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWebPushSubscription[P]>
      : GetScalarType<T[P], AggregateWebPushSubscription[P]>
  }




  export type WebPushSubscriptionGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: WebPushSubscriptionWhereInput
    orderBy?: Enumerable<WebPushSubscriptionOrderByWithAggregationInput>
    by: WebPushSubscriptionScalarFieldEnum[]
    having?: WebPushSubscriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WebPushSubscriptionCountAggregateInputType | true
    _min?: WebPushSubscriptionMinAggregateInputType
    _max?: WebPushSubscriptionMaxAggregateInputType
  }


  export type WebPushSubscriptionGroupByOutputType = {
    id: string
    userId: string
    endpoint: string
    p256dh: string
    auth: string
    createdAt: Date
    updatedAt: Date
    chatEnabled: boolean
    calendarEnabled: boolean
    _count: WebPushSubscriptionCountAggregateOutputType | null
    _min: WebPushSubscriptionMinAggregateOutputType | null
    _max: WebPushSubscriptionMaxAggregateOutputType | null
  }

  type GetWebPushSubscriptionGroupByPayload<T extends WebPushSubscriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<WebPushSubscriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WebPushSubscriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WebPushSubscriptionGroupByOutputType[P]>
            : GetScalarType<T[P], WebPushSubscriptionGroupByOutputType[P]>
        }
      >
    >


  export type WebPushSubscriptionSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    endpoint?: boolean
    p256dh?: boolean
    auth?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chatEnabled?: boolean
    calendarEnabled?: boolean
    user?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["webPushSubscription"]>

  export type WebPushSubscriptionSelectScalar = {
    id?: boolean
    userId?: boolean
    endpoint?: boolean
    p256dh?: boolean
    auth?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chatEnabled?: boolean
    calendarEnabled?: boolean
  }

  export type WebPushSubscriptionInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
  }


  type WebPushSubscriptionGetPayload<S extends boolean | null | undefined | WebPushSubscriptionArgs> = $Types.GetResult<WebPushSubscriptionPayload, S>

  type WebPushSubscriptionCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<WebPushSubscriptionFindManyArgs, 'select' | 'include'> & {
      select?: WebPushSubscriptionCountAggregateInputType | true
    }

  export interface WebPushSubscriptionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WebPushSubscription'], meta: { name: 'WebPushSubscription' } }
    /**
     * Find zero or one WebPushSubscription that matches the filter.
     * @param {WebPushSubscriptionFindUniqueArgs} args - Arguments to find a WebPushSubscription
     * @example
     * // Get one WebPushSubscription
     * const webPushSubscription = await prisma.webPushSubscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WebPushSubscriptionFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, WebPushSubscriptionFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'WebPushSubscription'> extends True ? Prisma__WebPushSubscriptionClient<$Types.GetResult<WebPushSubscriptionPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__WebPushSubscriptionClient<$Types.GetResult<WebPushSubscriptionPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one WebPushSubscription that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WebPushSubscriptionFindUniqueOrThrowArgs} args - Arguments to find a WebPushSubscription
     * @example
     * // Get one WebPushSubscription
     * const webPushSubscription = await prisma.webPushSubscription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WebPushSubscriptionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WebPushSubscriptionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__WebPushSubscriptionClient<$Types.GetResult<WebPushSubscriptionPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first WebPushSubscription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebPushSubscriptionFindFirstArgs} args - Arguments to find a WebPushSubscription
     * @example
     * // Get one WebPushSubscription
     * const webPushSubscription = await prisma.webPushSubscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WebPushSubscriptionFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, WebPushSubscriptionFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'WebPushSubscription'> extends True ? Prisma__WebPushSubscriptionClient<$Types.GetResult<WebPushSubscriptionPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__WebPushSubscriptionClient<$Types.GetResult<WebPushSubscriptionPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first WebPushSubscription that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebPushSubscriptionFindFirstOrThrowArgs} args - Arguments to find a WebPushSubscription
     * @example
     * // Get one WebPushSubscription
     * const webPushSubscription = await prisma.webPushSubscription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WebPushSubscriptionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WebPushSubscriptionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__WebPushSubscriptionClient<$Types.GetResult<WebPushSubscriptionPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more WebPushSubscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebPushSubscriptionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WebPushSubscriptions
     * const webPushSubscriptions = await prisma.webPushSubscription.findMany()
     * 
     * // Get first 10 WebPushSubscriptions
     * const webPushSubscriptions = await prisma.webPushSubscription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const webPushSubscriptionWithIdOnly = await prisma.webPushSubscription.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WebPushSubscriptionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WebPushSubscriptionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<WebPushSubscriptionPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a WebPushSubscription.
     * @param {WebPushSubscriptionCreateArgs} args - Arguments to create a WebPushSubscription.
     * @example
     * // Create one WebPushSubscription
     * const WebPushSubscription = await prisma.webPushSubscription.create({
     *   data: {
     *     // ... data to create a WebPushSubscription
     *   }
     * })
     * 
    **/
    create<T extends WebPushSubscriptionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, WebPushSubscriptionCreateArgs<ExtArgs>>
    ): Prisma__WebPushSubscriptionClient<$Types.GetResult<WebPushSubscriptionPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many WebPushSubscriptions.
     *     @param {WebPushSubscriptionCreateManyArgs} args - Arguments to create many WebPushSubscriptions.
     *     @example
     *     // Create many WebPushSubscriptions
     *     const webPushSubscription = await prisma.webPushSubscription.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WebPushSubscriptionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WebPushSubscriptionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a WebPushSubscription.
     * @param {WebPushSubscriptionDeleteArgs} args - Arguments to delete one WebPushSubscription.
     * @example
     * // Delete one WebPushSubscription
     * const WebPushSubscription = await prisma.webPushSubscription.delete({
     *   where: {
     *     // ... filter to delete one WebPushSubscription
     *   }
     * })
     * 
    **/
    delete<T extends WebPushSubscriptionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, WebPushSubscriptionDeleteArgs<ExtArgs>>
    ): Prisma__WebPushSubscriptionClient<$Types.GetResult<WebPushSubscriptionPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one WebPushSubscription.
     * @param {WebPushSubscriptionUpdateArgs} args - Arguments to update one WebPushSubscription.
     * @example
     * // Update one WebPushSubscription
     * const webPushSubscription = await prisma.webPushSubscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WebPushSubscriptionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, WebPushSubscriptionUpdateArgs<ExtArgs>>
    ): Prisma__WebPushSubscriptionClient<$Types.GetResult<WebPushSubscriptionPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more WebPushSubscriptions.
     * @param {WebPushSubscriptionDeleteManyArgs} args - Arguments to filter WebPushSubscriptions to delete.
     * @example
     * // Delete a few WebPushSubscriptions
     * const { count } = await prisma.webPushSubscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WebPushSubscriptionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WebPushSubscriptionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WebPushSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebPushSubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WebPushSubscriptions
     * const webPushSubscription = await prisma.webPushSubscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WebPushSubscriptionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, WebPushSubscriptionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WebPushSubscription.
     * @param {WebPushSubscriptionUpsertArgs} args - Arguments to update or create a WebPushSubscription.
     * @example
     * // Update or create a WebPushSubscription
     * const webPushSubscription = await prisma.webPushSubscription.upsert({
     *   create: {
     *     // ... data to create a WebPushSubscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WebPushSubscription we want to update
     *   }
     * })
    **/
    upsert<T extends WebPushSubscriptionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, WebPushSubscriptionUpsertArgs<ExtArgs>>
    ): Prisma__WebPushSubscriptionClient<$Types.GetResult<WebPushSubscriptionPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of WebPushSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebPushSubscriptionCountArgs} args - Arguments to filter WebPushSubscriptions to count.
     * @example
     * // Count the number of WebPushSubscriptions
     * const count = await prisma.webPushSubscription.count({
     *   where: {
     *     // ... the filter for the WebPushSubscriptions we want to count
     *   }
     * })
    **/
    count<T extends WebPushSubscriptionCountArgs>(
      args?: Subset<T, WebPushSubscriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WebPushSubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WebPushSubscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebPushSubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WebPushSubscriptionAggregateArgs>(args: Subset<T, WebPushSubscriptionAggregateArgs>): Prisma.PrismaPromise<GetWebPushSubscriptionAggregateType<T>>

    /**
     * Group by WebPushSubscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebPushSubscriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WebPushSubscriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WebPushSubscriptionGroupByArgs['orderBy'] }
        : { orderBy?: WebPushSubscriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WebPushSubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWebPushSubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for WebPushSubscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__WebPushSubscriptionClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * WebPushSubscription base type for findUnique actions
   */
  export type WebPushSubscriptionFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebPushSubscription
     */
    select?: WebPushSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WebPushSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which WebPushSubscription to fetch.
     */
    where: WebPushSubscriptionWhereUniqueInput
  }

  /**
   * WebPushSubscription findUnique
   */
  export interface WebPushSubscriptionFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends WebPushSubscriptionFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * WebPushSubscription findUniqueOrThrow
   */
  export type WebPushSubscriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebPushSubscription
     */
    select?: WebPushSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WebPushSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which WebPushSubscription to fetch.
     */
    where: WebPushSubscriptionWhereUniqueInput
  }


  /**
   * WebPushSubscription base type for findFirst actions
   */
  export type WebPushSubscriptionFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebPushSubscription
     */
    select?: WebPushSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WebPushSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which WebPushSubscription to fetch.
     */
    where?: WebPushSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebPushSubscriptions to fetch.
     */
    orderBy?: Enumerable<WebPushSubscriptionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebPushSubscriptions.
     */
    cursor?: WebPushSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebPushSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebPushSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebPushSubscriptions.
     */
    distinct?: Enumerable<WebPushSubscriptionScalarFieldEnum>
  }

  /**
   * WebPushSubscription findFirst
   */
  export interface WebPushSubscriptionFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends WebPushSubscriptionFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * WebPushSubscription findFirstOrThrow
   */
  export type WebPushSubscriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebPushSubscription
     */
    select?: WebPushSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WebPushSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which WebPushSubscription to fetch.
     */
    where?: WebPushSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebPushSubscriptions to fetch.
     */
    orderBy?: Enumerable<WebPushSubscriptionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebPushSubscriptions.
     */
    cursor?: WebPushSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebPushSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebPushSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebPushSubscriptions.
     */
    distinct?: Enumerable<WebPushSubscriptionScalarFieldEnum>
  }


  /**
   * WebPushSubscription findMany
   */
  export type WebPushSubscriptionFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebPushSubscription
     */
    select?: WebPushSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WebPushSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which WebPushSubscriptions to fetch.
     */
    where?: WebPushSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebPushSubscriptions to fetch.
     */
    orderBy?: Enumerable<WebPushSubscriptionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WebPushSubscriptions.
     */
    cursor?: WebPushSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebPushSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebPushSubscriptions.
     */
    skip?: number
    distinct?: Enumerable<WebPushSubscriptionScalarFieldEnum>
  }


  /**
   * WebPushSubscription create
   */
  export type WebPushSubscriptionCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebPushSubscription
     */
    select?: WebPushSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WebPushSubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a WebPushSubscription.
     */
    data: XOR<WebPushSubscriptionCreateInput, WebPushSubscriptionUncheckedCreateInput>
  }


  /**
   * WebPushSubscription createMany
   */
  export type WebPushSubscriptionCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WebPushSubscriptions.
     */
    data: Enumerable<WebPushSubscriptionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * WebPushSubscription update
   */
  export type WebPushSubscriptionUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebPushSubscription
     */
    select?: WebPushSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WebPushSubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a WebPushSubscription.
     */
    data: XOR<WebPushSubscriptionUpdateInput, WebPushSubscriptionUncheckedUpdateInput>
    /**
     * Choose, which WebPushSubscription to update.
     */
    where: WebPushSubscriptionWhereUniqueInput
  }


  /**
   * WebPushSubscription updateMany
   */
  export type WebPushSubscriptionUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WebPushSubscriptions.
     */
    data: XOR<WebPushSubscriptionUpdateManyMutationInput, WebPushSubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which WebPushSubscriptions to update
     */
    where?: WebPushSubscriptionWhereInput
  }


  /**
   * WebPushSubscription upsert
   */
  export type WebPushSubscriptionUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebPushSubscription
     */
    select?: WebPushSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WebPushSubscriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the WebPushSubscription to update in case it exists.
     */
    where: WebPushSubscriptionWhereUniqueInput
    /**
     * In case the WebPushSubscription found by the `where` argument doesn't exist, create a new WebPushSubscription with this data.
     */
    create: XOR<WebPushSubscriptionCreateInput, WebPushSubscriptionUncheckedCreateInput>
    /**
     * In case the WebPushSubscription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WebPushSubscriptionUpdateInput, WebPushSubscriptionUncheckedUpdateInput>
  }


  /**
   * WebPushSubscription delete
   */
  export type WebPushSubscriptionDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebPushSubscription
     */
    select?: WebPushSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WebPushSubscriptionInclude<ExtArgs> | null
    /**
     * Filter which WebPushSubscription to delete.
     */
    where: WebPushSubscriptionWhereUniqueInput
  }


  /**
   * WebPushSubscription deleteMany
   */
  export type WebPushSubscriptionDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which WebPushSubscriptions to delete
     */
    where?: WebPushSubscriptionWhereInput
  }


  /**
   * WebPushSubscription without action
   */
  export type WebPushSubscriptionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebPushSubscription
     */
    select?: WebPushSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WebPushSubscriptionInclude<ExtArgs> | null
  }



  /**
   * Model QuizAttempt
   */


  export type AggregateQuizAttempt = {
    _count: QuizAttemptCountAggregateOutputType | null
    _min: QuizAttemptMinAggregateOutputType | null
    _max: QuizAttemptMaxAggregateOutputType | null
  }

  export type QuizAttemptMinAggregateOutputType = {
    id: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuizAttemptMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuizAttemptCountAggregateOutputType = {
    id: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type QuizAttemptMinAggregateInputType = {
    id?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuizAttemptMaxAggregateInputType = {
    id?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuizAttemptCountAggregateInputType = {
    id?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type QuizAttemptAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuizAttempt to aggregate.
     */
    where?: QuizAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuizAttempts to fetch.
     */
    orderBy?: Enumerable<QuizAttemptOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuizAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuizAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuizAttempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuizAttempts
    **/
    _count?: true | QuizAttemptCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuizAttemptMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuizAttemptMaxAggregateInputType
  }

  export type GetQuizAttemptAggregateType<T extends QuizAttemptAggregateArgs> = {
        [P in keyof T & keyof AggregateQuizAttempt]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuizAttempt[P]>
      : GetScalarType<T[P], AggregateQuizAttempt[P]>
  }




  export type QuizAttemptGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: QuizAttemptWhereInput
    orderBy?: Enumerable<QuizAttemptOrderByWithAggregationInput>
    by: QuizAttemptScalarFieldEnum[]
    having?: QuizAttemptScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuizAttemptCountAggregateInputType | true
    _min?: QuizAttemptMinAggregateInputType
    _max?: QuizAttemptMaxAggregateInputType
  }


  export type QuizAttemptGroupByOutputType = {
    id: string
    userId: string
    createdAt: Date
    updatedAt: Date
    _count: QuizAttemptCountAggregateOutputType | null
    _min: QuizAttemptMinAggregateOutputType | null
    _max: QuizAttemptMaxAggregateOutputType | null
  }

  type GetQuizAttemptGroupByPayload<T extends QuizAttemptGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<QuizAttemptGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuizAttemptGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuizAttemptGroupByOutputType[P]>
            : GetScalarType<T[P], QuizAttemptGroupByOutputType[P]>
        }
      >
    >


  export type QuizAttemptSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["quizAttempt"]>

  export type QuizAttemptSelectScalar = {
    id?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type QuizAttemptInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
  }


  type QuizAttemptGetPayload<S extends boolean | null | undefined | QuizAttemptArgs> = $Types.GetResult<QuizAttemptPayload, S>

  type QuizAttemptCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<QuizAttemptFindManyArgs, 'select' | 'include'> & {
      select?: QuizAttemptCountAggregateInputType | true
    }

  export interface QuizAttemptDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuizAttempt'], meta: { name: 'QuizAttempt' } }
    /**
     * Find zero or one QuizAttempt that matches the filter.
     * @param {QuizAttemptFindUniqueArgs} args - Arguments to find a QuizAttempt
     * @example
     * // Get one QuizAttempt
     * const quizAttempt = await prisma.quizAttempt.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends QuizAttemptFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, QuizAttemptFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'QuizAttempt'> extends True ? Prisma__QuizAttemptClient<$Types.GetResult<QuizAttemptPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__QuizAttemptClient<$Types.GetResult<QuizAttemptPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one QuizAttempt that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {QuizAttemptFindUniqueOrThrowArgs} args - Arguments to find a QuizAttempt
     * @example
     * // Get one QuizAttempt
     * const quizAttempt = await prisma.quizAttempt.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends QuizAttemptFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, QuizAttemptFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__QuizAttemptClient<$Types.GetResult<QuizAttemptPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first QuizAttempt that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizAttemptFindFirstArgs} args - Arguments to find a QuizAttempt
     * @example
     * // Get one QuizAttempt
     * const quizAttempt = await prisma.quizAttempt.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends QuizAttemptFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, QuizAttemptFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'QuizAttempt'> extends True ? Prisma__QuizAttemptClient<$Types.GetResult<QuizAttemptPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__QuizAttemptClient<$Types.GetResult<QuizAttemptPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first QuizAttempt that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizAttemptFindFirstOrThrowArgs} args - Arguments to find a QuizAttempt
     * @example
     * // Get one QuizAttempt
     * const quizAttempt = await prisma.quizAttempt.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends QuizAttemptFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, QuizAttemptFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__QuizAttemptClient<$Types.GetResult<QuizAttemptPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more QuizAttempts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizAttemptFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuizAttempts
     * const quizAttempts = await prisma.quizAttempt.findMany()
     * 
     * // Get first 10 QuizAttempts
     * const quizAttempts = await prisma.quizAttempt.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const quizAttemptWithIdOnly = await prisma.quizAttempt.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends QuizAttemptFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, QuizAttemptFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<QuizAttemptPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a QuizAttempt.
     * @param {QuizAttemptCreateArgs} args - Arguments to create a QuizAttempt.
     * @example
     * // Create one QuizAttempt
     * const QuizAttempt = await prisma.quizAttempt.create({
     *   data: {
     *     // ... data to create a QuizAttempt
     *   }
     * })
     * 
    **/
    create<T extends QuizAttemptCreateArgs<ExtArgs>>(
      args: SelectSubset<T, QuizAttemptCreateArgs<ExtArgs>>
    ): Prisma__QuizAttemptClient<$Types.GetResult<QuizAttemptPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many QuizAttempts.
     *     @param {QuizAttemptCreateManyArgs} args - Arguments to create many QuizAttempts.
     *     @example
     *     // Create many QuizAttempts
     *     const quizAttempt = await prisma.quizAttempt.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends QuizAttemptCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, QuizAttemptCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a QuizAttempt.
     * @param {QuizAttemptDeleteArgs} args - Arguments to delete one QuizAttempt.
     * @example
     * // Delete one QuizAttempt
     * const QuizAttempt = await prisma.quizAttempt.delete({
     *   where: {
     *     // ... filter to delete one QuizAttempt
     *   }
     * })
     * 
    **/
    delete<T extends QuizAttemptDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, QuizAttemptDeleteArgs<ExtArgs>>
    ): Prisma__QuizAttemptClient<$Types.GetResult<QuizAttemptPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one QuizAttempt.
     * @param {QuizAttemptUpdateArgs} args - Arguments to update one QuizAttempt.
     * @example
     * // Update one QuizAttempt
     * const quizAttempt = await prisma.quizAttempt.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends QuizAttemptUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, QuizAttemptUpdateArgs<ExtArgs>>
    ): Prisma__QuizAttemptClient<$Types.GetResult<QuizAttemptPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more QuizAttempts.
     * @param {QuizAttemptDeleteManyArgs} args - Arguments to filter QuizAttempts to delete.
     * @example
     * // Delete a few QuizAttempts
     * const { count } = await prisma.quizAttempt.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends QuizAttemptDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, QuizAttemptDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuizAttempts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizAttemptUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuizAttempts
     * const quizAttempt = await prisma.quizAttempt.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends QuizAttemptUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, QuizAttemptUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one QuizAttempt.
     * @param {QuizAttemptUpsertArgs} args - Arguments to update or create a QuizAttempt.
     * @example
     * // Update or create a QuizAttempt
     * const quizAttempt = await prisma.quizAttempt.upsert({
     *   create: {
     *     // ... data to create a QuizAttempt
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuizAttempt we want to update
     *   }
     * })
    **/
    upsert<T extends QuizAttemptUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, QuizAttemptUpsertArgs<ExtArgs>>
    ): Prisma__QuizAttemptClient<$Types.GetResult<QuizAttemptPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of QuizAttempts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizAttemptCountArgs} args - Arguments to filter QuizAttempts to count.
     * @example
     * // Count the number of QuizAttempts
     * const count = await prisma.quizAttempt.count({
     *   where: {
     *     // ... the filter for the QuizAttempts we want to count
     *   }
     * })
    **/
    count<T extends QuizAttemptCountArgs>(
      args?: Subset<T, QuizAttemptCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuizAttemptCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuizAttempt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizAttemptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuizAttemptAggregateArgs>(args: Subset<T, QuizAttemptAggregateArgs>): Prisma.PrismaPromise<GetQuizAttemptAggregateType<T>>

    /**
     * Group by QuizAttempt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizAttemptGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuizAttemptGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuizAttemptGroupByArgs['orderBy'] }
        : { orderBy?: QuizAttemptGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuizAttemptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuizAttemptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for QuizAttempt.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__QuizAttemptClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * QuizAttempt base type for findUnique actions
   */
  export type QuizAttemptFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizAttempt
     */
    select?: QuizAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuizAttemptInclude<ExtArgs> | null
    /**
     * Filter, which QuizAttempt to fetch.
     */
    where: QuizAttemptWhereUniqueInput
  }

  /**
   * QuizAttempt findUnique
   */
  export interface QuizAttemptFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends QuizAttemptFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * QuizAttempt findUniqueOrThrow
   */
  export type QuizAttemptFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizAttempt
     */
    select?: QuizAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuizAttemptInclude<ExtArgs> | null
    /**
     * Filter, which QuizAttempt to fetch.
     */
    where: QuizAttemptWhereUniqueInput
  }


  /**
   * QuizAttempt base type for findFirst actions
   */
  export type QuizAttemptFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizAttempt
     */
    select?: QuizAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuizAttemptInclude<ExtArgs> | null
    /**
     * Filter, which QuizAttempt to fetch.
     */
    where?: QuizAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuizAttempts to fetch.
     */
    orderBy?: Enumerable<QuizAttemptOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuizAttempts.
     */
    cursor?: QuizAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuizAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuizAttempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuizAttempts.
     */
    distinct?: Enumerable<QuizAttemptScalarFieldEnum>
  }

  /**
   * QuizAttempt findFirst
   */
  export interface QuizAttemptFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends QuizAttemptFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * QuizAttempt findFirstOrThrow
   */
  export type QuizAttemptFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizAttempt
     */
    select?: QuizAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuizAttemptInclude<ExtArgs> | null
    /**
     * Filter, which QuizAttempt to fetch.
     */
    where?: QuizAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuizAttempts to fetch.
     */
    orderBy?: Enumerable<QuizAttemptOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuizAttempts.
     */
    cursor?: QuizAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuizAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuizAttempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuizAttempts.
     */
    distinct?: Enumerable<QuizAttemptScalarFieldEnum>
  }


  /**
   * QuizAttempt findMany
   */
  export type QuizAttemptFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizAttempt
     */
    select?: QuizAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuizAttemptInclude<ExtArgs> | null
    /**
     * Filter, which QuizAttempts to fetch.
     */
    where?: QuizAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuizAttempts to fetch.
     */
    orderBy?: Enumerable<QuizAttemptOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuizAttempts.
     */
    cursor?: QuizAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuizAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuizAttempts.
     */
    skip?: number
    distinct?: Enumerable<QuizAttemptScalarFieldEnum>
  }


  /**
   * QuizAttempt create
   */
  export type QuizAttemptCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizAttempt
     */
    select?: QuizAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuizAttemptInclude<ExtArgs> | null
    /**
     * The data needed to create a QuizAttempt.
     */
    data: XOR<QuizAttemptCreateInput, QuizAttemptUncheckedCreateInput>
  }


  /**
   * QuizAttempt createMany
   */
  export type QuizAttemptCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QuizAttempts.
     */
    data: Enumerable<QuizAttemptCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * QuizAttempt update
   */
  export type QuizAttemptUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizAttempt
     */
    select?: QuizAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuizAttemptInclude<ExtArgs> | null
    /**
     * The data needed to update a QuizAttempt.
     */
    data: XOR<QuizAttemptUpdateInput, QuizAttemptUncheckedUpdateInput>
    /**
     * Choose, which QuizAttempt to update.
     */
    where: QuizAttemptWhereUniqueInput
  }


  /**
   * QuizAttempt updateMany
   */
  export type QuizAttemptUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QuizAttempts.
     */
    data: XOR<QuizAttemptUpdateManyMutationInput, QuizAttemptUncheckedUpdateManyInput>
    /**
     * Filter which QuizAttempts to update
     */
    where?: QuizAttemptWhereInput
  }


  /**
   * QuizAttempt upsert
   */
  export type QuizAttemptUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizAttempt
     */
    select?: QuizAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuizAttemptInclude<ExtArgs> | null
    /**
     * The filter to search for the QuizAttempt to update in case it exists.
     */
    where: QuizAttemptWhereUniqueInput
    /**
     * In case the QuizAttempt found by the `where` argument doesn't exist, create a new QuizAttempt with this data.
     */
    create: XOR<QuizAttemptCreateInput, QuizAttemptUncheckedCreateInput>
    /**
     * In case the QuizAttempt was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuizAttemptUpdateInput, QuizAttemptUncheckedUpdateInput>
  }


  /**
   * QuizAttempt delete
   */
  export type QuizAttemptDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizAttempt
     */
    select?: QuizAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuizAttemptInclude<ExtArgs> | null
    /**
     * Filter which QuizAttempt to delete.
     */
    where: QuizAttemptWhereUniqueInput
  }


  /**
   * QuizAttempt deleteMany
   */
  export type QuizAttemptDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuizAttempts to delete
     */
    where?: QuizAttemptWhereInput
  }


  /**
   * QuizAttempt without action
   */
  export type QuizAttemptArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizAttempt
     */
    select?: QuizAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuizAttemptInclude<ExtArgs> | null
  }



  /**
   * Model PasswordRecoveryToken
   */


  export type AggregatePasswordRecoveryToken = {
    _count: PasswordRecoveryTokenCountAggregateOutputType | null
    _min: PasswordRecoveryTokenMinAggregateOutputType | null
    _max: PasswordRecoveryTokenMaxAggregateOutputType | null
  }

  export type PasswordRecoveryTokenMinAggregateOutputType = {
    id: string | null
    token: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PasswordRecoveryTokenMaxAggregateOutputType = {
    id: string | null
    token: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PasswordRecoveryTokenCountAggregateOutputType = {
    id: number
    token: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PasswordRecoveryTokenMinAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PasswordRecoveryTokenMaxAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PasswordRecoveryTokenCountAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PasswordRecoveryTokenAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordRecoveryToken to aggregate.
     */
    where?: PasswordRecoveryTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordRecoveryTokens to fetch.
     */
    orderBy?: Enumerable<PasswordRecoveryTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PasswordRecoveryTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordRecoveryTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordRecoveryTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PasswordRecoveryTokens
    **/
    _count?: true | PasswordRecoveryTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PasswordRecoveryTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PasswordRecoveryTokenMaxAggregateInputType
  }

  export type GetPasswordRecoveryTokenAggregateType<T extends PasswordRecoveryTokenAggregateArgs> = {
        [P in keyof T & keyof AggregatePasswordRecoveryToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePasswordRecoveryToken[P]>
      : GetScalarType<T[P], AggregatePasswordRecoveryToken[P]>
  }




  export type PasswordRecoveryTokenGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PasswordRecoveryTokenWhereInput
    orderBy?: Enumerable<PasswordRecoveryTokenOrderByWithAggregationInput>
    by: PasswordRecoveryTokenScalarFieldEnum[]
    having?: PasswordRecoveryTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PasswordRecoveryTokenCountAggregateInputType | true
    _min?: PasswordRecoveryTokenMinAggregateInputType
    _max?: PasswordRecoveryTokenMaxAggregateInputType
  }


  export type PasswordRecoveryTokenGroupByOutputType = {
    id: string
    token: string
    userId: string
    createdAt: Date
    updatedAt: Date
    _count: PasswordRecoveryTokenCountAggregateOutputType | null
    _min: PasswordRecoveryTokenMinAggregateOutputType | null
    _max: PasswordRecoveryTokenMaxAggregateOutputType | null
  }

  type GetPasswordRecoveryTokenGroupByPayload<T extends PasswordRecoveryTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PasswordRecoveryTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PasswordRecoveryTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PasswordRecoveryTokenGroupByOutputType[P]>
            : GetScalarType<T[P], PasswordRecoveryTokenGroupByOutputType[P]>
        }
      >
    >


  export type PasswordRecoveryTokenSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["passwordRecoveryToken"]>

  export type PasswordRecoveryTokenSelectScalar = {
    id?: boolean
    token?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PasswordRecoveryTokenInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
  }


  type PasswordRecoveryTokenGetPayload<S extends boolean | null | undefined | PasswordRecoveryTokenArgs> = $Types.GetResult<PasswordRecoveryTokenPayload, S>

  type PasswordRecoveryTokenCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<PasswordRecoveryTokenFindManyArgs, 'select' | 'include'> & {
      select?: PasswordRecoveryTokenCountAggregateInputType | true
    }

  export interface PasswordRecoveryTokenDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PasswordRecoveryToken'], meta: { name: 'PasswordRecoveryToken' } }
    /**
     * Find zero or one PasswordRecoveryToken that matches the filter.
     * @param {PasswordRecoveryTokenFindUniqueArgs} args - Arguments to find a PasswordRecoveryToken
     * @example
     * // Get one PasswordRecoveryToken
     * const passwordRecoveryToken = await prisma.passwordRecoveryToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PasswordRecoveryTokenFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PasswordRecoveryTokenFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'PasswordRecoveryToken'> extends True ? Prisma__PasswordRecoveryTokenClient<$Types.GetResult<PasswordRecoveryTokenPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__PasswordRecoveryTokenClient<$Types.GetResult<PasswordRecoveryTokenPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one PasswordRecoveryToken that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PasswordRecoveryTokenFindUniqueOrThrowArgs} args - Arguments to find a PasswordRecoveryToken
     * @example
     * // Get one PasswordRecoveryToken
     * const passwordRecoveryToken = await prisma.passwordRecoveryToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PasswordRecoveryTokenFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PasswordRecoveryTokenFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PasswordRecoveryTokenClient<$Types.GetResult<PasswordRecoveryTokenPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first PasswordRecoveryToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordRecoveryTokenFindFirstArgs} args - Arguments to find a PasswordRecoveryToken
     * @example
     * // Get one PasswordRecoveryToken
     * const passwordRecoveryToken = await prisma.passwordRecoveryToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PasswordRecoveryTokenFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PasswordRecoveryTokenFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'PasswordRecoveryToken'> extends True ? Prisma__PasswordRecoveryTokenClient<$Types.GetResult<PasswordRecoveryTokenPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__PasswordRecoveryTokenClient<$Types.GetResult<PasswordRecoveryTokenPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first PasswordRecoveryToken that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordRecoveryTokenFindFirstOrThrowArgs} args - Arguments to find a PasswordRecoveryToken
     * @example
     * // Get one PasswordRecoveryToken
     * const passwordRecoveryToken = await prisma.passwordRecoveryToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PasswordRecoveryTokenFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PasswordRecoveryTokenFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PasswordRecoveryTokenClient<$Types.GetResult<PasswordRecoveryTokenPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more PasswordRecoveryTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordRecoveryTokenFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PasswordRecoveryTokens
     * const passwordRecoveryTokens = await prisma.passwordRecoveryToken.findMany()
     * 
     * // Get first 10 PasswordRecoveryTokens
     * const passwordRecoveryTokens = await prisma.passwordRecoveryToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const passwordRecoveryTokenWithIdOnly = await prisma.passwordRecoveryToken.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PasswordRecoveryTokenFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PasswordRecoveryTokenFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<PasswordRecoveryTokenPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a PasswordRecoveryToken.
     * @param {PasswordRecoveryTokenCreateArgs} args - Arguments to create a PasswordRecoveryToken.
     * @example
     * // Create one PasswordRecoveryToken
     * const PasswordRecoveryToken = await prisma.passwordRecoveryToken.create({
     *   data: {
     *     // ... data to create a PasswordRecoveryToken
     *   }
     * })
     * 
    **/
    create<T extends PasswordRecoveryTokenCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PasswordRecoveryTokenCreateArgs<ExtArgs>>
    ): Prisma__PasswordRecoveryTokenClient<$Types.GetResult<PasswordRecoveryTokenPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many PasswordRecoveryTokens.
     *     @param {PasswordRecoveryTokenCreateManyArgs} args - Arguments to create many PasswordRecoveryTokens.
     *     @example
     *     // Create many PasswordRecoveryTokens
     *     const passwordRecoveryToken = await prisma.passwordRecoveryToken.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PasswordRecoveryTokenCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PasswordRecoveryTokenCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PasswordRecoveryToken.
     * @param {PasswordRecoveryTokenDeleteArgs} args - Arguments to delete one PasswordRecoveryToken.
     * @example
     * // Delete one PasswordRecoveryToken
     * const PasswordRecoveryToken = await prisma.passwordRecoveryToken.delete({
     *   where: {
     *     // ... filter to delete one PasswordRecoveryToken
     *   }
     * })
     * 
    **/
    delete<T extends PasswordRecoveryTokenDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PasswordRecoveryTokenDeleteArgs<ExtArgs>>
    ): Prisma__PasswordRecoveryTokenClient<$Types.GetResult<PasswordRecoveryTokenPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one PasswordRecoveryToken.
     * @param {PasswordRecoveryTokenUpdateArgs} args - Arguments to update one PasswordRecoveryToken.
     * @example
     * // Update one PasswordRecoveryToken
     * const passwordRecoveryToken = await prisma.passwordRecoveryToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PasswordRecoveryTokenUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PasswordRecoveryTokenUpdateArgs<ExtArgs>>
    ): Prisma__PasswordRecoveryTokenClient<$Types.GetResult<PasswordRecoveryTokenPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more PasswordRecoveryTokens.
     * @param {PasswordRecoveryTokenDeleteManyArgs} args - Arguments to filter PasswordRecoveryTokens to delete.
     * @example
     * // Delete a few PasswordRecoveryTokens
     * const { count } = await prisma.passwordRecoveryToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PasswordRecoveryTokenDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PasswordRecoveryTokenDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PasswordRecoveryTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordRecoveryTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PasswordRecoveryTokens
     * const passwordRecoveryToken = await prisma.passwordRecoveryToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PasswordRecoveryTokenUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PasswordRecoveryTokenUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PasswordRecoveryToken.
     * @param {PasswordRecoveryTokenUpsertArgs} args - Arguments to update or create a PasswordRecoveryToken.
     * @example
     * // Update or create a PasswordRecoveryToken
     * const passwordRecoveryToken = await prisma.passwordRecoveryToken.upsert({
     *   create: {
     *     // ... data to create a PasswordRecoveryToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PasswordRecoveryToken we want to update
     *   }
     * })
    **/
    upsert<T extends PasswordRecoveryTokenUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PasswordRecoveryTokenUpsertArgs<ExtArgs>>
    ): Prisma__PasswordRecoveryTokenClient<$Types.GetResult<PasswordRecoveryTokenPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of PasswordRecoveryTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordRecoveryTokenCountArgs} args - Arguments to filter PasswordRecoveryTokens to count.
     * @example
     * // Count the number of PasswordRecoveryTokens
     * const count = await prisma.passwordRecoveryToken.count({
     *   where: {
     *     // ... the filter for the PasswordRecoveryTokens we want to count
     *   }
     * })
    **/
    count<T extends PasswordRecoveryTokenCountArgs>(
      args?: Subset<T, PasswordRecoveryTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PasswordRecoveryTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PasswordRecoveryToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordRecoveryTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PasswordRecoveryTokenAggregateArgs>(args: Subset<T, PasswordRecoveryTokenAggregateArgs>): Prisma.PrismaPromise<GetPasswordRecoveryTokenAggregateType<T>>

    /**
     * Group by PasswordRecoveryToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordRecoveryTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PasswordRecoveryTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PasswordRecoveryTokenGroupByArgs['orderBy'] }
        : { orderBy?: PasswordRecoveryTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PasswordRecoveryTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPasswordRecoveryTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for PasswordRecoveryToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PasswordRecoveryTokenClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * PasswordRecoveryToken base type for findUnique actions
   */
  export type PasswordRecoveryTokenFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordRecoveryToken
     */
    select?: PasswordRecoveryTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PasswordRecoveryTokenInclude<ExtArgs> | null
    /**
     * Filter, which PasswordRecoveryToken to fetch.
     */
    where: PasswordRecoveryTokenWhereUniqueInput
  }

  /**
   * PasswordRecoveryToken findUnique
   */
  export interface PasswordRecoveryTokenFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends PasswordRecoveryTokenFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PasswordRecoveryToken findUniqueOrThrow
   */
  export type PasswordRecoveryTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordRecoveryToken
     */
    select?: PasswordRecoveryTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PasswordRecoveryTokenInclude<ExtArgs> | null
    /**
     * Filter, which PasswordRecoveryToken to fetch.
     */
    where: PasswordRecoveryTokenWhereUniqueInput
  }


  /**
   * PasswordRecoveryToken base type for findFirst actions
   */
  export type PasswordRecoveryTokenFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordRecoveryToken
     */
    select?: PasswordRecoveryTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PasswordRecoveryTokenInclude<ExtArgs> | null
    /**
     * Filter, which PasswordRecoveryToken to fetch.
     */
    where?: PasswordRecoveryTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordRecoveryTokens to fetch.
     */
    orderBy?: Enumerable<PasswordRecoveryTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordRecoveryTokens.
     */
    cursor?: PasswordRecoveryTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordRecoveryTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordRecoveryTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordRecoveryTokens.
     */
    distinct?: Enumerable<PasswordRecoveryTokenScalarFieldEnum>
  }

  /**
   * PasswordRecoveryToken findFirst
   */
  export interface PasswordRecoveryTokenFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends PasswordRecoveryTokenFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PasswordRecoveryToken findFirstOrThrow
   */
  export type PasswordRecoveryTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordRecoveryToken
     */
    select?: PasswordRecoveryTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PasswordRecoveryTokenInclude<ExtArgs> | null
    /**
     * Filter, which PasswordRecoveryToken to fetch.
     */
    where?: PasswordRecoveryTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordRecoveryTokens to fetch.
     */
    orderBy?: Enumerable<PasswordRecoveryTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordRecoveryTokens.
     */
    cursor?: PasswordRecoveryTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordRecoveryTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordRecoveryTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordRecoveryTokens.
     */
    distinct?: Enumerable<PasswordRecoveryTokenScalarFieldEnum>
  }


  /**
   * PasswordRecoveryToken findMany
   */
  export type PasswordRecoveryTokenFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordRecoveryToken
     */
    select?: PasswordRecoveryTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PasswordRecoveryTokenInclude<ExtArgs> | null
    /**
     * Filter, which PasswordRecoveryTokens to fetch.
     */
    where?: PasswordRecoveryTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordRecoveryTokens to fetch.
     */
    orderBy?: Enumerable<PasswordRecoveryTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PasswordRecoveryTokens.
     */
    cursor?: PasswordRecoveryTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordRecoveryTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordRecoveryTokens.
     */
    skip?: number
    distinct?: Enumerable<PasswordRecoveryTokenScalarFieldEnum>
  }


  /**
   * PasswordRecoveryToken create
   */
  export type PasswordRecoveryTokenCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordRecoveryToken
     */
    select?: PasswordRecoveryTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PasswordRecoveryTokenInclude<ExtArgs> | null
    /**
     * The data needed to create a PasswordRecoveryToken.
     */
    data: XOR<PasswordRecoveryTokenCreateInput, PasswordRecoveryTokenUncheckedCreateInput>
  }


  /**
   * PasswordRecoveryToken createMany
   */
  export type PasswordRecoveryTokenCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PasswordRecoveryTokens.
     */
    data: Enumerable<PasswordRecoveryTokenCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * PasswordRecoveryToken update
   */
  export type PasswordRecoveryTokenUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordRecoveryToken
     */
    select?: PasswordRecoveryTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PasswordRecoveryTokenInclude<ExtArgs> | null
    /**
     * The data needed to update a PasswordRecoveryToken.
     */
    data: XOR<PasswordRecoveryTokenUpdateInput, PasswordRecoveryTokenUncheckedUpdateInput>
    /**
     * Choose, which PasswordRecoveryToken to update.
     */
    where: PasswordRecoveryTokenWhereUniqueInput
  }


  /**
   * PasswordRecoveryToken updateMany
   */
  export type PasswordRecoveryTokenUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PasswordRecoveryTokens.
     */
    data: XOR<PasswordRecoveryTokenUpdateManyMutationInput, PasswordRecoveryTokenUncheckedUpdateManyInput>
    /**
     * Filter which PasswordRecoveryTokens to update
     */
    where?: PasswordRecoveryTokenWhereInput
  }


  /**
   * PasswordRecoveryToken upsert
   */
  export type PasswordRecoveryTokenUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordRecoveryToken
     */
    select?: PasswordRecoveryTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PasswordRecoveryTokenInclude<ExtArgs> | null
    /**
     * The filter to search for the PasswordRecoveryToken to update in case it exists.
     */
    where: PasswordRecoveryTokenWhereUniqueInput
    /**
     * In case the PasswordRecoveryToken found by the `where` argument doesn't exist, create a new PasswordRecoveryToken with this data.
     */
    create: XOR<PasswordRecoveryTokenCreateInput, PasswordRecoveryTokenUncheckedCreateInput>
    /**
     * In case the PasswordRecoveryToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PasswordRecoveryTokenUpdateInput, PasswordRecoveryTokenUncheckedUpdateInput>
  }


  /**
   * PasswordRecoveryToken delete
   */
  export type PasswordRecoveryTokenDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordRecoveryToken
     */
    select?: PasswordRecoveryTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PasswordRecoveryTokenInclude<ExtArgs> | null
    /**
     * Filter which PasswordRecoveryToken to delete.
     */
    where: PasswordRecoveryTokenWhereUniqueInput
  }


  /**
   * PasswordRecoveryToken deleteMany
   */
  export type PasswordRecoveryTokenDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordRecoveryTokens to delete
     */
    where?: PasswordRecoveryTokenWhereInput
  }


  /**
   * PasswordRecoveryToken without action
   */
  export type PasswordRecoveryTokenArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordRecoveryToken
     */
    select?: PasswordRecoveryTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PasswordRecoveryTokenInclude<ExtArgs> | null
  }



  /**
   * Model EmailVerificationToken
   */


  export type AggregateEmailVerificationToken = {
    _count: EmailVerificationTokenCountAggregateOutputType | null
    _min: EmailVerificationTokenMinAggregateOutputType | null
    _max: EmailVerificationTokenMaxAggregateOutputType | null
  }

  export type EmailVerificationTokenMinAggregateOutputType = {
    id: string | null
    email: string | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailVerificationTokenMaxAggregateOutputType = {
    id: string | null
    email: string | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailVerificationTokenCountAggregateOutputType = {
    id: number
    email: number
    token: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmailVerificationTokenMinAggregateInputType = {
    id?: true
    email?: true
    token?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailVerificationTokenMaxAggregateInputType = {
    id?: true
    email?: true
    token?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailVerificationTokenCountAggregateInputType = {
    id?: true
    email?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmailVerificationTokenAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailVerificationToken to aggregate.
     */
    where?: EmailVerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailVerificationTokens to fetch.
     */
    orderBy?: Enumerable<EmailVerificationTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailVerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailVerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailVerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailVerificationTokens
    **/
    _count?: true | EmailVerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailVerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailVerificationTokenMaxAggregateInputType
  }

  export type GetEmailVerificationTokenAggregateType<T extends EmailVerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailVerificationToken[P]>
      : GetScalarType<T[P], AggregateEmailVerificationToken[P]>
  }




  export type EmailVerificationTokenGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: EmailVerificationTokenWhereInput
    orderBy?: Enumerable<EmailVerificationTokenOrderByWithAggregationInput>
    by: EmailVerificationTokenScalarFieldEnum[]
    having?: EmailVerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailVerificationTokenCountAggregateInputType | true
    _min?: EmailVerificationTokenMinAggregateInputType
    _max?: EmailVerificationTokenMaxAggregateInputType
  }


  export type EmailVerificationTokenGroupByOutputType = {
    id: string
    email: string
    token: string
    createdAt: Date
    updatedAt: Date
    _count: EmailVerificationTokenCountAggregateOutputType | null
    _min: EmailVerificationTokenMinAggregateOutputType | null
    _max: EmailVerificationTokenMaxAggregateOutputType | null
  }

  type GetEmailVerificationTokenGroupByPayload<T extends EmailVerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<EmailVerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailVerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailVerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], EmailVerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type EmailVerificationTokenSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["emailVerificationToken"]>

  export type EmailVerificationTokenSelectScalar = {
    id?: boolean
    email?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  type EmailVerificationTokenGetPayload<S extends boolean | null | undefined | EmailVerificationTokenArgs> = $Types.GetResult<EmailVerificationTokenPayload, S>

  type EmailVerificationTokenCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<EmailVerificationTokenFindManyArgs, 'select' | 'include'> & {
      select?: EmailVerificationTokenCountAggregateInputType | true
    }

  export interface EmailVerificationTokenDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailVerificationToken'], meta: { name: 'EmailVerificationToken' } }
    /**
     * Find zero or one EmailVerificationToken that matches the filter.
     * @param {EmailVerificationTokenFindUniqueArgs} args - Arguments to find a EmailVerificationToken
     * @example
     * // Get one EmailVerificationToken
     * const emailVerificationToken = await prisma.emailVerificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EmailVerificationTokenFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EmailVerificationTokenFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'EmailVerificationToken'> extends True ? Prisma__EmailVerificationTokenClient<$Types.GetResult<EmailVerificationTokenPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__EmailVerificationTokenClient<$Types.GetResult<EmailVerificationTokenPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one EmailVerificationToken that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EmailVerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a EmailVerificationToken
     * @example
     * // Get one EmailVerificationToken
     * const emailVerificationToken = await prisma.emailVerificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EmailVerificationTokenFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EmailVerificationTokenFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EmailVerificationTokenClient<$Types.GetResult<EmailVerificationTokenPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first EmailVerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationTokenFindFirstArgs} args - Arguments to find a EmailVerificationToken
     * @example
     * // Get one EmailVerificationToken
     * const emailVerificationToken = await prisma.emailVerificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EmailVerificationTokenFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EmailVerificationTokenFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'EmailVerificationToken'> extends True ? Prisma__EmailVerificationTokenClient<$Types.GetResult<EmailVerificationTokenPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__EmailVerificationTokenClient<$Types.GetResult<EmailVerificationTokenPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first EmailVerificationToken that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationTokenFindFirstOrThrowArgs} args - Arguments to find a EmailVerificationToken
     * @example
     * // Get one EmailVerificationToken
     * const emailVerificationToken = await prisma.emailVerificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EmailVerificationTokenFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EmailVerificationTokenFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EmailVerificationTokenClient<$Types.GetResult<EmailVerificationTokenPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more EmailVerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationTokenFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailVerificationTokens
     * const emailVerificationTokens = await prisma.emailVerificationToken.findMany()
     * 
     * // Get first 10 EmailVerificationTokens
     * const emailVerificationTokens = await prisma.emailVerificationToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailVerificationTokenWithIdOnly = await prisma.emailVerificationToken.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EmailVerificationTokenFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmailVerificationTokenFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<EmailVerificationTokenPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a EmailVerificationToken.
     * @param {EmailVerificationTokenCreateArgs} args - Arguments to create a EmailVerificationToken.
     * @example
     * // Create one EmailVerificationToken
     * const EmailVerificationToken = await prisma.emailVerificationToken.create({
     *   data: {
     *     // ... data to create a EmailVerificationToken
     *   }
     * })
     * 
    **/
    create<T extends EmailVerificationTokenCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EmailVerificationTokenCreateArgs<ExtArgs>>
    ): Prisma__EmailVerificationTokenClient<$Types.GetResult<EmailVerificationTokenPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many EmailVerificationTokens.
     *     @param {EmailVerificationTokenCreateManyArgs} args - Arguments to create many EmailVerificationTokens.
     *     @example
     *     // Create many EmailVerificationTokens
     *     const emailVerificationToken = await prisma.emailVerificationToken.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EmailVerificationTokenCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmailVerificationTokenCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a EmailVerificationToken.
     * @param {EmailVerificationTokenDeleteArgs} args - Arguments to delete one EmailVerificationToken.
     * @example
     * // Delete one EmailVerificationToken
     * const EmailVerificationToken = await prisma.emailVerificationToken.delete({
     *   where: {
     *     // ... filter to delete one EmailVerificationToken
     *   }
     * })
     * 
    **/
    delete<T extends EmailVerificationTokenDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EmailVerificationTokenDeleteArgs<ExtArgs>>
    ): Prisma__EmailVerificationTokenClient<$Types.GetResult<EmailVerificationTokenPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one EmailVerificationToken.
     * @param {EmailVerificationTokenUpdateArgs} args - Arguments to update one EmailVerificationToken.
     * @example
     * // Update one EmailVerificationToken
     * const emailVerificationToken = await prisma.emailVerificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EmailVerificationTokenUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EmailVerificationTokenUpdateArgs<ExtArgs>>
    ): Prisma__EmailVerificationTokenClient<$Types.GetResult<EmailVerificationTokenPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more EmailVerificationTokens.
     * @param {EmailVerificationTokenDeleteManyArgs} args - Arguments to filter EmailVerificationTokens to delete.
     * @example
     * // Delete a few EmailVerificationTokens
     * const { count } = await prisma.emailVerificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EmailVerificationTokenDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmailVerificationTokenDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailVerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailVerificationTokens
     * const emailVerificationToken = await prisma.emailVerificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EmailVerificationTokenUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EmailVerificationTokenUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EmailVerificationToken.
     * @param {EmailVerificationTokenUpsertArgs} args - Arguments to update or create a EmailVerificationToken.
     * @example
     * // Update or create a EmailVerificationToken
     * const emailVerificationToken = await prisma.emailVerificationToken.upsert({
     *   create: {
     *     // ... data to create a EmailVerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailVerificationToken we want to update
     *   }
     * })
    **/
    upsert<T extends EmailVerificationTokenUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EmailVerificationTokenUpsertArgs<ExtArgs>>
    ): Prisma__EmailVerificationTokenClient<$Types.GetResult<EmailVerificationTokenPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of EmailVerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationTokenCountArgs} args - Arguments to filter EmailVerificationTokens to count.
     * @example
     * // Count the number of EmailVerificationTokens
     * const count = await prisma.emailVerificationToken.count({
     *   where: {
     *     // ... the filter for the EmailVerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends EmailVerificationTokenCountArgs>(
      args?: Subset<T, EmailVerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailVerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailVerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailVerificationTokenAggregateArgs>(args: Subset<T, EmailVerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetEmailVerificationTokenAggregateType<T>>

    /**
     * Group by EmailVerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailVerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailVerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: EmailVerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailVerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailVerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EmailVerificationTokenClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * EmailVerificationToken base type for findUnique actions
   */
  export type EmailVerificationTokenFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationToken
     */
    select?: EmailVerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which EmailVerificationToken to fetch.
     */
    where: EmailVerificationTokenWhereUniqueInput
  }

  /**
   * EmailVerificationToken findUnique
   */
  export interface EmailVerificationTokenFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends EmailVerificationTokenFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * EmailVerificationToken findUniqueOrThrow
   */
  export type EmailVerificationTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationToken
     */
    select?: EmailVerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which EmailVerificationToken to fetch.
     */
    where: EmailVerificationTokenWhereUniqueInput
  }


  /**
   * EmailVerificationToken base type for findFirst actions
   */
  export type EmailVerificationTokenFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationToken
     */
    select?: EmailVerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which EmailVerificationToken to fetch.
     */
    where?: EmailVerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailVerificationTokens to fetch.
     */
    orderBy?: Enumerable<EmailVerificationTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailVerificationTokens.
     */
    cursor?: EmailVerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailVerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailVerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailVerificationTokens.
     */
    distinct?: Enumerable<EmailVerificationTokenScalarFieldEnum>
  }

  /**
   * EmailVerificationToken findFirst
   */
  export interface EmailVerificationTokenFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends EmailVerificationTokenFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * EmailVerificationToken findFirstOrThrow
   */
  export type EmailVerificationTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationToken
     */
    select?: EmailVerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which EmailVerificationToken to fetch.
     */
    where?: EmailVerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailVerificationTokens to fetch.
     */
    orderBy?: Enumerable<EmailVerificationTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailVerificationTokens.
     */
    cursor?: EmailVerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailVerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailVerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailVerificationTokens.
     */
    distinct?: Enumerable<EmailVerificationTokenScalarFieldEnum>
  }


  /**
   * EmailVerificationToken findMany
   */
  export type EmailVerificationTokenFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationToken
     */
    select?: EmailVerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which EmailVerificationTokens to fetch.
     */
    where?: EmailVerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailVerificationTokens to fetch.
     */
    orderBy?: Enumerable<EmailVerificationTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailVerificationTokens.
     */
    cursor?: EmailVerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailVerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailVerificationTokens.
     */
    skip?: number
    distinct?: Enumerable<EmailVerificationTokenScalarFieldEnum>
  }


  /**
   * EmailVerificationToken create
   */
  export type EmailVerificationTokenCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationToken
     */
    select?: EmailVerificationTokenSelect<ExtArgs> | null
    /**
     * The data needed to create a EmailVerificationToken.
     */
    data: XOR<EmailVerificationTokenCreateInput, EmailVerificationTokenUncheckedCreateInput>
  }


  /**
   * EmailVerificationToken createMany
   */
  export type EmailVerificationTokenCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmailVerificationTokens.
     */
    data: Enumerable<EmailVerificationTokenCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * EmailVerificationToken update
   */
  export type EmailVerificationTokenUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationToken
     */
    select?: EmailVerificationTokenSelect<ExtArgs> | null
    /**
     * The data needed to update a EmailVerificationToken.
     */
    data: XOR<EmailVerificationTokenUpdateInput, EmailVerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which EmailVerificationToken to update.
     */
    where: EmailVerificationTokenWhereUniqueInput
  }


  /**
   * EmailVerificationToken updateMany
   */
  export type EmailVerificationTokenUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmailVerificationTokens.
     */
    data: XOR<EmailVerificationTokenUpdateManyMutationInput, EmailVerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which EmailVerificationTokens to update
     */
    where?: EmailVerificationTokenWhereInput
  }


  /**
   * EmailVerificationToken upsert
   */
  export type EmailVerificationTokenUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationToken
     */
    select?: EmailVerificationTokenSelect<ExtArgs> | null
    /**
     * The filter to search for the EmailVerificationToken to update in case it exists.
     */
    where: EmailVerificationTokenWhereUniqueInput
    /**
     * In case the EmailVerificationToken found by the `where` argument doesn't exist, create a new EmailVerificationToken with this data.
     */
    create: XOR<EmailVerificationTokenCreateInput, EmailVerificationTokenUncheckedCreateInput>
    /**
     * In case the EmailVerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailVerificationTokenUpdateInput, EmailVerificationTokenUncheckedUpdateInput>
  }


  /**
   * EmailVerificationToken delete
   */
  export type EmailVerificationTokenDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationToken
     */
    select?: EmailVerificationTokenSelect<ExtArgs> | null
    /**
     * Filter which EmailVerificationToken to delete.
     */
    where: EmailVerificationTokenWhereUniqueInput
  }


  /**
   * EmailVerificationToken deleteMany
   */
  export type EmailVerificationTokenDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailVerificationTokens to delete
     */
    where?: EmailVerificationTokenWhereInput
  }


  /**
   * EmailVerificationToken without action
   */
  export type EmailVerificationTokenArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationToken
     */
    select?: EmailVerificationTokenSelect<ExtArgs> | null
  }



  /**
   * Model ZoomMeeting
   */


  export type AggregateZoomMeeting = {
    _count: ZoomMeetingCountAggregateOutputType | null
    _min: ZoomMeetingMinAggregateOutputType | null
    _max: ZoomMeetingMaxAggregateOutputType | null
  }

  export type ZoomMeetingMinAggregateOutputType = {
    id: string | null
    meetingId: string | null
    joinUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ZoomMeetingMaxAggregateOutputType = {
    id: string | null
    meetingId: string | null
    joinUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ZoomMeetingCountAggregateOutputType = {
    id: number
    meetingId: number
    joinUrl: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ZoomMeetingMinAggregateInputType = {
    id?: true
    meetingId?: true
    joinUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ZoomMeetingMaxAggregateInputType = {
    id?: true
    meetingId?: true
    joinUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ZoomMeetingCountAggregateInputType = {
    id?: true
    meetingId?: true
    joinUrl?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ZoomMeetingAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ZoomMeeting to aggregate.
     */
    where?: ZoomMeetingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ZoomMeetings to fetch.
     */
    orderBy?: Enumerable<ZoomMeetingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ZoomMeetingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ZoomMeetings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ZoomMeetings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ZoomMeetings
    **/
    _count?: true | ZoomMeetingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ZoomMeetingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ZoomMeetingMaxAggregateInputType
  }

  export type GetZoomMeetingAggregateType<T extends ZoomMeetingAggregateArgs> = {
        [P in keyof T & keyof AggregateZoomMeeting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateZoomMeeting[P]>
      : GetScalarType<T[P], AggregateZoomMeeting[P]>
  }




  export type ZoomMeetingGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ZoomMeetingWhereInput
    orderBy?: Enumerable<ZoomMeetingOrderByWithAggregationInput>
    by: ZoomMeetingScalarFieldEnum[]
    having?: ZoomMeetingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ZoomMeetingCountAggregateInputType | true
    _min?: ZoomMeetingMinAggregateInputType
    _max?: ZoomMeetingMaxAggregateInputType
  }


  export type ZoomMeetingGroupByOutputType = {
    id: string
    meetingId: string
    joinUrl: string
    createdAt: Date
    updatedAt: Date
    _count: ZoomMeetingCountAggregateOutputType | null
    _min: ZoomMeetingMinAggregateOutputType | null
    _max: ZoomMeetingMaxAggregateOutputType | null
  }

  type GetZoomMeetingGroupByPayload<T extends ZoomMeetingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ZoomMeetingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ZoomMeetingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ZoomMeetingGroupByOutputType[P]>
            : GetScalarType<T[P], ZoomMeetingGroupByOutputType[P]>
        }
      >
    >


  export type ZoomMeetingSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    meetingId?: boolean
    joinUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["zoomMeeting"]>

  export type ZoomMeetingSelectScalar = {
    id?: boolean
    meetingId?: boolean
    joinUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  type ZoomMeetingGetPayload<S extends boolean | null | undefined | ZoomMeetingArgs> = $Types.GetResult<ZoomMeetingPayload, S>

  type ZoomMeetingCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ZoomMeetingFindManyArgs, 'select' | 'include'> & {
      select?: ZoomMeetingCountAggregateInputType | true
    }

  export interface ZoomMeetingDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ZoomMeeting'], meta: { name: 'ZoomMeeting' } }
    /**
     * Find zero or one ZoomMeeting that matches the filter.
     * @param {ZoomMeetingFindUniqueArgs} args - Arguments to find a ZoomMeeting
     * @example
     * // Get one ZoomMeeting
     * const zoomMeeting = await prisma.zoomMeeting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ZoomMeetingFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ZoomMeetingFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ZoomMeeting'> extends True ? Prisma__ZoomMeetingClient<$Types.GetResult<ZoomMeetingPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ZoomMeetingClient<$Types.GetResult<ZoomMeetingPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one ZoomMeeting that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ZoomMeetingFindUniqueOrThrowArgs} args - Arguments to find a ZoomMeeting
     * @example
     * // Get one ZoomMeeting
     * const zoomMeeting = await prisma.zoomMeeting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ZoomMeetingFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ZoomMeetingFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ZoomMeetingClient<$Types.GetResult<ZoomMeetingPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first ZoomMeeting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoomMeetingFindFirstArgs} args - Arguments to find a ZoomMeeting
     * @example
     * // Get one ZoomMeeting
     * const zoomMeeting = await prisma.zoomMeeting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ZoomMeetingFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ZoomMeetingFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ZoomMeeting'> extends True ? Prisma__ZoomMeetingClient<$Types.GetResult<ZoomMeetingPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ZoomMeetingClient<$Types.GetResult<ZoomMeetingPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first ZoomMeeting that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoomMeetingFindFirstOrThrowArgs} args - Arguments to find a ZoomMeeting
     * @example
     * // Get one ZoomMeeting
     * const zoomMeeting = await prisma.zoomMeeting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ZoomMeetingFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ZoomMeetingFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ZoomMeetingClient<$Types.GetResult<ZoomMeetingPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more ZoomMeetings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoomMeetingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ZoomMeetings
     * const zoomMeetings = await prisma.zoomMeeting.findMany()
     * 
     * // Get first 10 ZoomMeetings
     * const zoomMeetings = await prisma.zoomMeeting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const zoomMeetingWithIdOnly = await prisma.zoomMeeting.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ZoomMeetingFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ZoomMeetingFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ZoomMeetingPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a ZoomMeeting.
     * @param {ZoomMeetingCreateArgs} args - Arguments to create a ZoomMeeting.
     * @example
     * // Create one ZoomMeeting
     * const ZoomMeeting = await prisma.zoomMeeting.create({
     *   data: {
     *     // ... data to create a ZoomMeeting
     *   }
     * })
     * 
    **/
    create<T extends ZoomMeetingCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ZoomMeetingCreateArgs<ExtArgs>>
    ): Prisma__ZoomMeetingClient<$Types.GetResult<ZoomMeetingPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many ZoomMeetings.
     *     @param {ZoomMeetingCreateManyArgs} args - Arguments to create many ZoomMeetings.
     *     @example
     *     // Create many ZoomMeetings
     *     const zoomMeeting = await prisma.zoomMeeting.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ZoomMeetingCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ZoomMeetingCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ZoomMeeting.
     * @param {ZoomMeetingDeleteArgs} args - Arguments to delete one ZoomMeeting.
     * @example
     * // Delete one ZoomMeeting
     * const ZoomMeeting = await prisma.zoomMeeting.delete({
     *   where: {
     *     // ... filter to delete one ZoomMeeting
     *   }
     * })
     * 
    **/
    delete<T extends ZoomMeetingDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ZoomMeetingDeleteArgs<ExtArgs>>
    ): Prisma__ZoomMeetingClient<$Types.GetResult<ZoomMeetingPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one ZoomMeeting.
     * @param {ZoomMeetingUpdateArgs} args - Arguments to update one ZoomMeeting.
     * @example
     * // Update one ZoomMeeting
     * const zoomMeeting = await prisma.zoomMeeting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ZoomMeetingUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ZoomMeetingUpdateArgs<ExtArgs>>
    ): Prisma__ZoomMeetingClient<$Types.GetResult<ZoomMeetingPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more ZoomMeetings.
     * @param {ZoomMeetingDeleteManyArgs} args - Arguments to filter ZoomMeetings to delete.
     * @example
     * // Delete a few ZoomMeetings
     * const { count } = await prisma.zoomMeeting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ZoomMeetingDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ZoomMeetingDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ZoomMeetings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoomMeetingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ZoomMeetings
     * const zoomMeeting = await prisma.zoomMeeting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ZoomMeetingUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ZoomMeetingUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ZoomMeeting.
     * @param {ZoomMeetingUpsertArgs} args - Arguments to update or create a ZoomMeeting.
     * @example
     * // Update or create a ZoomMeeting
     * const zoomMeeting = await prisma.zoomMeeting.upsert({
     *   create: {
     *     // ... data to create a ZoomMeeting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ZoomMeeting we want to update
     *   }
     * })
    **/
    upsert<T extends ZoomMeetingUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ZoomMeetingUpsertArgs<ExtArgs>>
    ): Prisma__ZoomMeetingClient<$Types.GetResult<ZoomMeetingPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of ZoomMeetings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoomMeetingCountArgs} args - Arguments to filter ZoomMeetings to count.
     * @example
     * // Count the number of ZoomMeetings
     * const count = await prisma.zoomMeeting.count({
     *   where: {
     *     // ... the filter for the ZoomMeetings we want to count
     *   }
     * })
    **/
    count<T extends ZoomMeetingCountArgs>(
      args?: Subset<T, ZoomMeetingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ZoomMeetingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ZoomMeeting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoomMeetingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ZoomMeetingAggregateArgs>(args: Subset<T, ZoomMeetingAggregateArgs>): Prisma.PrismaPromise<GetZoomMeetingAggregateType<T>>

    /**
     * Group by ZoomMeeting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoomMeetingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ZoomMeetingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ZoomMeetingGroupByArgs['orderBy'] }
        : { orderBy?: ZoomMeetingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ZoomMeetingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetZoomMeetingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ZoomMeeting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ZoomMeetingClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ZoomMeeting base type for findUnique actions
   */
  export type ZoomMeetingFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoomMeeting
     */
    select?: ZoomMeetingSelect<ExtArgs> | null
    /**
     * Filter, which ZoomMeeting to fetch.
     */
    where: ZoomMeetingWhereUniqueInput
  }

  /**
   * ZoomMeeting findUnique
   */
  export interface ZoomMeetingFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ZoomMeetingFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ZoomMeeting findUniqueOrThrow
   */
  export type ZoomMeetingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoomMeeting
     */
    select?: ZoomMeetingSelect<ExtArgs> | null
    /**
     * Filter, which ZoomMeeting to fetch.
     */
    where: ZoomMeetingWhereUniqueInput
  }


  /**
   * ZoomMeeting base type for findFirst actions
   */
  export type ZoomMeetingFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoomMeeting
     */
    select?: ZoomMeetingSelect<ExtArgs> | null
    /**
     * Filter, which ZoomMeeting to fetch.
     */
    where?: ZoomMeetingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ZoomMeetings to fetch.
     */
    orderBy?: Enumerable<ZoomMeetingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ZoomMeetings.
     */
    cursor?: ZoomMeetingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ZoomMeetings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ZoomMeetings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ZoomMeetings.
     */
    distinct?: Enumerable<ZoomMeetingScalarFieldEnum>
  }

  /**
   * ZoomMeeting findFirst
   */
  export interface ZoomMeetingFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ZoomMeetingFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ZoomMeeting findFirstOrThrow
   */
  export type ZoomMeetingFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoomMeeting
     */
    select?: ZoomMeetingSelect<ExtArgs> | null
    /**
     * Filter, which ZoomMeeting to fetch.
     */
    where?: ZoomMeetingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ZoomMeetings to fetch.
     */
    orderBy?: Enumerable<ZoomMeetingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ZoomMeetings.
     */
    cursor?: ZoomMeetingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ZoomMeetings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ZoomMeetings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ZoomMeetings.
     */
    distinct?: Enumerable<ZoomMeetingScalarFieldEnum>
  }


  /**
   * ZoomMeeting findMany
   */
  export type ZoomMeetingFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoomMeeting
     */
    select?: ZoomMeetingSelect<ExtArgs> | null
    /**
     * Filter, which ZoomMeetings to fetch.
     */
    where?: ZoomMeetingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ZoomMeetings to fetch.
     */
    orderBy?: Enumerable<ZoomMeetingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ZoomMeetings.
     */
    cursor?: ZoomMeetingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ZoomMeetings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ZoomMeetings.
     */
    skip?: number
    distinct?: Enumerable<ZoomMeetingScalarFieldEnum>
  }


  /**
   * ZoomMeeting create
   */
  export type ZoomMeetingCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoomMeeting
     */
    select?: ZoomMeetingSelect<ExtArgs> | null
    /**
     * The data needed to create a ZoomMeeting.
     */
    data: XOR<ZoomMeetingCreateInput, ZoomMeetingUncheckedCreateInput>
  }


  /**
   * ZoomMeeting createMany
   */
  export type ZoomMeetingCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ZoomMeetings.
     */
    data: Enumerable<ZoomMeetingCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ZoomMeeting update
   */
  export type ZoomMeetingUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoomMeeting
     */
    select?: ZoomMeetingSelect<ExtArgs> | null
    /**
     * The data needed to update a ZoomMeeting.
     */
    data: XOR<ZoomMeetingUpdateInput, ZoomMeetingUncheckedUpdateInput>
    /**
     * Choose, which ZoomMeeting to update.
     */
    where: ZoomMeetingWhereUniqueInput
  }


  /**
   * ZoomMeeting updateMany
   */
  export type ZoomMeetingUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ZoomMeetings.
     */
    data: XOR<ZoomMeetingUpdateManyMutationInput, ZoomMeetingUncheckedUpdateManyInput>
    /**
     * Filter which ZoomMeetings to update
     */
    where?: ZoomMeetingWhereInput
  }


  /**
   * ZoomMeeting upsert
   */
  export type ZoomMeetingUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoomMeeting
     */
    select?: ZoomMeetingSelect<ExtArgs> | null
    /**
     * The filter to search for the ZoomMeeting to update in case it exists.
     */
    where: ZoomMeetingWhereUniqueInput
    /**
     * In case the ZoomMeeting found by the `where` argument doesn't exist, create a new ZoomMeeting with this data.
     */
    create: XOR<ZoomMeetingCreateInput, ZoomMeetingUncheckedCreateInput>
    /**
     * In case the ZoomMeeting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ZoomMeetingUpdateInput, ZoomMeetingUncheckedUpdateInput>
  }


  /**
   * ZoomMeeting delete
   */
  export type ZoomMeetingDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoomMeeting
     */
    select?: ZoomMeetingSelect<ExtArgs> | null
    /**
     * Filter which ZoomMeeting to delete.
     */
    where: ZoomMeetingWhereUniqueInput
  }


  /**
   * ZoomMeeting deleteMany
   */
  export type ZoomMeetingDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ZoomMeetings to delete
     */
    where?: ZoomMeetingWhereInput
  }


  /**
   * ZoomMeeting without action
   */
  export type ZoomMeetingArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoomMeeting
     */
    select?: ZoomMeetingSelect<ExtArgs> | null
  }



  /**
   * Model Video
   */


  export type AggregateVideo = {
    _count: VideoCountAggregateOutputType | null
    _min: VideoMinAggregateOutputType | null
    _max: VideoMaxAggregateOutputType | null
  }

  export type VideoMinAggregateOutputType = {
    id: string | null
    url: string | null
    title: string | null
    date: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VideoMaxAggregateOutputType = {
    id: string | null
    url: string | null
    title: string | null
    date: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VideoCountAggregateOutputType = {
    id: number
    url: number
    title: number
    date: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VideoMinAggregateInputType = {
    id?: true
    url?: true
    title?: true
    date?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VideoMaxAggregateInputType = {
    id?: true
    url?: true
    title?: true
    date?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VideoCountAggregateInputType = {
    id?: true
    url?: true
    title?: true
    date?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VideoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Video to aggregate.
     */
    where?: VideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Videos to fetch.
     */
    orderBy?: Enumerable<VideoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Videos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Videos
    **/
    _count?: true | VideoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VideoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VideoMaxAggregateInputType
  }

  export type GetVideoAggregateType<T extends VideoAggregateArgs> = {
        [P in keyof T & keyof AggregateVideo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVideo[P]>
      : GetScalarType<T[P], AggregateVideo[P]>
  }




  export type VideoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: VideoWhereInput
    orderBy?: Enumerable<VideoOrderByWithAggregationInput>
    by: VideoScalarFieldEnum[]
    having?: VideoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VideoCountAggregateInputType | true
    _min?: VideoMinAggregateInputType
    _max?: VideoMaxAggregateInputType
  }


  export type VideoGroupByOutputType = {
    id: string
    url: string
    title: string
    date: Date
    createdAt: Date
    updatedAt: Date
    _count: VideoCountAggregateOutputType | null
    _min: VideoMinAggregateOutputType | null
    _max: VideoMaxAggregateOutputType | null
  }

  type GetVideoGroupByPayload<T extends VideoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<VideoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VideoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VideoGroupByOutputType[P]>
            : GetScalarType<T[P], VideoGroupByOutputType[P]>
        }
      >
    >


  export type VideoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    title?: boolean
    date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    courses?: boolean | Video$coursesArgs<ExtArgs>
    _count?: boolean | VideoCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["video"]>

  export type VideoSelectScalar = {
    id?: boolean
    url?: boolean
    title?: boolean
    date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VideoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    courses?: boolean | Video$coursesArgs<ExtArgs>
    _count?: boolean | VideoCountOutputTypeArgs<ExtArgs>
  }


  type VideoGetPayload<S extends boolean | null | undefined | VideoArgs> = $Types.GetResult<VideoPayload, S>

  type VideoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<VideoFindManyArgs, 'select' | 'include'> & {
      select?: VideoCountAggregateInputType | true
    }

  export interface VideoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Video'], meta: { name: 'Video' } }
    /**
     * Find zero or one Video that matches the filter.
     * @param {VideoFindUniqueArgs} args - Arguments to find a Video
     * @example
     * // Get one Video
     * const video = await prisma.video.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VideoFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VideoFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Video'> extends True ? Prisma__VideoClient<$Types.GetResult<VideoPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__VideoClient<$Types.GetResult<VideoPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Video that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {VideoFindUniqueOrThrowArgs} args - Arguments to find a Video
     * @example
     * // Get one Video
     * const video = await prisma.video.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VideoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VideoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__VideoClient<$Types.GetResult<VideoPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Video that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoFindFirstArgs} args - Arguments to find a Video
     * @example
     * // Get one Video
     * const video = await prisma.video.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VideoFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VideoFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Video'> extends True ? Prisma__VideoClient<$Types.GetResult<VideoPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__VideoClient<$Types.GetResult<VideoPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Video that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoFindFirstOrThrowArgs} args - Arguments to find a Video
     * @example
     * // Get one Video
     * const video = await prisma.video.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VideoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VideoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__VideoClient<$Types.GetResult<VideoPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Videos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Videos
     * const videos = await prisma.video.findMany()
     * 
     * // Get first 10 Videos
     * const videos = await prisma.video.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const videoWithIdOnly = await prisma.video.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VideoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VideoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<VideoPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Video.
     * @param {VideoCreateArgs} args - Arguments to create a Video.
     * @example
     * // Create one Video
     * const Video = await prisma.video.create({
     *   data: {
     *     // ... data to create a Video
     *   }
     * })
     * 
    **/
    create<T extends VideoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, VideoCreateArgs<ExtArgs>>
    ): Prisma__VideoClient<$Types.GetResult<VideoPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Videos.
     *     @param {VideoCreateManyArgs} args - Arguments to create many Videos.
     *     @example
     *     // Create many Videos
     *     const video = await prisma.video.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VideoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VideoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Video.
     * @param {VideoDeleteArgs} args - Arguments to delete one Video.
     * @example
     * // Delete one Video
     * const Video = await prisma.video.delete({
     *   where: {
     *     // ... filter to delete one Video
     *   }
     * })
     * 
    **/
    delete<T extends VideoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, VideoDeleteArgs<ExtArgs>>
    ): Prisma__VideoClient<$Types.GetResult<VideoPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Video.
     * @param {VideoUpdateArgs} args - Arguments to update one Video.
     * @example
     * // Update one Video
     * const video = await prisma.video.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VideoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, VideoUpdateArgs<ExtArgs>>
    ): Prisma__VideoClient<$Types.GetResult<VideoPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Videos.
     * @param {VideoDeleteManyArgs} args - Arguments to filter Videos to delete.
     * @example
     * // Delete a few Videos
     * const { count } = await prisma.video.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VideoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VideoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Videos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Videos
     * const video = await prisma.video.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VideoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, VideoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Video.
     * @param {VideoUpsertArgs} args - Arguments to update or create a Video.
     * @example
     * // Update or create a Video
     * const video = await prisma.video.upsert({
     *   create: {
     *     // ... data to create a Video
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Video we want to update
     *   }
     * })
    **/
    upsert<T extends VideoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, VideoUpsertArgs<ExtArgs>>
    ): Prisma__VideoClient<$Types.GetResult<VideoPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Videos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoCountArgs} args - Arguments to filter Videos to count.
     * @example
     * // Count the number of Videos
     * const count = await prisma.video.count({
     *   where: {
     *     // ... the filter for the Videos we want to count
     *   }
     * })
    **/
    count<T extends VideoCountArgs>(
      args?: Subset<T, VideoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VideoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Video.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VideoAggregateArgs>(args: Subset<T, VideoAggregateArgs>): Prisma.PrismaPromise<GetVideoAggregateType<T>>

    /**
     * Group by Video.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VideoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VideoGroupByArgs['orderBy'] }
        : { orderBy?: VideoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VideoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVideoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Video.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VideoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    courses<T extends Video$coursesArgs<ExtArgs> = {}>(args?: Subset<T, Video$coursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<VideosOnCoursesPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Video base type for findUnique actions
   */
  export type VideoFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Video to fetch.
     */
    where: VideoWhereUniqueInput
  }

  /**
   * Video findUnique
   */
  export interface VideoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends VideoFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Video findUniqueOrThrow
   */
  export type VideoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Video to fetch.
     */
    where: VideoWhereUniqueInput
  }


  /**
   * Video base type for findFirst actions
   */
  export type VideoFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Video to fetch.
     */
    where?: VideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Videos to fetch.
     */
    orderBy?: Enumerable<VideoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Videos.
     */
    cursor?: VideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Videos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Videos.
     */
    distinct?: Enumerable<VideoScalarFieldEnum>
  }

  /**
   * Video findFirst
   */
  export interface VideoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends VideoFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Video findFirstOrThrow
   */
  export type VideoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Video to fetch.
     */
    where?: VideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Videos to fetch.
     */
    orderBy?: Enumerable<VideoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Videos.
     */
    cursor?: VideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Videos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Videos.
     */
    distinct?: Enumerable<VideoScalarFieldEnum>
  }


  /**
   * Video findMany
   */
  export type VideoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Videos to fetch.
     */
    where?: VideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Videos to fetch.
     */
    orderBy?: Enumerable<VideoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Videos.
     */
    cursor?: VideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Videos.
     */
    skip?: number
    distinct?: Enumerable<VideoScalarFieldEnum>
  }


  /**
   * Video create
   */
  export type VideoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * The data needed to create a Video.
     */
    data: XOR<VideoCreateInput, VideoUncheckedCreateInput>
  }


  /**
   * Video createMany
   */
  export type VideoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Videos.
     */
    data: Enumerable<VideoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Video update
   */
  export type VideoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * The data needed to update a Video.
     */
    data: XOR<VideoUpdateInput, VideoUncheckedUpdateInput>
    /**
     * Choose, which Video to update.
     */
    where: VideoWhereUniqueInput
  }


  /**
   * Video updateMany
   */
  export type VideoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Videos.
     */
    data: XOR<VideoUpdateManyMutationInput, VideoUncheckedUpdateManyInput>
    /**
     * Filter which Videos to update
     */
    where?: VideoWhereInput
  }


  /**
   * Video upsert
   */
  export type VideoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * The filter to search for the Video to update in case it exists.
     */
    where: VideoWhereUniqueInput
    /**
     * In case the Video found by the `where` argument doesn't exist, create a new Video with this data.
     */
    create: XOR<VideoCreateInput, VideoUncheckedCreateInput>
    /**
     * In case the Video was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VideoUpdateInput, VideoUncheckedUpdateInput>
  }


  /**
   * Video delete
   */
  export type VideoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter which Video to delete.
     */
    where: VideoWhereUniqueInput
  }


  /**
   * Video deleteMany
   */
  export type VideoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Videos to delete
     */
    where?: VideoWhereInput
  }


  /**
   * Video.courses
   */
  export type Video$coursesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideosOnCourses
     */
    select?: VideosOnCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideosOnCoursesInclude<ExtArgs> | null
    where?: VideosOnCoursesWhereInput
    orderBy?: Enumerable<VideosOnCoursesOrderByWithRelationInput>
    cursor?: VideosOnCoursesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<VideosOnCoursesScalarFieldEnum>
  }


  /**
   * Video without action
   */
  export type VideoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideoInclude<ExtArgs> | null
  }



  /**
   * Model VideosOnCourses
   */


  export type AggregateVideosOnCourses = {
    _count: VideosOnCoursesCountAggregateOutputType | null
    _min: VideosOnCoursesMinAggregateOutputType | null
    _max: VideosOnCoursesMaxAggregateOutputType | null
  }

  export type VideosOnCoursesMinAggregateOutputType = {
    videoId: string | null
    courseId: string | null
  }

  export type VideosOnCoursesMaxAggregateOutputType = {
    videoId: string | null
    courseId: string | null
  }

  export type VideosOnCoursesCountAggregateOutputType = {
    videoId: number
    courseId: number
    _all: number
  }


  export type VideosOnCoursesMinAggregateInputType = {
    videoId?: true
    courseId?: true
  }

  export type VideosOnCoursesMaxAggregateInputType = {
    videoId?: true
    courseId?: true
  }

  export type VideosOnCoursesCountAggregateInputType = {
    videoId?: true
    courseId?: true
    _all?: true
  }

  export type VideosOnCoursesAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which VideosOnCourses to aggregate.
     */
    where?: VideosOnCoursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VideosOnCourses to fetch.
     */
    orderBy?: Enumerable<VideosOnCoursesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VideosOnCoursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VideosOnCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VideosOnCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VideosOnCourses
    **/
    _count?: true | VideosOnCoursesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VideosOnCoursesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VideosOnCoursesMaxAggregateInputType
  }

  export type GetVideosOnCoursesAggregateType<T extends VideosOnCoursesAggregateArgs> = {
        [P in keyof T & keyof AggregateVideosOnCourses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVideosOnCourses[P]>
      : GetScalarType<T[P], AggregateVideosOnCourses[P]>
  }




  export type VideosOnCoursesGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: VideosOnCoursesWhereInput
    orderBy?: Enumerable<VideosOnCoursesOrderByWithAggregationInput>
    by: VideosOnCoursesScalarFieldEnum[]
    having?: VideosOnCoursesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VideosOnCoursesCountAggregateInputType | true
    _min?: VideosOnCoursesMinAggregateInputType
    _max?: VideosOnCoursesMaxAggregateInputType
  }


  export type VideosOnCoursesGroupByOutputType = {
    videoId: string
    courseId: string
    _count: VideosOnCoursesCountAggregateOutputType | null
    _min: VideosOnCoursesMinAggregateOutputType | null
    _max: VideosOnCoursesMaxAggregateOutputType | null
  }

  type GetVideosOnCoursesGroupByPayload<T extends VideosOnCoursesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<VideosOnCoursesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VideosOnCoursesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VideosOnCoursesGroupByOutputType[P]>
            : GetScalarType<T[P], VideosOnCoursesGroupByOutputType[P]>
        }
      >
    >


  export type VideosOnCoursesSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    videoId?: boolean
    courseId?: boolean
    video?: boolean | VideoArgs<ExtArgs>
    course?: boolean | CourseArgs<ExtArgs>
  }, ExtArgs["result"]["videosOnCourses"]>

  export type VideosOnCoursesSelectScalar = {
    videoId?: boolean
    courseId?: boolean
  }

  export type VideosOnCoursesInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    video?: boolean | VideoArgs<ExtArgs>
    course?: boolean | CourseArgs<ExtArgs>
  }


  type VideosOnCoursesGetPayload<S extends boolean | null | undefined | VideosOnCoursesArgs> = $Types.GetResult<VideosOnCoursesPayload, S>

  type VideosOnCoursesCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<VideosOnCoursesFindManyArgs, 'select' | 'include'> & {
      select?: VideosOnCoursesCountAggregateInputType | true
    }

  export interface VideosOnCoursesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VideosOnCourses'], meta: { name: 'VideosOnCourses' } }
    /**
     * Find zero or one VideosOnCourses that matches the filter.
     * @param {VideosOnCoursesFindUniqueArgs} args - Arguments to find a VideosOnCourses
     * @example
     * // Get one VideosOnCourses
     * const videosOnCourses = await prisma.videosOnCourses.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VideosOnCoursesFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VideosOnCoursesFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'VideosOnCourses'> extends True ? Prisma__VideosOnCoursesClient<$Types.GetResult<VideosOnCoursesPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__VideosOnCoursesClient<$Types.GetResult<VideosOnCoursesPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one VideosOnCourses that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {VideosOnCoursesFindUniqueOrThrowArgs} args - Arguments to find a VideosOnCourses
     * @example
     * // Get one VideosOnCourses
     * const videosOnCourses = await prisma.videosOnCourses.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VideosOnCoursesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VideosOnCoursesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__VideosOnCoursesClient<$Types.GetResult<VideosOnCoursesPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first VideosOnCourses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideosOnCoursesFindFirstArgs} args - Arguments to find a VideosOnCourses
     * @example
     * // Get one VideosOnCourses
     * const videosOnCourses = await prisma.videosOnCourses.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VideosOnCoursesFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VideosOnCoursesFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'VideosOnCourses'> extends True ? Prisma__VideosOnCoursesClient<$Types.GetResult<VideosOnCoursesPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__VideosOnCoursesClient<$Types.GetResult<VideosOnCoursesPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first VideosOnCourses that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideosOnCoursesFindFirstOrThrowArgs} args - Arguments to find a VideosOnCourses
     * @example
     * // Get one VideosOnCourses
     * const videosOnCourses = await prisma.videosOnCourses.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VideosOnCoursesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VideosOnCoursesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__VideosOnCoursesClient<$Types.GetResult<VideosOnCoursesPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more VideosOnCourses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideosOnCoursesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VideosOnCourses
     * const videosOnCourses = await prisma.videosOnCourses.findMany()
     * 
     * // Get first 10 VideosOnCourses
     * const videosOnCourses = await prisma.videosOnCourses.findMany({ take: 10 })
     * 
     * // Only select the `videoId`
     * const videosOnCoursesWithVideoIdOnly = await prisma.videosOnCourses.findMany({ select: { videoId: true } })
     * 
    **/
    findMany<T extends VideosOnCoursesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VideosOnCoursesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<VideosOnCoursesPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a VideosOnCourses.
     * @param {VideosOnCoursesCreateArgs} args - Arguments to create a VideosOnCourses.
     * @example
     * // Create one VideosOnCourses
     * const VideosOnCourses = await prisma.videosOnCourses.create({
     *   data: {
     *     // ... data to create a VideosOnCourses
     *   }
     * })
     * 
    **/
    create<T extends VideosOnCoursesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, VideosOnCoursesCreateArgs<ExtArgs>>
    ): Prisma__VideosOnCoursesClient<$Types.GetResult<VideosOnCoursesPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many VideosOnCourses.
     *     @param {VideosOnCoursesCreateManyArgs} args - Arguments to create many VideosOnCourses.
     *     @example
     *     // Create many VideosOnCourses
     *     const videosOnCourses = await prisma.videosOnCourses.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VideosOnCoursesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VideosOnCoursesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a VideosOnCourses.
     * @param {VideosOnCoursesDeleteArgs} args - Arguments to delete one VideosOnCourses.
     * @example
     * // Delete one VideosOnCourses
     * const VideosOnCourses = await prisma.videosOnCourses.delete({
     *   where: {
     *     // ... filter to delete one VideosOnCourses
     *   }
     * })
     * 
    **/
    delete<T extends VideosOnCoursesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, VideosOnCoursesDeleteArgs<ExtArgs>>
    ): Prisma__VideosOnCoursesClient<$Types.GetResult<VideosOnCoursesPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one VideosOnCourses.
     * @param {VideosOnCoursesUpdateArgs} args - Arguments to update one VideosOnCourses.
     * @example
     * // Update one VideosOnCourses
     * const videosOnCourses = await prisma.videosOnCourses.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VideosOnCoursesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, VideosOnCoursesUpdateArgs<ExtArgs>>
    ): Prisma__VideosOnCoursesClient<$Types.GetResult<VideosOnCoursesPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more VideosOnCourses.
     * @param {VideosOnCoursesDeleteManyArgs} args - Arguments to filter VideosOnCourses to delete.
     * @example
     * // Delete a few VideosOnCourses
     * const { count } = await prisma.videosOnCourses.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VideosOnCoursesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VideosOnCoursesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VideosOnCourses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideosOnCoursesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VideosOnCourses
     * const videosOnCourses = await prisma.videosOnCourses.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VideosOnCoursesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, VideosOnCoursesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VideosOnCourses.
     * @param {VideosOnCoursesUpsertArgs} args - Arguments to update or create a VideosOnCourses.
     * @example
     * // Update or create a VideosOnCourses
     * const videosOnCourses = await prisma.videosOnCourses.upsert({
     *   create: {
     *     // ... data to create a VideosOnCourses
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VideosOnCourses we want to update
     *   }
     * })
    **/
    upsert<T extends VideosOnCoursesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, VideosOnCoursesUpsertArgs<ExtArgs>>
    ): Prisma__VideosOnCoursesClient<$Types.GetResult<VideosOnCoursesPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of VideosOnCourses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideosOnCoursesCountArgs} args - Arguments to filter VideosOnCourses to count.
     * @example
     * // Count the number of VideosOnCourses
     * const count = await prisma.videosOnCourses.count({
     *   where: {
     *     // ... the filter for the VideosOnCourses we want to count
     *   }
     * })
    **/
    count<T extends VideosOnCoursesCountArgs>(
      args?: Subset<T, VideosOnCoursesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VideosOnCoursesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VideosOnCourses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideosOnCoursesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VideosOnCoursesAggregateArgs>(args: Subset<T, VideosOnCoursesAggregateArgs>): Prisma.PrismaPromise<GetVideosOnCoursesAggregateType<T>>

    /**
     * Group by VideosOnCourses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideosOnCoursesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VideosOnCoursesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VideosOnCoursesGroupByArgs['orderBy'] }
        : { orderBy?: VideosOnCoursesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VideosOnCoursesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVideosOnCoursesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for VideosOnCourses.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VideosOnCoursesClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    video<T extends VideoArgs<ExtArgs> = {}>(args?: Subset<T, VideoArgs<ExtArgs>>): Prisma__VideoClient<$Types.GetResult<VideoPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    course<T extends CourseArgs<ExtArgs> = {}>(args?: Subset<T, CourseArgs<ExtArgs>>): Prisma__CourseClient<$Types.GetResult<CoursePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * VideosOnCourses base type for findUnique actions
   */
  export type VideosOnCoursesFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideosOnCourses
     */
    select?: VideosOnCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideosOnCoursesInclude<ExtArgs> | null
    /**
     * Filter, which VideosOnCourses to fetch.
     */
    where: VideosOnCoursesWhereUniqueInput
  }

  /**
   * VideosOnCourses findUnique
   */
  export interface VideosOnCoursesFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends VideosOnCoursesFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * VideosOnCourses findUniqueOrThrow
   */
  export type VideosOnCoursesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideosOnCourses
     */
    select?: VideosOnCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideosOnCoursesInclude<ExtArgs> | null
    /**
     * Filter, which VideosOnCourses to fetch.
     */
    where: VideosOnCoursesWhereUniqueInput
  }


  /**
   * VideosOnCourses base type for findFirst actions
   */
  export type VideosOnCoursesFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideosOnCourses
     */
    select?: VideosOnCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideosOnCoursesInclude<ExtArgs> | null
    /**
     * Filter, which VideosOnCourses to fetch.
     */
    where?: VideosOnCoursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VideosOnCourses to fetch.
     */
    orderBy?: Enumerable<VideosOnCoursesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VideosOnCourses.
     */
    cursor?: VideosOnCoursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VideosOnCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VideosOnCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VideosOnCourses.
     */
    distinct?: Enumerable<VideosOnCoursesScalarFieldEnum>
  }

  /**
   * VideosOnCourses findFirst
   */
  export interface VideosOnCoursesFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends VideosOnCoursesFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * VideosOnCourses findFirstOrThrow
   */
  export type VideosOnCoursesFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideosOnCourses
     */
    select?: VideosOnCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideosOnCoursesInclude<ExtArgs> | null
    /**
     * Filter, which VideosOnCourses to fetch.
     */
    where?: VideosOnCoursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VideosOnCourses to fetch.
     */
    orderBy?: Enumerable<VideosOnCoursesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VideosOnCourses.
     */
    cursor?: VideosOnCoursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VideosOnCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VideosOnCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VideosOnCourses.
     */
    distinct?: Enumerable<VideosOnCoursesScalarFieldEnum>
  }


  /**
   * VideosOnCourses findMany
   */
  export type VideosOnCoursesFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideosOnCourses
     */
    select?: VideosOnCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideosOnCoursesInclude<ExtArgs> | null
    /**
     * Filter, which VideosOnCourses to fetch.
     */
    where?: VideosOnCoursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VideosOnCourses to fetch.
     */
    orderBy?: Enumerable<VideosOnCoursesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VideosOnCourses.
     */
    cursor?: VideosOnCoursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VideosOnCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VideosOnCourses.
     */
    skip?: number
    distinct?: Enumerable<VideosOnCoursesScalarFieldEnum>
  }


  /**
   * VideosOnCourses create
   */
  export type VideosOnCoursesCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideosOnCourses
     */
    select?: VideosOnCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideosOnCoursesInclude<ExtArgs> | null
    /**
     * The data needed to create a VideosOnCourses.
     */
    data: XOR<VideosOnCoursesCreateInput, VideosOnCoursesUncheckedCreateInput>
  }


  /**
   * VideosOnCourses createMany
   */
  export type VideosOnCoursesCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VideosOnCourses.
     */
    data: Enumerable<VideosOnCoursesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * VideosOnCourses update
   */
  export type VideosOnCoursesUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideosOnCourses
     */
    select?: VideosOnCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideosOnCoursesInclude<ExtArgs> | null
    /**
     * The data needed to update a VideosOnCourses.
     */
    data: XOR<VideosOnCoursesUpdateInput, VideosOnCoursesUncheckedUpdateInput>
    /**
     * Choose, which VideosOnCourses to update.
     */
    where: VideosOnCoursesWhereUniqueInput
  }


  /**
   * VideosOnCourses updateMany
   */
  export type VideosOnCoursesUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VideosOnCourses.
     */
    data: XOR<VideosOnCoursesUpdateManyMutationInput, VideosOnCoursesUncheckedUpdateManyInput>
    /**
     * Filter which VideosOnCourses to update
     */
    where?: VideosOnCoursesWhereInput
  }


  /**
   * VideosOnCourses upsert
   */
  export type VideosOnCoursesUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideosOnCourses
     */
    select?: VideosOnCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideosOnCoursesInclude<ExtArgs> | null
    /**
     * The filter to search for the VideosOnCourses to update in case it exists.
     */
    where: VideosOnCoursesWhereUniqueInput
    /**
     * In case the VideosOnCourses found by the `where` argument doesn't exist, create a new VideosOnCourses with this data.
     */
    create: XOR<VideosOnCoursesCreateInput, VideosOnCoursesUncheckedCreateInput>
    /**
     * In case the VideosOnCourses was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VideosOnCoursesUpdateInput, VideosOnCoursesUncheckedUpdateInput>
  }


  /**
   * VideosOnCourses delete
   */
  export type VideosOnCoursesDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideosOnCourses
     */
    select?: VideosOnCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideosOnCoursesInclude<ExtArgs> | null
    /**
     * Filter which VideosOnCourses to delete.
     */
    where: VideosOnCoursesWhereUniqueInput
  }


  /**
   * VideosOnCourses deleteMany
   */
  export type VideosOnCoursesDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which VideosOnCourses to delete
     */
    where?: VideosOnCoursesWhereInput
  }


  /**
   * VideosOnCourses without action
   */
  export type VideosOnCoursesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideosOnCourses
     */
    select?: VideosOnCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideosOnCoursesInclude<ExtArgs> | null
  }



  /**
   * Model Payment
   */


  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    amount: number | null
  }

  export type PaymentSumAggregateOutputType = {
    amount: number | null
  }

  export type PaymentMinAggregateOutputType = {
    id: string | null
    amount: number | null
    currency: string | null
    method: PaymentMethod | null
    type: PaymentType | null
    userId: string | null
    description: string | null
    paidAt: Date | null
    stripePaymentIntentId: string | null
    woocommerceOrderId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: string | null
    amount: number | null
    currency: string | null
    method: PaymentMethod | null
    type: PaymentType | null
    userId: string | null
    description: string | null
    paidAt: Date | null
    stripePaymentIntentId: string | null
    woocommerceOrderId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    amount: number
    currency: number
    method: number
    type: number
    userId: number
    description: number
    paidAt: number
    stripePaymentIntentId: number
    woocommerceOrderId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    amount?: true
  }

  export type PaymentSumAggregateInputType = {
    amount?: true
  }

  export type PaymentMinAggregateInputType = {
    id?: true
    amount?: true
    currency?: true
    method?: true
    type?: true
    userId?: true
    description?: true
    paidAt?: true
    stripePaymentIntentId?: true
    woocommerceOrderId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    amount?: true
    currency?: true
    method?: true
    type?: true
    userId?: true
    description?: true
    paidAt?: true
    stripePaymentIntentId?: true
    woocommerceOrderId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    amount?: true
    currency?: true
    method?: true
    type?: true
    userId?: true
    description?: true
    paidAt?: true
    stripePaymentIntentId?: true
    woocommerceOrderId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PaymentAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payment to aggregate.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: Enumerable<PaymentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type PaymentGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
    orderBy?: Enumerable<PaymentOrderByWithAggregationInput>
    by: PaymentScalarFieldEnum[]
    having?: PaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }


  export type PaymentGroupByOutputType = {
    id: string
    amount: number
    currency: string
    method: PaymentMethod
    type: PaymentType
    userId: string
    description: string | null
    paidAt: Date
    stripePaymentIntentId: string | null
    woocommerceOrderId: string | null
    createdAt: Date
    updatedAt: Date
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends PaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type PaymentSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amount?: boolean
    currency?: boolean
    method?: boolean
    type?: boolean
    userId?: boolean
    description?: boolean
    paidAt?: boolean
    stripePaymentIntentId?: boolean
    woocommerceOrderId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectScalar = {
    id?: boolean
    amount?: boolean
    currency?: boolean
    method?: boolean
    type?: boolean
    userId?: boolean
    description?: boolean
    paidAt?: boolean
    stripePaymentIntentId?: boolean
    woocommerceOrderId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PaymentInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
  }


  type PaymentGetPayload<S extends boolean | null | undefined | PaymentArgs> = $Types.GetResult<PaymentPayload, S>

  type PaymentCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<PaymentFindManyArgs, 'select' | 'include'> & {
      select?: PaymentCountAggregateInputType | true
    }

  export interface PaymentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Payment'], meta: { name: 'Payment' } }
    /**
     * Find zero or one Payment that matches the filter.
     * @param {PaymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PaymentFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PaymentFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Payment'> extends True ? Prisma__PaymentClient<$Types.GetResult<PaymentPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__PaymentClient<$Types.GetResult<PaymentPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Payment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PaymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PaymentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PaymentClient<$Types.GetResult<PaymentPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PaymentFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PaymentFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Payment'> extends True ? Prisma__PaymentClient<$Types.GetResult<PaymentPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__PaymentClient<$Types.GetResult<PaymentPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Payment that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PaymentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PaymentClient<$Types.GetResult<PaymentPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PaymentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<PaymentPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Payment.
     * @param {PaymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
    **/
    create<T extends PaymentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentCreateArgs<ExtArgs>>
    ): Prisma__PaymentClient<$Types.GetResult<PaymentPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Payments.
     *     @param {PaymentCreateManyArgs} args - Arguments to create many Payments.
     *     @example
     *     // Create many Payments
     *     const payment = await prisma.payment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PaymentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Payment.
     * @param {PaymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
    **/
    delete<T extends PaymentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentDeleteArgs<ExtArgs>>
    ): Prisma__PaymentClient<$Types.GetResult<PaymentPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Payment.
     * @param {PaymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PaymentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentUpdateArgs<ExtArgs>>
    ): Prisma__PaymentClient<$Types.GetResult<PaymentPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Payments.
     * @param {PaymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PaymentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PaymentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Payment.
     * @param {PaymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
    **/
    upsert<T extends PaymentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentUpsertArgs<ExtArgs>>
    ): Prisma__PaymentClient<$Types.GetResult<PaymentPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends PaymentCountArgs>(
      args?: Subset<T, PaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): Prisma.PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentGroupByArgs['orderBy'] }
        : { orderBy?: PaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PaymentClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Payment base type for findUnique actions
   */
  export type PaymentFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findUnique
   */
  export interface PaymentFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends PaymentFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Payment findUniqueOrThrow
   */
  export type PaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }


  /**
   * Payment base type for findFirst actions
   */
  export type PaymentFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: Enumerable<PaymentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: Enumerable<PaymentScalarFieldEnum>
  }

  /**
   * Payment findFirst
   */
  export interface PaymentFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends PaymentFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Payment findFirstOrThrow
   */
  export type PaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: Enumerable<PaymentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: Enumerable<PaymentScalarFieldEnum>
  }


  /**
   * Payment findMany
   */
  export type PaymentFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payments to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: Enumerable<PaymentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    distinct?: Enumerable<PaymentScalarFieldEnum>
  }


  /**
   * Payment create
   */
  export type PaymentCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a Payment.
     */
    data: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
  }


  /**
   * Payment createMany
   */
  export type PaymentCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Payments.
     */
    data: Enumerable<PaymentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Payment update
   */
  export type PaymentUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a Payment.
     */
    data: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
    /**
     * Choose, which Payment to update.
     */
    where: PaymentWhereUniqueInput
  }


  /**
   * Payment updateMany
   */
  export type PaymentUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
  }


  /**
   * Payment upsert
   */
  export type PaymentUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the Payment to update in case it exists.
     */
    where: PaymentWhereUniqueInput
    /**
     * In case the Payment found by the `where` argument doesn't exist, create a new Payment with this data.
     */
    create: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
    /**
     * In case the Payment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
  }


  /**
   * Payment delete
   */
  export type PaymentDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter which Payment to delete.
     */
    where: PaymentWhereUniqueInput
  }


  /**
   * Payment deleteMany
   */
  export type PaymentDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payments to delete
     */
    where?: PaymentWhereInput
  }


  /**
   * Payment without action
   */
  export type PaymentArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentInclude<ExtArgs> | null
  }



  /**
   * Model File
   */


  export type AggregateFile = {
    _count: FileCountAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  export type FileMinAggregateOutputType = {
    id: string | null
    name: string | null
    s3Key: string | null
    contentType: string | null
    folderId: string | null
    courseId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FileMaxAggregateOutputType = {
    id: string | null
    name: string | null
    s3Key: string | null
    contentType: string | null
    folderId: string | null
    courseId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FileCountAggregateOutputType = {
    id: number
    name: number
    s3Key: number
    contentType: number
    folderId: number
    courseId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FileMinAggregateInputType = {
    id?: true
    name?: true
    s3Key?: true
    contentType?: true
    folderId?: true
    courseId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FileMaxAggregateInputType = {
    id?: true
    name?: true
    s3Key?: true
    contentType?: true
    folderId?: true
    courseId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FileCountAggregateInputType = {
    id?: true
    name?: true
    s3Key?: true
    contentType?: true
    folderId?: true
    courseId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FileAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which File to aggregate.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: Enumerable<FileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Files
    **/
    _count?: true | FileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FileMaxAggregateInputType
  }

  export type GetFileAggregateType<T extends FileAggregateArgs> = {
        [P in keyof T & keyof AggregateFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFile[P]>
      : GetScalarType<T[P], AggregateFile[P]>
  }




  export type FileGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
    orderBy?: Enumerable<FileOrderByWithAggregationInput>
    by: FileScalarFieldEnum[]
    having?: FileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FileCountAggregateInputType | true
    _min?: FileMinAggregateInputType
    _max?: FileMaxAggregateInputType
  }


  export type FileGroupByOutputType = {
    id: string
    name: string
    s3Key: string
    contentType: string
    folderId: string
    courseId: string
    createdAt: Date
    updatedAt: Date
    _count: FileCountAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  type GetFileGroupByPayload<T extends FileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FileGroupByOutputType[P]>
            : GetScalarType<T[P], FileGroupByOutputType[P]>
        }
      >
    >


  export type FileSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    s3Key?: boolean
    contentType?: boolean
    folderId?: boolean
    courseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    folder?: boolean | FolderArgs<ExtArgs>
    Course?: boolean | CourseArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectScalar = {
    id?: boolean
    name?: boolean
    s3Key?: boolean
    contentType?: boolean
    folderId?: boolean
    courseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FileInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    folder?: boolean | FolderArgs<ExtArgs>
    Course?: boolean | CourseArgs<ExtArgs>
  }


  type FileGetPayload<S extends boolean | null | undefined | FileArgs> = $Types.GetResult<FilePayload, S>

  type FileCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<FileFindManyArgs, 'select' | 'include'> & {
      select?: FileCountAggregateInputType | true
    }

  export interface FileDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['File'], meta: { name: 'File' } }
    /**
     * Find zero or one File that matches the filter.
     * @param {FileFindUniqueArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FileFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FileFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'File'> extends True ? Prisma__FileClient<$Types.GetResult<FilePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__FileClient<$Types.GetResult<FilePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one File that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FileFindUniqueOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FileFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FileFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FileClient<$Types.GetResult<FilePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first File that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FileFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FileFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'File'> extends True ? Prisma__FileClient<$Types.GetResult<FilePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__FileClient<$Types.GetResult<FilePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first File that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FileFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FileFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FileClient<$Types.GetResult<FilePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Files that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Files
     * const files = await prisma.file.findMany()
     * 
     * // Get first 10 Files
     * const files = await prisma.file.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fileWithIdOnly = await prisma.file.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FileFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FileFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<FilePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a File.
     * @param {FileCreateArgs} args - Arguments to create a File.
     * @example
     * // Create one File
     * const File = await prisma.file.create({
     *   data: {
     *     // ... data to create a File
     *   }
     * })
     * 
    **/
    create<T extends FileCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FileCreateArgs<ExtArgs>>
    ): Prisma__FileClient<$Types.GetResult<FilePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Files.
     *     @param {FileCreateManyArgs} args - Arguments to create many Files.
     *     @example
     *     // Create many Files
     *     const file = await prisma.file.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FileCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FileCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a File.
     * @param {FileDeleteArgs} args - Arguments to delete one File.
     * @example
     * // Delete one File
     * const File = await prisma.file.delete({
     *   where: {
     *     // ... filter to delete one File
     *   }
     * })
     * 
    **/
    delete<T extends FileDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FileDeleteArgs<ExtArgs>>
    ): Prisma__FileClient<$Types.GetResult<FilePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one File.
     * @param {FileUpdateArgs} args - Arguments to update one File.
     * @example
     * // Update one File
     * const file = await prisma.file.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FileUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FileUpdateArgs<ExtArgs>>
    ): Prisma__FileClient<$Types.GetResult<FilePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Files.
     * @param {FileDeleteManyArgs} args - Arguments to filter Files to delete.
     * @example
     * // Delete a few Files
     * const { count } = await prisma.file.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FileDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FileDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Files
     * const file = await prisma.file.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FileUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FileUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one File.
     * @param {FileUpsertArgs} args - Arguments to update or create a File.
     * @example
     * // Update or create a File
     * const file = await prisma.file.upsert({
     *   create: {
     *     // ... data to create a File
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the File we want to update
     *   }
     * })
    **/
    upsert<T extends FileUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FileUpsertArgs<ExtArgs>>
    ): Prisma__FileClient<$Types.GetResult<FilePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileCountArgs} args - Arguments to filter Files to count.
     * @example
     * // Count the number of Files
     * const count = await prisma.file.count({
     *   where: {
     *     // ... the filter for the Files we want to count
     *   }
     * })
    **/
    count<T extends FileCountArgs>(
      args?: Subset<T, FileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FileAggregateArgs>(args: Subset<T, FileAggregateArgs>): Prisma.PrismaPromise<GetFileAggregateType<T>>

    /**
     * Group by File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FileGroupByArgs['orderBy'] }
        : { orderBy?: FileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for File.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FileClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    folder<T extends FolderArgs<ExtArgs> = {}>(args?: Subset<T, FolderArgs<ExtArgs>>): Prisma__FolderClient<$Types.GetResult<FolderPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    Course<T extends CourseArgs<ExtArgs> = {}>(args?: Subset<T, CourseArgs<ExtArgs>>): Prisma__CourseClient<$Types.GetResult<CoursePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * File base type for findUnique actions
   */
  export type FileFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File findUnique
   */
  export interface FileFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends FileFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * File findUniqueOrThrow
   */
  export type FileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }


  /**
   * File base type for findFirst actions
   */
  export type FileFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: Enumerable<FileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: Enumerable<FileScalarFieldEnum>
  }

  /**
   * File findFirst
   */
  export interface FileFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends FileFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * File findFirstOrThrow
   */
  export type FileFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: Enumerable<FileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: Enumerable<FileScalarFieldEnum>
  }


  /**
   * File findMany
   */
  export type FileFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which Files to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: Enumerable<FileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    distinct?: Enumerable<FileScalarFieldEnum>
  }


  /**
   * File create
   */
  export type FileCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to create a File.
     */
    data: XOR<FileCreateInput, FileUncheckedCreateInput>
  }


  /**
   * File createMany
   */
  export type FileCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Files.
     */
    data: Enumerable<FileCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * File update
   */
  export type FileUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to update a File.
     */
    data: XOR<FileUpdateInput, FileUncheckedUpdateInput>
    /**
     * Choose, which File to update.
     */
    where: FileWhereUniqueInput
  }


  /**
   * File updateMany
   */
  export type FileUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Files.
     */
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyInput>
    /**
     * Filter which Files to update
     */
    where?: FileWhereInput
  }


  /**
   * File upsert
   */
  export type FileUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The filter to search for the File to update in case it exists.
     */
    where: FileWhereUniqueInput
    /**
     * In case the File found by the `where` argument doesn't exist, create a new File with this data.
     */
    create: XOR<FileCreateInput, FileUncheckedCreateInput>
    /**
     * In case the File was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FileUpdateInput, FileUncheckedUpdateInput>
  }


  /**
   * File delete
   */
  export type FileDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter which File to delete.
     */
    where: FileWhereUniqueInput
  }


  /**
   * File deleteMany
   */
  export type FileDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Files to delete
     */
    where?: FileWhereInput
  }


  /**
   * File without action
   */
  export type FileArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileInclude<ExtArgs> | null
  }



  /**
   * Model Folder
   */


  export type AggregateFolder = {
    _count: FolderCountAggregateOutputType | null
    _min: FolderMinAggregateOutputType | null
    _max: FolderMaxAggregateOutputType | null
  }

  export type FolderMinAggregateOutputType = {
    id: string | null
    name: string | null
    parentId: string | null
    isRoot: boolean | null
    courseId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FolderMaxAggregateOutputType = {
    id: string | null
    name: string | null
    parentId: string | null
    isRoot: boolean | null
    courseId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FolderCountAggregateOutputType = {
    id: number
    name: number
    parentId: number
    isRoot: number
    courseId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FolderMinAggregateInputType = {
    id?: true
    name?: true
    parentId?: true
    isRoot?: true
    courseId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FolderMaxAggregateInputType = {
    id?: true
    name?: true
    parentId?: true
    isRoot?: true
    courseId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FolderCountAggregateInputType = {
    id?: true
    name?: true
    parentId?: true
    isRoot?: true
    courseId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FolderAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Folder to aggregate.
     */
    where?: FolderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Folders to fetch.
     */
    orderBy?: Enumerable<FolderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FolderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Folders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Folders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Folders
    **/
    _count?: true | FolderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FolderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FolderMaxAggregateInputType
  }

  export type GetFolderAggregateType<T extends FolderAggregateArgs> = {
        [P in keyof T & keyof AggregateFolder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFolder[P]>
      : GetScalarType<T[P], AggregateFolder[P]>
  }




  export type FolderGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FolderWhereInput
    orderBy?: Enumerable<FolderOrderByWithAggregationInput>
    by: FolderScalarFieldEnum[]
    having?: FolderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FolderCountAggregateInputType | true
    _min?: FolderMinAggregateInputType
    _max?: FolderMaxAggregateInputType
  }


  export type FolderGroupByOutputType = {
    id: string
    name: string
    parentId: string | null
    isRoot: boolean
    courseId: string
    createdAt: Date
    updatedAt: Date
    _count: FolderCountAggregateOutputType | null
    _min: FolderMinAggregateOutputType | null
    _max: FolderMaxAggregateOutputType | null
  }

  type GetFolderGroupByPayload<T extends FolderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FolderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FolderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FolderGroupByOutputType[P]>
            : GetScalarType<T[P], FolderGroupByOutputType[P]>
        }
      >
    >


  export type FolderSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    parentId?: boolean
    isRoot?: boolean
    courseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    files?: boolean | Folder$filesArgs<ExtArgs>
    folders?: boolean | Folder$foldersArgs<ExtArgs>
    parent?: boolean | FolderArgs<ExtArgs>
    course?: boolean | CourseArgs<ExtArgs>
    _count?: boolean | FolderCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["folder"]>

  export type FolderSelectScalar = {
    id?: boolean
    name?: boolean
    parentId?: boolean
    isRoot?: boolean
    courseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FolderInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    files?: boolean | Folder$filesArgs<ExtArgs>
    folders?: boolean | Folder$foldersArgs<ExtArgs>
    parent?: boolean | FolderArgs<ExtArgs>
    course?: boolean | CourseArgs<ExtArgs>
    _count?: boolean | FolderCountOutputTypeArgs<ExtArgs>
  }


  type FolderGetPayload<S extends boolean | null | undefined | FolderArgs> = $Types.GetResult<FolderPayload, S>

  type FolderCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<FolderFindManyArgs, 'select' | 'include'> & {
      select?: FolderCountAggregateInputType | true
    }

  export interface FolderDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Folder'], meta: { name: 'Folder' } }
    /**
     * Find zero or one Folder that matches the filter.
     * @param {FolderFindUniqueArgs} args - Arguments to find a Folder
     * @example
     * // Get one Folder
     * const folder = await prisma.folder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FolderFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FolderFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Folder'> extends True ? Prisma__FolderClient<$Types.GetResult<FolderPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__FolderClient<$Types.GetResult<FolderPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Folder that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FolderFindUniqueOrThrowArgs} args - Arguments to find a Folder
     * @example
     * // Get one Folder
     * const folder = await prisma.folder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FolderFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FolderFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FolderClient<$Types.GetResult<FolderPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Folder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderFindFirstArgs} args - Arguments to find a Folder
     * @example
     * // Get one Folder
     * const folder = await prisma.folder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FolderFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FolderFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Folder'> extends True ? Prisma__FolderClient<$Types.GetResult<FolderPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__FolderClient<$Types.GetResult<FolderPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Folder that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderFindFirstOrThrowArgs} args - Arguments to find a Folder
     * @example
     * // Get one Folder
     * const folder = await prisma.folder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FolderFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FolderFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FolderClient<$Types.GetResult<FolderPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Folders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Folders
     * const folders = await prisma.folder.findMany()
     * 
     * // Get first 10 Folders
     * const folders = await prisma.folder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const folderWithIdOnly = await prisma.folder.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FolderFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FolderFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<FolderPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Folder.
     * @param {FolderCreateArgs} args - Arguments to create a Folder.
     * @example
     * // Create one Folder
     * const Folder = await prisma.folder.create({
     *   data: {
     *     // ... data to create a Folder
     *   }
     * })
     * 
    **/
    create<T extends FolderCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FolderCreateArgs<ExtArgs>>
    ): Prisma__FolderClient<$Types.GetResult<FolderPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Folders.
     *     @param {FolderCreateManyArgs} args - Arguments to create many Folders.
     *     @example
     *     // Create many Folders
     *     const folder = await prisma.folder.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FolderCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FolderCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Folder.
     * @param {FolderDeleteArgs} args - Arguments to delete one Folder.
     * @example
     * // Delete one Folder
     * const Folder = await prisma.folder.delete({
     *   where: {
     *     // ... filter to delete one Folder
     *   }
     * })
     * 
    **/
    delete<T extends FolderDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FolderDeleteArgs<ExtArgs>>
    ): Prisma__FolderClient<$Types.GetResult<FolderPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Folder.
     * @param {FolderUpdateArgs} args - Arguments to update one Folder.
     * @example
     * // Update one Folder
     * const folder = await prisma.folder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FolderUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FolderUpdateArgs<ExtArgs>>
    ): Prisma__FolderClient<$Types.GetResult<FolderPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Folders.
     * @param {FolderDeleteManyArgs} args - Arguments to filter Folders to delete.
     * @example
     * // Delete a few Folders
     * const { count } = await prisma.folder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FolderDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FolderDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Folders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Folders
     * const folder = await prisma.folder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FolderUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FolderUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Folder.
     * @param {FolderUpsertArgs} args - Arguments to update or create a Folder.
     * @example
     * // Update or create a Folder
     * const folder = await prisma.folder.upsert({
     *   create: {
     *     // ... data to create a Folder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Folder we want to update
     *   }
     * })
    **/
    upsert<T extends FolderUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FolderUpsertArgs<ExtArgs>>
    ): Prisma__FolderClient<$Types.GetResult<FolderPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Folders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderCountArgs} args - Arguments to filter Folders to count.
     * @example
     * // Count the number of Folders
     * const count = await prisma.folder.count({
     *   where: {
     *     // ... the filter for the Folders we want to count
     *   }
     * })
    **/
    count<T extends FolderCountArgs>(
      args?: Subset<T, FolderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FolderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Folder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FolderAggregateArgs>(args: Subset<T, FolderAggregateArgs>): Prisma.PrismaPromise<GetFolderAggregateType<T>>

    /**
     * Group by Folder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FolderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FolderGroupByArgs['orderBy'] }
        : { orderBy?: FolderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FolderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFolderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Folder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FolderClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    files<T extends Folder$filesArgs<ExtArgs> = {}>(args?: Subset<T, Folder$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<FilePayload<ExtArgs>, T, 'findMany', never>| Null>;

    folders<T extends Folder$foldersArgs<ExtArgs> = {}>(args?: Subset<T, Folder$foldersArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<FolderPayload<ExtArgs>, T, 'findMany', never>| Null>;

    parent<T extends FolderArgs<ExtArgs> = {}>(args?: Subset<T, FolderArgs<ExtArgs>>): Prisma__FolderClient<$Types.GetResult<FolderPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    course<T extends CourseArgs<ExtArgs> = {}>(args?: Subset<T, CourseArgs<ExtArgs>>): Prisma__CourseClient<$Types.GetResult<CoursePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Folder base type for findUnique actions
   */
  export type FolderFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * Filter, which Folder to fetch.
     */
    where: FolderWhereUniqueInput
  }

  /**
   * Folder findUnique
   */
  export interface FolderFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends FolderFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Folder findUniqueOrThrow
   */
  export type FolderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * Filter, which Folder to fetch.
     */
    where: FolderWhereUniqueInput
  }


  /**
   * Folder base type for findFirst actions
   */
  export type FolderFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * Filter, which Folder to fetch.
     */
    where?: FolderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Folders to fetch.
     */
    orderBy?: Enumerable<FolderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Folders.
     */
    cursor?: FolderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Folders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Folders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Folders.
     */
    distinct?: Enumerable<FolderScalarFieldEnum>
  }

  /**
   * Folder findFirst
   */
  export interface FolderFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends FolderFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Folder findFirstOrThrow
   */
  export type FolderFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * Filter, which Folder to fetch.
     */
    where?: FolderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Folders to fetch.
     */
    orderBy?: Enumerable<FolderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Folders.
     */
    cursor?: FolderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Folders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Folders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Folders.
     */
    distinct?: Enumerable<FolderScalarFieldEnum>
  }


  /**
   * Folder findMany
   */
  export type FolderFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * Filter, which Folders to fetch.
     */
    where?: FolderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Folders to fetch.
     */
    orderBy?: Enumerable<FolderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Folders.
     */
    cursor?: FolderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Folders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Folders.
     */
    skip?: number
    distinct?: Enumerable<FolderScalarFieldEnum>
  }


  /**
   * Folder create
   */
  export type FolderCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * The data needed to create a Folder.
     */
    data: XOR<FolderCreateInput, FolderUncheckedCreateInput>
  }


  /**
   * Folder createMany
   */
  export type FolderCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Folders.
     */
    data: Enumerable<FolderCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Folder update
   */
  export type FolderUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * The data needed to update a Folder.
     */
    data: XOR<FolderUpdateInput, FolderUncheckedUpdateInput>
    /**
     * Choose, which Folder to update.
     */
    where: FolderWhereUniqueInput
  }


  /**
   * Folder updateMany
   */
  export type FolderUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Folders.
     */
    data: XOR<FolderUpdateManyMutationInput, FolderUncheckedUpdateManyInput>
    /**
     * Filter which Folders to update
     */
    where?: FolderWhereInput
  }


  /**
   * Folder upsert
   */
  export type FolderUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * The filter to search for the Folder to update in case it exists.
     */
    where: FolderWhereUniqueInput
    /**
     * In case the Folder found by the `where` argument doesn't exist, create a new Folder with this data.
     */
    create: XOR<FolderCreateInput, FolderUncheckedCreateInput>
    /**
     * In case the Folder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FolderUpdateInput, FolderUncheckedUpdateInput>
  }


  /**
   * Folder delete
   */
  export type FolderDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * Filter which Folder to delete.
     */
    where: FolderWhereUniqueInput
  }


  /**
   * Folder deleteMany
   */
  export type FolderDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Folders to delete
     */
    where?: FolderWhereInput
  }


  /**
   * Folder.files
   */
  export type Folder$filesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
    orderBy?: Enumerable<FileOrderByWithRelationInput>
    cursor?: FileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FileScalarFieldEnum>
  }


  /**
   * Folder.folders
   */
  export type Folder$foldersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FolderInclude<ExtArgs> | null
    where?: FolderWhereInput
    orderBy?: Enumerable<FolderOrderByWithRelationInput>
    cursor?: FolderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FolderScalarFieldEnum>
  }


  /**
   * Folder without action
   */
  export type FolderArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FolderInclude<ExtArgs> | null
  }



  /**
   * Model Course
   */


  export type AggregateCourse = {
    _count: CourseCountAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  export type CourseMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CourseMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CourseCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CourseMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CourseMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CourseCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CourseAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Course to aggregate.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: Enumerable<CourseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Courses
    **/
    _count?: true | CourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseMaxAggregateInputType
  }

  export type GetCourseAggregateType<T extends CourseAggregateArgs> = {
        [P in keyof T & keyof AggregateCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourse[P]>
      : GetScalarType<T[P], AggregateCourse[P]>
  }




  export type CourseGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
    orderBy?: Enumerable<CourseOrderByWithAggregationInput>
    by: CourseScalarFieldEnum[]
    having?: CourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseCountAggregateInputType | true
    _min?: CourseMinAggregateInputType
    _max?: CourseMaxAggregateInputType
  }


  export type CourseGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
    _count: CourseCountAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  type GetCourseGroupByPayload<T extends CourseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseGroupByOutputType[P]>
            : GetScalarType<T[P], CourseGroupByOutputType[P]>
        }
      >
    >


  export type CourseSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    folders?: boolean | Course$foldersArgs<ExtArgs>
    files?: boolean | Course$filesArgs<ExtArgs>
    videos?: boolean | Course$videosArgs<ExtArgs>
    students?: boolean | Course$studentsArgs<ExtArgs>
    quizzes?: boolean | Course$quizzesArgs<ExtArgs>
    predefinedEvents?: boolean | Course$predefinedEventsArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CourseInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    folders?: boolean | Course$foldersArgs<ExtArgs>
    files?: boolean | Course$filesArgs<ExtArgs>
    videos?: boolean | Course$videosArgs<ExtArgs>
    students?: boolean | Course$studentsArgs<ExtArgs>
    quizzes?: boolean | Course$quizzesArgs<ExtArgs>
    predefinedEvents?: boolean | Course$predefinedEventsArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeArgs<ExtArgs>
  }


  type CourseGetPayload<S extends boolean | null | undefined | CourseArgs> = $Types.GetResult<CoursePayload, S>

  type CourseCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<CourseFindManyArgs, 'select' | 'include'> & {
      select?: CourseCountAggregateInputType | true
    }

  export interface CourseDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Course'], meta: { name: 'Course' } }
    /**
     * Find zero or one Course that matches the filter.
     * @param {CourseFindUniqueArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CourseFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CourseFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Course'> extends True ? Prisma__CourseClient<$Types.GetResult<CoursePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__CourseClient<$Types.GetResult<CoursePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Course that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CourseFindUniqueOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CourseFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CourseClient<$Types.GetResult<CoursePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Course that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CourseFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CourseFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Course'> extends True ? Prisma__CourseClient<$Types.GetResult<CoursePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__CourseClient<$Types.GetResult<CoursePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Course that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CourseFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CourseClient<$Types.GetResult<CoursePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.course.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.course.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseWithIdOnly = await prisma.course.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CourseFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<CoursePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Course.
     * @param {CourseCreateArgs} args - Arguments to create a Course.
     * @example
     * // Create one Course
     * const Course = await prisma.course.create({
     *   data: {
     *     // ... data to create a Course
     *   }
     * })
     * 
    **/
    create<T extends CourseCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CourseCreateArgs<ExtArgs>>
    ): Prisma__CourseClient<$Types.GetResult<CoursePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Courses.
     *     @param {CourseCreateManyArgs} args - Arguments to create many Courses.
     *     @example
     *     // Create many Courses
     *     const course = await prisma.course.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CourseCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Course.
     * @param {CourseDeleteArgs} args - Arguments to delete one Course.
     * @example
     * // Delete one Course
     * const Course = await prisma.course.delete({
     *   where: {
     *     // ... filter to delete one Course
     *   }
     * })
     * 
    **/
    delete<T extends CourseDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CourseDeleteArgs<ExtArgs>>
    ): Prisma__CourseClient<$Types.GetResult<CoursePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Course.
     * @param {CourseUpdateArgs} args - Arguments to update one Course.
     * @example
     * // Update one Course
     * const course = await prisma.course.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CourseUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CourseUpdateArgs<ExtArgs>>
    ): Prisma__CourseClient<$Types.GetResult<CoursePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Courses.
     * @param {CourseDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.course.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CourseDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CourseUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CourseUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Course.
     * @param {CourseUpsertArgs} args - Arguments to update or create a Course.
     * @example
     * // Update or create a Course
     * const course = await prisma.course.upsert({
     *   create: {
     *     // ... data to create a Course
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Course we want to update
     *   }
     * })
    **/
    upsert<T extends CourseUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CourseUpsertArgs<ExtArgs>>
    ): Prisma__CourseClient<$Types.GetResult<CoursePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.course.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends CourseCountArgs>(
      args?: Subset<T, CourseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseAggregateArgs>(args: Subset<T, CourseAggregateArgs>): Prisma.PrismaPromise<GetCourseAggregateType<T>>

    /**
     * Group by Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseGroupByArgs['orderBy'] }
        : { orderBy?: CourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Course.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CourseClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    folders<T extends Course$foldersArgs<ExtArgs> = {}>(args?: Subset<T, Course$foldersArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<FolderPayload<ExtArgs>, T, 'findMany', never>| Null>;

    files<T extends Course$filesArgs<ExtArgs> = {}>(args?: Subset<T, Course$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<FilePayload<ExtArgs>, T, 'findMany', never>| Null>;

    videos<T extends Course$videosArgs<ExtArgs> = {}>(args?: Subset<T, Course$videosArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<VideosOnCoursesPayload<ExtArgs>, T, 'findMany', never>| Null>;

    students<T extends Course$studentsArgs<ExtArgs> = {}>(args?: Subset<T, Course$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<UserPayload<ExtArgs>, T, 'findMany', never>| Null>;

    quizzes<T extends Course$quizzesArgs<ExtArgs> = {}>(args?: Subset<T, Course$quizzesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<QuizzesOnCoursePayload<ExtArgs>, T, 'findMany', never>| Null>;

    predefinedEvents<T extends Course$predefinedEventsArgs<ExtArgs> = {}>(args?: Subset<T, Course$predefinedEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<PredefinedEventOnCoursesPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Course base type for findUnique actions
   */
  export type CourseFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findUnique
   */
  export interface CourseFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends CourseFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Course findUniqueOrThrow
   */
  export type CourseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }


  /**
   * Course base type for findFirst actions
   */
  export type CourseFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: Enumerable<CourseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: Enumerable<CourseScalarFieldEnum>
  }

  /**
   * Course findFirst
   */
  export interface CourseFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends CourseFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Course findFirstOrThrow
   */
  export type CourseFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: Enumerable<CourseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: Enumerable<CourseScalarFieldEnum>
  }


  /**
   * Course findMany
   */
  export type CourseFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: Enumerable<CourseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    distinct?: Enumerable<CourseScalarFieldEnum>
  }


  /**
   * Course create
   */
  export type CourseCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to create a Course.
     */
    data: XOR<CourseCreateInput, CourseUncheckedCreateInput>
  }


  /**
   * Course createMany
   */
  export type CourseCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Courses.
     */
    data: Enumerable<CourseCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Course update
   */
  export type CourseUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to update a Course.
     */
    data: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
    /**
     * Choose, which Course to update.
     */
    where: CourseWhereUniqueInput
  }


  /**
   * Course updateMany
   */
  export type CourseUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Courses.
     */
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CourseWhereInput
  }


  /**
   * Course upsert
   */
  export type CourseUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The filter to search for the Course to update in case it exists.
     */
    where: CourseWhereUniqueInput
    /**
     * In case the Course found by the `where` argument doesn't exist, create a new Course with this data.
     */
    create: XOR<CourseCreateInput, CourseUncheckedCreateInput>
    /**
     * In case the Course was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
  }


  /**
   * Course delete
   */
  export type CourseDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter which Course to delete.
     */
    where: CourseWhereUniqueInput
  }


  /**
   * Course deleteMany
   */
  export type CourseDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Courses to delete
     */
    where?: CourseWhereInput
  }


  /**
   * Course.folders
   */
  export type Course$foldersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FolderInclude<ExtArgs> | null
    where?: FolderWhereInput
    orderBy?: Enumerable<FolderOrderByWithRelationInput>
    cursor?: FolderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FolderScalarFieldEnum>
  }


  /**
   * Course.files
   */
  export type Course$filesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
    orderBy?: Enumerable<FileOrderByWithRelationInput>
    cursor?: FileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FileScalarFieldEnum>
  }


  /**
   * Course.videos
   */
  export type Course$videosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideosOnCourses
     */
    select?: VideosOnCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideosOnCoursesInclude<ExtArgs> | null
    where?: VideosOnCoursesWhereInput
    orderBy?: Enumerable<VideosOnCoursesOrderByWithRelationInput>
    cursor?: VideosOnCoursesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<VideosOnCoursesScalarFieldEnum>
  }


  /**
   * Course.students
   */
  export type Course$studentsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * Course.quizzes
   */
  export type Course$quizzesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizzesOnCourse
     */
    select?: QuizzesOnCourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuizzesOnCourseInclude<ExtArgs> | null
    where?: QuizzesOnCourseWhereInput
    orderBy?: Enumerable<QuizzesOnCourseOrderByWithRelationInput>
    cursor?: QuizzesOnCourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<QuizzesOnCourseScalarFieldEnum>
  }


  /**
   * Course.predefinedEvents
   */
  export type Course$predefinedEventsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedEventOnCourses
     */
    select?: PredefinedEventOnCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PredefinedEventOnCoursesInclude<ExtArgs> | null
    where?: PredefinedEventOnCoursesWhereInput
    orderBy?: Enumerable<PredefinedEventOnCoursesOrderByWithRelationInput>
    cursor?: PredefinedEventOnCoursesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PredefinedEventOnCoursesScalarFieldEnum>
  }


  /**
   * Course without action
   */
  export type CourseArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
  }



  /**
   * Model PredefinedEvent
   */


  export type AggregatePredefinedEvent = {
    _count: PredefinedEventCountAggregateOutputType | null
    _min: PredefinedEventMinAggregateOutputType | null
    _max: PredefinedEventMaxAggregateOutputType | null
  }

  export type PredefinedEventMinAggregateOutputType = {
    id: string | null
    title: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PredefinedEventMaxAggregateOutputType = {
    id: string | null
    title: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PredefinedEventCountAggregateOutputType = {
    id: number
    title: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PredefinedEventMinAggregateInputType = {
    id?: true
    title?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PredefinedEventMaxAggregateInputType = {
    id?: true
    title?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PredefinedEventCountAggregateInputType = {
    id?: true
    title?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PredefinedEventAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which PredefinedEvent to aggregate.
     */
    where?: PredefinedEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PredefinedEvents to fetch.
     */
    orderBy?: Enumerable<PredefinedEventOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PredefinedEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PredefinedEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PredefinedEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PredefinedEvents
    **/
    _count?: true | PredefinedEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PredefinedEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PredefinedEventMaxAggregateInputType
  }

  export type GetPredefinedEventAggregateType<T extends PredefinedEventAggregateArgs> = {
        [P in keyof T & keyof AggregatePredefinedEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePredefinedEvent[P]>
      : GetScalarType<T[P], AggregatePredefinedEvent[P]>
  }




  export type PredefinedEventGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PredefinedEventWhereInput
    orderBy?: Enumerable<PredefinedEventOrderByWithAggregationInput>
    by: PredefinedEventScalarFieldEnum[]
    having?: PredefinedEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PredefinedEventCountAggregateInputType | true
    _min?: PredefinedEventMinAggregateInputType
    _max?: PredefinedEventMaxAggregateInputType
  }


  export type PredefinedEventGroupByOutputType = {
    id: string
    title: string
    createdAt: Date
    updatedAt: Date
    _count: PredefinedEventCountAggregateOutputType | null
    _min: PredefinedEventMinAggregateOutputType | null
    _max: PredefinedEventMaxAggregateOutputType | null
  }

  type GetPredefinedEventGroupByPayload<T extends PredefinedEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PredefinedEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PredefinedEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PredefinedEventGroupByOutputType[P]>
            : GetScalarType<T[P], PredefinedEventGroupByOutputType[P]>
        }
      >
    >


  export type PredefinedEventSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    events?: boolean | PredefinedEvent$eventsArgs<ExtArgs>
    courses?: boolean | PredefinedEvent$coursesArgs<ExtArgs>
    _count?: boolean | PredefinedEventCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["predefinedEvent"]>

  export type PredefinedEventSelectScalar = {
    id?: boolean
    title?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PredefinedEventInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    events?: boolean | PredefinedEvent$eventsArgs<ExtArgs>
    courses?: boolean | PredefinedEvent$coursesArgs<ExtArgs>
    _count?: boolean | PredefinedEventCountOutputTypeArgs<ExtArgs>
  }


  type PredefinedEventGetPayload<S extends boolean | null | undefined | PredefinedEventArgs> = $Types.GetResult<PredefinedEventPayload, S>

  type PredefinedEventCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<PredefinedEventFindManyArgs, 'select' | 'include'> & {
      select?: PredefinedEventCountAggregateInputType | true
    }

  export interface PredefinedEventDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PredefinedEvent'], meta: { name: 'PredefinedEvent' } }
    /**
     * Find zero or one PredefinedEvent that matches the filter.
     * @param {PredefinedEventFindUniqueArgs} args - Arguments to find a PredefinedEvent
     * @example
     * // Get one PredefinedEvent
     * const predefinedEvent = await prisma.predefinedEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PredefinedEventFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PredefinedEventFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'PredefinedEvent'> extends True ? Prisma__PredefinedEventClient<$Types.GetResult<PredefinedEventPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__PredefinedEventClient<$Types.GetResult<PredefinedEventPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one PredefinedEvent that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PredefinedEventFindUniqueOrThrowArgs} args - Arguments to find a PredefinedEvent
     * @example
     * // Get one PredefinedEvent
     * const predefinedEvent = await prisma.predefinedEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PredefinedEventFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PredefinedEventFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PredefinedEventClient<$Types.GetResult<PredefinedEventPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first PredefinedEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredefinedEventFindFirstArgs} args - Arguments to find a PredefinedEvent
     * @example
     * // Get one PredefinedEvent
     * const predefinedEvent = await prisma.predefinedEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PredefinedEventFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PredefinedEventFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'PredefinedEvent'> extends True ? Prisma__PredefinedEventClient<$Types.GetResult<PredefinedEventPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__PredefinedEventClient<$Types.GetResult<PredefinedEventPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first PredefinedEvent that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredefinedEventFindFirstOrThrowArgs} args - Arguments to find a PredefinedEvent
     * @example
     * // Get one PredefinedEvent
     * const predefinedEvent = await prisma.predefinedEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PredefinedEventFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PredefinedEventFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PredefinedEventClient<$Types.GetResult<PredefinedEventPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more PredefinedEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredefinedEventFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PredefinedEvents
     * const predefinedEvents = await prisma.predefinedEvent.findMany()
     * 
     * // Get first 10 PredefinedEvents
     * const predefinedEvents = await prisma.predefinedEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const predefinedEventWithIdOnly = await prisma.predefinedEvent.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PredefinedEventFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PredefinedEventFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<PredefinedEventPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a PredefinedEvent.
     * @param {PredefinedEventCreateArgs} args - Arguments to create a PredefinedEvent.
     * @example
     * // Create one PredefinedEvent
     * const PredefinedEvent = await prisma.predefinedEvent.create({
     *   data: {
     *     // ... data to create a PredefinedEvent
     *   }
     * })
     * 
    **/
    create<T extends PredefinedEventCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PredefinedEventCreateArgs<ExtArgs>>
    ): Prisma__PredefinedEventClient<$Types.GetResult<PredefinedEventPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many PredefinedEvents.
     *     @param {PredefinedEventCreateManyArgs} args - Arguments to create many PredefinedEvents.
     *     @example
     *     // Create many PredefinedEvents
     *     const predefinedEvent = await prisma.predefinedEvent.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PredefinedEventCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PredefinedEventCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PredefinedEvent.
     * @param {PredefinedEventDeleteArgs} args - Arguments to delete one PredefinedEvent.
     * @example
     * // Delete one PredefinedEvent
     * const PredefinedEvent = await prisma.predefinedEvent.delete({
     *   where: {
     *     // ... filter to delete one PredefinedEvent
     *   }
     * })
     * 
    **/
    delete<T extends PredefinedEventDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PredefinedEventDeleteArgs<ExtArgs>>
    ): Prisma__PredefinedEventClient<$Types.GetResult<PredefinedEventPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one PredefinedEvent.
     * @param {PredefinedEventUpdateArgs} args - Arguments to update one PredefinedEvent.
     * @example
     * // Update one PredefinedEvent
     * const predefinedEvent = await prisma.predefinedEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PredefinedEventUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PredefinedEventUpdateArgs<ExtArgs>>
    ): Prisma__PredefinedEventClient<$Types.GetResult<PredefinedEventPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more PredefinedEvents.
     * @param {PredefinedEventDeleteManyArgs} args - Arguments to filter PredefinedEvents to delete.
     * @example
     * // Delete a few PredefinedEvents
     * const { count } = await prisma.predefinedEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PredefinedEventDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PredefinedEventDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PredefinedEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredefinedEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PredefinedEvents
     * const predefinedEvent = await prisma.predefinedEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PredefinedEventUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PredefinedEventUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PredefinedEvent.
     * @param {PredefinedEventUpsertArgs} args - Arguments to update or create a PredefinedEvent.
     * @example
     * // Update or create a PredefinedEvent
     * const predefinedEvent = await prisma.predefinedEvent.upsert({
     *   create: {
     *     // ... data to create a PredefinedEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PredefinedEvent we want to update
     *   }
     * })
    **/
    upsert<T extends PredefinedEventUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PredefinedEventUpsertArgs<ExtArgs>>
    ): Prisma__PredefinedEventClient<$Types.GetResult<PredefinedEventPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of PredefinedEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredefinedEventCountArgs} args - Arguments to filter PredefinedEvents to count.
     * @example
     * // Count the number of PredefinedEvents
     * const count = await prisma.predefinedEvent.count({
     *   where: {
     *     // ... the filter for the PredefinedEvents we want to count
     *   }
     * })
    **/
    count<T extends PredefinedEventCountArgs>(
      args?: Subset<T, PredefinedEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PredefinedEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PredefinedEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredefinedEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PredefinedEventAggregateArgs>(args: Subset<T, PredefinedEventAggregateArgs>): Prisma.PrismaPromise<GetPredefinedEventAggregateType<T>>

    /**
     * Group by PredefinedEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredefinedEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PredefinedEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PredefinedEventGroupByArgs['orderBy'] }
        : { orderBy?: PredefinedEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PredefinedEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPredefinedEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for PredefinedEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PredefinedEventClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    events<T extends PredefinedEvent$eventsArgs<ExtArgs> = {}>(args?: Subset<T, PredefinedEvent$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<EventPayload<ExtArgs>, T, 'findMany', never>| Null>;

    courses<T extends PredefinedEvent$coursesArgs<ExtArgs> = {}>(args?: Subset<T, PredefinedEvent$coursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<PredefinedEventOnCoursesPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * PredefinedEvent base type for findUnique actions
   */
  export type PredefinedEventFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedEvent
     */
    select?: PredefinedEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PredefinedEventInclude<ExtArgs> | null
    /**
     * Filter, which PredefinedEvent to fetch.
     */
    where: PredefinedEventWhereUniqueInput
  }

  /**
   * PredefinedEvent findUnique
   */
  export interface PredefinedEventFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends PredefinedEventFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PredefinedEvent findUniqueOrThrow
   */
  export type PredefinedEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedEvent
     */
    select?: PredefinedEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PredefinedEventInclude<ExtArgs> | null
    /**
     * Filter, which PredefinedEvent to fetch.
     */
    where: PredefinedEventWhereUniqueInput
  }


  /**
   * PredefinedEvent base type for findFirst actions
   */
  export type PredefinedEventFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedEvent
     */
    select?: PredefinedEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PredefinedEventInclude<ExtArgs> | null
    /**
     * Filter, which PredefinedEvent to fetch.
     */
    where?: PredefinedEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PredefinedEvents to fetch.
     */
    orderBy?: Enumerable<PredefinedEventOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PredefinedEvents.
     */
    cursor?: PredefinedEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PredefinedEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PredefinedEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PredefinedEvents.
     */
    distinct?: Enumerable<PredefinedEventScalarFieldEnum>
  }

  /**
   * PredefinedEvent findFirst
   */
  export interface PredefinedEventFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends PredefinedEventFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PredefinedEvent findFirstOrThrow
   */
  export type PredefinedEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedEvent
     */
    select?: PredefinedEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PredefinedEventInclude<ExtArgs> | null
    /**
     * Filter, which PredefinedEvent to fetch.
     */
    where?: PredefinedEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PredefinedEvents to fetch.
     */
    orderBy?: Enumerable<PredefinedEventOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PredefinedEvents.
     */
    cursor?: PredefinedEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PredefinedEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PredefinedEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PredefinedEvents.
     */
    distinct?: Enumerable<PredefinedEventScalarFieldEnum>
  }


  /**
   * PredefinedEvent findMany
   */
  export type PredefinedEventFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedEvent
     */
    select?: PredefinedEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PredefinedEventInclude<ExtArgs> | null
    /**
     * Filter, which PredefinedEvents to fetch.
     */
    where?: PredefinedEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PredefinedEvents to fetch.
     */
    orderBy?: Enumerable<PredefinedEventOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PredefinedEvents.
     */
    cursor?: PredefinedEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PredefinedEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PredefinedEvents.
     */
    skip?: number
    distinct?: Enumerable<PredefinedEventScalarFieldEnum>
  }


  /**
   * PredefinedEvent create
   */
  export type PredefinedEventCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedEvent
     */
    select?: PredefinedEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PredefinedEventInclude<ExtArgs> | null
    /**
     * The data needed to create a PredefinedEvent.
     */
    data: XOR<PredefinedEventCreateInput, PredefinedEventUncheckedCreateInput>
  }


  /**
   * PredefinedEvent createMany
   */
  export type PredefinedEventCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PredefinedEvents.
     */
    data: Enumerable<PredefinedEventCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * PredefinedEvent update
   */
  export type PredefinedEventUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedEvent
     */
    select?: PredefinedEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PredefinedEventInclude<ExtArgs> | null
    /**
     * The data needed to update a PredefinedEvent.
     */
    data: XOR<PredefinedEventUpdateInput, PredefinedEventUncheckedUpdateInput>
    /**
     * Choose, which PredefinedEvent to update.
     */
    where: PredefinedEventWhereUniqueInput
  }


  /**
   * PredefinedEvent updateMany
   */
  export type PredefinedEventUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PredefinedEvents.
     */
    data: XOR<PredefinedEventUpdateManyMutationInput, PredefinedEventUncheckedUpdateManyInput>
    /**
     * Filter which PredefinedEvents to update
     */
    where?: PredefinedEventWhereInput
  }


  /**
   * PredefinedEvent upsert
   */
  export type PredefinedEventUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedEvent
     */
    select?: PredefinedEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PredefinedEventInclude<ExtArgs> | null
    /**
     * The filter to search for the PredefinedEvent to update in case it exists.
     */
    where: PredefinedEventWhereUniqueInput
    /**
     * In case the PredefinedEvent found by the `where` argument doesn't exist, create a new PredefinedEvent with this data.
     */
    create: XOR<PredefinedEventCreateInput, PredefinedEventUncheckedCreateInput>
    /**
     * In case the PredefinedEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PredefinedEventUpdateInput, PredefinedEventUncheckedUpdateInput>
  }


  /**
   * PredefinedEvent delete
   */
  export type PredefinedEventDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedEvent
     */
    select?: PredefinedEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PredefinedEventInclude<ExtArgs> | null
    /**
     * Filter which PredefinedEvent to delete.
     */
    where: PredefinedEventWhereUniqueInput
  }


  /**
   * PredefinedEvent deleteMany
   */
  export type PredefinedEventDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which PredefinedEvents to delete
     */
    where?: PredefinedEventWhereInput
  }


  /**
   * PredefinedEvent.events
   */
  export type PredefinedEvent$eventsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: Enumerable<EventOrderByWithRelationInput>
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<EventScalarFieldEnum>
  }


  /**
   * PredefinedEvent.courses
   */
  export type PredefinedEvent$coursesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedEventOnCourses
     */
    select?: PredefinedEventOnCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PredefinedEventOnCoursesInclude<ExtArgs> | null
    where?: PredefinedEventOnCoursesWhereInput
    orderBy?: Enumerable<PredefinedEventOnCoursesOrderByWithRelationInput>
    cursor?: PredefinedEventOnCoursesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PredefinedEventOnCoursesScalarFieldEnum>
  }


  /**
   * PredefinedEvent without action
   */
  export type PredefinedEventArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedEvent
     */
    select?: PredefinedEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PredefinedEventInclude<ExtArgs> | null
  }



  /**
   * Model PredefinedEventOnCourses
   */


  export type AggregatePredefinedEventOnCourses = {
    _count: PredefinedEventOnCoursesCountAggregateOutputType | null
    _min: PredefinedEventOnCoursesMinAggregateOutputType | null
    _max: PredefinedEventOnCoursesMaxAggregateOutputType | null
  }

  export type PredefinedEventOnCoursesMinAggregateOutputType = {
    predefinedEventId: string | null
    courseId: string | null
  }

  export type PredefinedEventOnCoursesMaxAggregateOutputType = {
    predefinedEventId: string | null
    courseId: string | null
  }

  export type PredefinedEventOnCoursesCountAggregateOutputType = {
    predefinedEventId: number
    courseId: number
    _all: number
  }


  export type PredefinedEventOnCoursesMinAggregateInputType = {
    predefinedEventId?: true
    courseId?: true
  }

  export type PredefinedEventOnCoursesMaxAggregateInputType = {
    predefinedEventId?: true
    courseId?: true
  }

  export type PredefinedEventOnCoursesCountAggregateInputType = {
    predefinedEventId?: true
    courseId?: true
    _all?: true
  }

  export type PredefinedEventOnCoursesAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which PredefinedEventOnCourses to aggregate.
     */
    where?: PredefinedEventOnCoursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PredefinedEventOnCourses to fetch.
     */
    orderBy?: Enumerable<PredefinedEventOnCoursesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PredefinedEventOnCoursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PredefinedEventOnCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PredefinedEventOnCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PredefinedEventOnCourses
    **/
    _count?: true | PredefinedEventOnCoursesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PredefinedEventOnCoursesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PredefinedEventOnCoursesMaxAggregateInputType
  }

  export type GetPredefinedEventOnCoursesAggregateType<T extends PredefinedEventOnCoursesAggregateArgs> = {
        [P in keyof T & keyof AggregatePredefinedEventOnCourses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePredefinedEventOnCourses[P]>
      : GetScalarType<T[P], AggregatePredefinedEventOnCourses[P]>
  }




  export type PredefinedEventOnCoursesGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PredefinedEventOnCoursesWhereInput
    orderBy?: Enumerable<PredefinedEventOnCoursesOrderByWithAggregationInput>
    by: PredefinedEventOnCoursesScalarFieldEnum[]
    having?: PredefinedEventOnCoursesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PredefinedEventOnCoursesCountAggregateInputType | true
    _min?: PredefinedEventOnCoursesMinAggregateInputType
    _max?: PredefinedEventOnCoursesMaxAggregateInputType
  }


  export type PredefinedEventOnCoursesGroupByOutputType = {
    predefinedEventId: string
    courseId: string
    _count: PredefinedEventOnCoursesCountAggregateOutputType | null
    _min: PredefinedEventOnCoursesMinAggregateOutputType | null
    _max: PredefinedEventOnCoursesMaxAggregateOutputType | null
  }

  type GetPredefinedEventOnCoursesGroupByPayload<T extends PredefinedEventOnCoursesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PredefinedEventOnCoursesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PredefinedEventOnCoursesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PredefinedEventOnCoursesGroupByOutputType[P]>
            : GetScalarType<T[P], PredefinedEventOnCoursesGroupByOutputType[P]>
        }
      >
    >


  export type PredefinedEventOnCoursesSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    predefinedEventId?: boolean
    courseId?: boolean
    predefinedEvent?: boolean | PredefinedEventArgs<ExtArgs>
    course?: boolean | CourseArgs<ExtArgs>
  }, ExtArgs["result"]["predefinedEventOnCourses"]>

  export type PredefinedEventOnCoursesSelectScalar = {
    predefinedEventId?: boolean
    courseId?: boolean
  }

  export type PredefinedEventOnCoursesInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    predefinedEvent?: boolean | PredefinedEventArgs<ExtArgs>
    course?: boolean | CourseArgs<ExtArgs>
  }


  type PredefinedEventOnCoursesGetPayload<S extends boolean | null | undefined | PredefinedEventOnCoursesArgs> = $Types.GetResult<PredefinedEventOnCoursesPayload, S>

  type PredefinedEventOnCoursesCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<PredefinedEventOnCoursesFindManyArgs, 'select' | 'include'> & {
      select?: PredefinedEventOnCoursesCountAggregateInputType | true
    }

  export interface PredefinedEventOnCoursesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PredefinedEventOnCourses'], meta: { name: 'PredefinedEventOnCourses' } }
    /**
     * Find zero or one PredefinedEventOnCourses that matches the filter.
     * @param {PredefinedEventOnCoursesFindUniqueArgs} args - Arguments to find a PredefinedEventOnCourses
     * @example
     * // Get one PredefinedEventOnCourses
     * const predefinedEventOnCourses = await prisma.predefinedEventOnCourses.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PredefinedEventOnCoursesFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PredefinedEventOnCoursesFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'PredefinedEventOnCourses'> extends True ? Prisma__PredefinedEventOnCoursesClient<$Types.GetResult<PredefinedEventOnCoursesPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__PredefinedEventOnCoursesClient<$Types.GetResult<PredefinedEventOnCoursesPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one PredefinedEventOnCourses that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PredefinedEventOnCoursesFindUniqueOrThrowArgs} args - Arguments to find a PredefinedEventOnCourses
     * @example
     * // Get one PredefinedEventOnCourses
     * const predefinedEventOnCourses = await prisma.predefinedEventOnCourses.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PredefinedEventOnCoursesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PredefinedEventOnCoursesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PredefinedEventOnCoursesClient<$Types.GetResult<PredefinedEventOnCoursesPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first PredefinedEventOnCourses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredefinedEventOnCoursesFindFirstArgs} args - Arguments to find a PredefinedEventOnCourses
     * @example
     * // Get one PredefinedEventOnCourses
     * const predefinedEventOnCourses = await prisma.predefinedEventOnCourses.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PredefinedEventOnCoursesFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PredefinedEventOnCoursesFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'PredefinedEventOnCourses'> extends True ? Prisma__PredefinedEventOnCoursesClient<$Types.GetResult<PredefinedEventOnCoursesPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__PredefinedEventOnCoursesClient<$Types.GetResult<PredefinedEventOnCoursesPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first PredefinedEventOnCourses that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredefinedEventOnCoursesFindFirstOrThrowArgs} args - Arguments to find a PredefinedEventOnCourses
     * @example
     * // Get one PredefinedEventOnCourses
     * const predefinedEventOnCourses = await prisma.predefinedEventOnCourses.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PredefinedEventOnCoursesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PredefinedEventOnCoursesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PredefinedEventOnCoursesClient<$Types.GetResult<PredefinedEventOnCoursesPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more PredefinedEventOnCourses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredefinedEventOnCoursesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PredefinedEventOnCourses
     * const predefinedEventOnCourses = await prisma.predefinedEventOnCourses.findMany()
     * 
     * // Get first 10 PredefinedEventOnCourses
     * const predefinedEventOnCourses = await prisma.predefinedEventOnCourses.findMany({ take: 10 })
     * 
     * // Only select the `predefinedEventId`
     * const predefinedEventOnCoursesWithPredefinedEventIdOnly = await prisma.predefinedEventOnCourses.findMany({ select: { predefinedEventId: true } })
     * 
    **/
    findMany<T extends PredefinedEventOnCoursesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PredefinedEventOnCoursesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<PredefinedEventOnCoursesPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a PredefinedEventOnCourses.
     * @param {PredefinedEventOnCoursesCreateArgs} args - Arguments to create a PredefinedEventOnCourses.
     * @example
     * // Create one PredefinedEventOnCourses
     * const PredefinedEventOnCourses = await prisma.predefinedEventOnCourses.create({
     *   data: {
     *     // ... data to create a PredefinedEventOnCourses
     *   }
     * })
     * 
    **/
    create<T extends PredefinedEventOnCoursesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PredefinedEventOnCoursesCreateArgs<ExtArgs>>
    ): Prisma__PredefinedEventOnCoursesClient<$Types.GetResult<PredefinedEventOnCoursesPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many PredefinedEventOnCourses.
     *     @param {PredefinedEventOnCoursesCreateManyArgs} args - Arguments to create many PredefinedEventOnCourses.
     *     @example
     *     // Create many PredefinedEventOnCourses
     *     const predefinedEventOnCourses = await prisma.predefinedEventOnCourses.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PredefinedEventOnCoursesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PredefinedEventOnCoursesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PredefinedEventOnCourses.
     * @param {PredefinedEventOnCoursesDeleteArgs} args - Arguments to delete one PredefinedEventOnCourses.
     * @example
     * // Delete one PredefinedEventOnCourses
     * const PredefinedEventOnCourses = await prisma.predefinedEventOnCourses.delete({
     *   where: {
     *     // ... filter to delete one PredefinedEventOnCourses
     *   }
     * })
     * 
    **/
    delete<T extends PredefinedEventOnCoursesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PredefinedEventOnCoursesDeleteArgs<ExtArgs>>
    ): Prisma__PredefinedEventOnCoursesClient<$Types.GetResult<PredefinedEventOnCoursesPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one PredefinedEventOnCourses.
     * @param {PredefinedEventOnCoursesUpdateArgs} args - Arguments to update one PredefinedEventOnCourses.
     * @example
     * // Update one PredefinedEventOnCourses
     * const predefinedEventOnCourses = await prisma.predefinedEventOnCourses.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PredefinedEventOnCoursesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PredefinedEventOnCoursesUpdateArgs<ExtArgs>>
    ): Prisma__PredefinedEventOnCoursesClient<$Types.GetResult<PredefinedEventOnCoursesPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more PredefinedEventOnCourses.
     * @param {PredefinedEventOnCoursesDeleteManyArgs} args - Arguments to filter PredefinedEventOnCourses to delete.
     * @example
     * // Delete a few PredefinedEventOnCourses
     * const { count } = await prisma.predefinedEventOnCourses.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PredefinedEventOnCoursesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PredefinedEventOnCoursesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PredefinedEventOnCourses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredefinedEventOnCoursesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PredefinedEventOnCourses
     * const predefinedEventOnCourses = await prisma.predefinedEventOnCourses.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PredefinedEventOnCoursesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PredefinedEventOnCoursesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PredefinedEventOnCourses.
     * @param {PredefinedEventOnCoursesUpsertArgs} args - Arguments to update or create a PredefinedEventOnCourses.
     * @example
     * // Update or create a PredefinedEventOnCourses
     * const predefinedEventOnCourses = await prisma.predefinedEventOnCourses.upsert({
     *   create: {
     *     // ... data to create a PredefinedEventOnCourses
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PredefinedEventOnCourses we want to update
     *   }
     * })
    **/
    upsert<T extends PredefinedEventOnCoursesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PredefinedEventOnCoursesUpsertArgs<ExtArgs>>
    ): Prisma__PredefinedEventOnCoursesClient<$Types.GetResult<PredefinedEventOnCoursesPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of PredefinedEventOnCourses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredefinedEventOnCoursesCountArgs} args - Arguments to filter PredefinedEventOnCourses to count.
     * @example
     * // Count the number of PredefinedEventOnCourses
     * const count = await prisma.predefinedEventOnCourses.count({
     *   where: {
     *     // ... the filter for the PredefinedEventOnCourses we want to count
     *   }
     * })
    **/
    count<T extends PredefinedEventOnCoursesCountArgs>(
      args?: Subset<T, PredefinedEventOnCoursesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PredefinedEventOnCoursesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PredefinedEventOnCourses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredefinedEventOnCoursesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PredefinedEventOnCoursesAggregateArgs>(args: Subset<T, PredefinedEventOnCoursesAggregateArgs>): Prisma.PrismaPromise<GetPredefinedEventOnCoursesAggregateType<T>>

    /**
     * Group by PredefinedEventOnCourses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredefinedEventOnCoursesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PredefinedEventOnCoursesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PredefinedEventOnCoursesGroupByArgs['orderBy'] }
        : { orderBy?: PredefinedEventOnCoursesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PredefinedEventOnCoursesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPredefinedEventOnCoursesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for PredefinedEventOnCourses.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PredefinedEventOnCoursesClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    predefinedEvent<T extends PredefinedEventArgs<ExtArgs> = {}>(args?: Subset<T, PredefinedEventArgs<ExtArgs>>): Prisma__PredefinedEventClient<$Types.GetResult<PredefinedEventPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    course<T extends CourseArgs<ExtArgs> = {}>(args?: Subset<T, CourseArgs<ExtArgs>>): Prisma__CourseClient<$Types.GetResult<CoursePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * PredefinedEventOnCourses base type for findUnique actions
   */
  export type PredefinedEventOnCoursesFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedEventOnCourses
     */
    select?: PredefinedEventOnCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PredefinedEventOnCoursesInclude<ExtArgs> | null
    /**
     * Filter, which PredefinedEventOnCourses to fetch.
     */
    where: PredefinedEventOnCoursesWhereUniqueInput
  }

  /**
   * PredefinedEventOnCourses findUnique
   */
  export interface PredefinedEventOnCoursesFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends PredefinedEventOnCoursesFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PredefinedEventOnCourses findUniqueOrThrow
   */
  export type PredefinedEventOnCoursesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedEventOnCourses
     */
    select?: PredefinedEventOnCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PredefinedEventOnCoursesInclude<ExtArgs> | null
    /**
     * Filter, which PredefinedEventOnCourses to fetch.
     */
    where: PredefinedEventOnCoursesWhereUniqueInput
  }


  /**
   * PredefinedEventOnCourses base type for findFirst actions
   */
  export type PredefinedEventOnCoursesFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedEventOnCourses
     */
    select?: PredefinedEventOnCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PredefinedEventOnCoursesInclude<ExtArgs> | null
    /**
     * Filter, which PredefinedEventOnCourses to fetch.
     */
    where?: PredefinedEventOnCoursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PredefinedEventOnCourses to fetch.
     */
    orderBy?: Enumerable<PredefinedEventOnCoursesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PredefinedEventOnCourses.
     */
    cursor?: PredefinedEventOnCoursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PredefinedEventOnCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PredefinedEventOnCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PredefinedEventOnCourses.
     */
    distinct?: Enumerable<PredefinedEventOnCoursesScalarFieldEnum>
  }

  /**
   * PredefinedEventOnCourses findFirst
   */
  export interface PredefinedEventOnCoursesFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends PredefinedEventOnCoursesFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PredefinedEventOnCourses findFirstOrThrow
   */
  export type PredefinedEventOnCoursesFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedEventOnCourses
     */
    select?: PredefinedEventOnCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PredefinedEventOnCoursesInclude<ExtArgs> | null
    /**
     * Filter, which PredefinedEventOnCourses to fetch.
     */
    where?: PredefinedEventOnCoursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PredefinedEventOnCourses to fetch.
     */
    orderBy?: Enumerable<PredefinedEventOnCoursesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PredefinedEventOnCourses.
     */
    cursor?: PredefinedEventOnCoursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PredefinedEventOnCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PredefinedEventOnCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PredefinedEventOnCourses.
     */
    distinct?: Enumerable<PredefinedEventOnCoursesScalarFieldEnum>
  }


  /**
   * PredefinedEventOnCourses findMany
   */
  export type PredefinedEventOnCoursesFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedEventOnCourses
     */
    select?: PredefinedEventOnCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PredefinedEventOnCoursesInclude<ExtArgs> | null
    /**
     * Filter, which PredefinedEventOnCourses to fetch.
     */
    where?: PredefinedEventOnCoursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PredefinedEventOnCourses to fetch.
     */
    orderBy?: Enumerable<PredefinedEventOnCoursesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PredefinedEventOnCourses.
     */
    cursor?: PredefinedEventOnCoursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PredefinedEventOnCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PredefinedEventOnCourses.
     */
    skip?: number
    distinct?: Enumerable<PredefinedEventOnCoursesScalarFieldEnum>
  }


  /**
   * PredefinedEventOnCourses create
   */
  export type PredefinedEventOnCoursesCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedEventOnCourses
     */
    select?: PredefinedEventOnCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PredefinedEventOnCoursesInclude<ExtArgs> | null
    /**
     * The data needed to create a PredefinedEventOnCourses.
     */
    data: XOR<PredefinedEventOnCoursesCreateInput, PredefinedEventOnCoursesUncheckedCreateInput>
  }


  /**
   * PredefinedEventOnCourses createMany
   */
  export type PredefinedEventOnCoursesCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PredefinedEventOnCourses.
     */
    data: Enumerable<PredefinedEventOnCoursesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * PredefinedEventOnCourses update
   */
  export type PredefinedEventOnCoursesUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedEventOnCourses
     */
    select?: PredefinedEventOnCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PredefinedEventOnCoursesInclude<ExtArgs> | null
    /**
     * The data needed to update a PredefinedEventOnCourses.
     */
    data: XOR<PredefinedEventOnCoursesUpdateInput, PredefinedEventOnCoursesUncheckedUpdateInput>
    /**
     * Choose, which PredefinedEventOnCourses to update.
     */
    where: PredefinedEventOnCoursesWhereUniqueInput
  }


  /**
   * PredefinedEventOnCourses updateMany
   */
  export type PredefinedEventOnCoursesUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PredefinedEventOnCourses.
     */
    data: XOR<PredefinedEventOnCoursesUpdateManyMutationInput, PredefinedEventOnCoursesUncheckedUpdateManyInput>
    /**
     * Filter which PredefinedEventOnCourses to update
     */
    where?: PredefinedEventOnCoursesWhereInput
  }


  /**
   * PredefinedEventOnCourses upsert
   */
  export type PredefinedEventOnCoursesUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedEventOnCourses
     */
    select?: PredefinedEventOnCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PredefinedEventOnCoursesInclude<ExtArgs> | null
    /**
     * The filter to search for the PredefinedEventOnCourses to update in case it exists.
     */
    where: PredefinedEventOnCoursesWhereUniqueInput
    /**
     * In case the PredefinedEventOnCourses found by the `where` argument doesn't exist, create a new PredefinedEventOnCourses with this data.
     */
    create: XOR<PredefinedEventOnCoursesCreateInput, PredefinedEventOnCoursesUncheckedCreateInput>
    /**
     * In case the PredefinedEventOnCourses was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PredefinedEventOnCoursesUpdateInput, PredefinedEventOnCoursesUncheckedUpdateInput>
  }


  /**
   * PredefinedEventOnCourses delete
   */
  export type PredefinedEventOnCoursesDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedEventOnCourses
     */
    select?: PredefinedEventOnCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PredefinedEventOnCoursesInclude<ExtArgs> | null
    /**
     * Filter which PredefinedEventOnCourses to delete.
     */
    where: PredefinedEventOnCoursesWhereUniqueInput
  }


  /**
   * PredefinedEventOnCourses deleteMany
   */
  export type PredefinedEventOnCoursesDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which PredefinedEventOnCourses to delete
     */
    where?: PredefinedEventOnCoursesWhereInput
  }


  /**
   * PredefinedEventOnCourses without action
   */
  export type PredefinedEventOnCoursesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedEventOnCourses
     */
    select?: PredefinedEventOnCoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PredefinedEventOnCoursesInclude<ExtArgs> | null
  }



  /**
   * Model Event
   */


  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventAvgAggregateOutputType = {
    totalSlots: number | null
  }

  export type EventSumAggregateOutputType = {
    totalSlots: number | null
  }

  export type EventMinAggregateOutputType = {
    id: string | null
    startDate: Date | null
    endDate: Date | null
    totalSlots: number | null
    description: string | null
    predefinedEventId: string | null
    title: string | null
    isClub: boolean | null
    isHidden: boolean | null
    enableBooking: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    color: string | null
    recurrenceRule: string | null
    recurrenceEnd: Date | null
  }

  export type EventMaxAggregateOutputType = {
    id: string | null
    startDate: Date | null
    endDate: Date | null
    totalSlots: number | null
    description: string | null
    predefinedEventId: string | null
    title: string | null
    isClub: boolean | null
    isHidden: boolean | null
    enableBooking: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    color: string | null
    recurrenceRule: string | null
    recurrenceEnd: Date | null
  }

  export type EventCountAggregateOutputType = {
    id: number
    startDate: number
    endDate: number
    totalSlots: number
    description: number
    predefinedEventId: number
    title: number
    isClub: number
    isHidden: number
    enableBooking: number
    createdAt: number
    updatedAt: number
    color: number
    recurrenceRule: number
    recurrenceEnd: number
    _all: number
  }


  export type EventAvgAggregateInputType = {
    totalSlots?: true
  }

  export type EventSumAggregateInputType = {
    totalSlots?: true
  }

  export type EventMinAggregateInputType = {
    id?: true
    startDate?: true
    endDate?: true
    totalSlots?: true
    description?: true
    predefinedEventId?: true
    title?: true
    isClub?: true
    isHidden?: true
    enableBooking?: true
    createdAt?: true
    updatedAt?: true
    color?: true
    recurrenceRule?: true
    recurrenceEnd?: true
  }

  export type EventMaxAggregateInputType = {
    id?: true
    startDate?: true
    endDate?: true
    totalSlots?: true
    description?: true
    predefinedEventId?: true
    title?: true
    isClub?: true
    isHidden?: true
    enableBooking?: true
    createdAt?: true
    updatedAt?: true
    color?: true
    recurrenceRule?: true
    recurrenceEnd?: true
  }

  export type EventCountAggregateInputType = {
    id?: true
    startDate?: true
    endDate?: true
    totalSlots?: true
    description?: true
    predefinedEventId?: true
    title?: true
    isClub?: true
    isHidden?: true
    enableBooking?: true
    createdAt?: true
    updatedAt?: true
    color?: true
    recurrenceRule?: true
    recurrenceEnd?: true
    _all?: true
  }

  export type EventAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Event to aggregate.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: Enumerable<EventOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type EventGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
    orderBy?: Enumerable<EventOrderByWithAggregationInput>
    by: EventScalarFieldEnum[]
    having?: EventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _avg?: EventAvgAggregateInputType
    _sum?: EventSumAggregateInputType
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }


  export type EventGroupByOutputType = {
    id: string
    startDate: Date
    endDate: Date
    totalSlots: number
    description: string | null
    predefinedEventId: string | null
    title: string | null
    isClub: boolean
    isHidden: boolean
    enableBooking: boolean
    createdAt: Date
    updatedAt: Date
    color: string | null
    recurrenceRule: string | null
    recurrenceEnd: Date | null
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends EventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type EventSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    startDate?: boolean
    endDate?: boolean
    totalSlots?: boolean
    description?: boolean
    predefinedEventId?: boolean
    title?: boolean
    isClub?: boolean
    isHidden?: boolean
    enableBooking?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    color?: boolean
    recurrenceRule?: boolean
    recurrenceEnd?: boolean
    predefinedEvent?: boolean | PredefinedEventArgs<ExtArgs>
    users?: boolean | Event$usersArgs<ExtArgs>
    waitlist?: boolean | Event$waitlistArgs<ExtArgs>
    visitedUsers?: boolean | Event$visitedUsersArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectScalar = {
    id?: boolean
    startDate?: boolean
    endDate?: boolean
    totalSlots?: boolean
    description?: boolean
    predefinedEventId?: boolean
    title?: boolean
    isClub?: boolean
    isHidden?: boolean
    enableBooking?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    color?: boolean
    recurrenceRule?: boolean
    recurrenceEnd?: boolean
  }

  export type EventInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    predefinedEvent?: boolean | PredefinedEventArgs<ExtArgs>
    users?: boolean | Event$usersArgs<ExtArgs>
    waitlist?: boolean | Event$waitlistArgs<ExtArgs>
    visitedUsers?: boolean | Event$visitedUsersArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeArgs<ExtArgs>
  }


  type EventGetPayload<S extends boolean | null | undefined | EventArgs> = $Types.GetResult<EventPayload, S>

  type EventCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<EventFindManyArgs, 'select' | 'include'> & {
      select?: EventCountAggregateInputType | true
    }

  export interface EventDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Event'], meta: { name: 'Event' } }
    /**
     * Find zero or one Event that matches the filter.
     * @param {EventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EventFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EventFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Event'> extends True ? Prisma__EventClient<$Types.GetResult<EventPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__EventClient<$Types.GetResult<EventPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Event that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EventFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EventClient<$Types.GetResult<EventPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EventFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EventFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Event'> extends True ? Prisma__EventClient<$Types.GetResult<EventPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__EventClient<$Types.GetResult<EventPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Event that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EventFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EventFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EventClient<$Types.GetResult<EventPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventWithIdOnly = await prisma.event.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EventFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<EventPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Event.
     * @param {EventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
    **/
    create<T extends EventCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EventCreateArgs<ExtArgs>>
    ): Prisma__EventClient<$Types.GetResult<EventPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Events.
     *     @param {EventCreateManyArgs} args - Arguments to create many Events.
     *     @example
     *     // Create many Events
     *     const event = await prisma.event.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EventCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Event.
     * @param {EventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
    **/
    delete<T extends EventDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EventDeleteArgs<ExtArgs>>
    ): Prisma__EventClient<$Types.GetResult<EventPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Event.
     * @param {EventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EventUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EventUpdateArgs<ExtArgs>>
    ): Prisma__EventClient<$Types.GetResult<EventPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Events.
     * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EventDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EventUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EventUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Event.
     * @param {EventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
    **/
    upsert<T extends EventUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EventUpsertArgs<ExtArgs>>
    ): Prisma__EventClient<$Types.GetResult<EventPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventCountArgs>(
      args?: Subset<T, EventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EventClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    predefinedEvent<T extends PredefinedEventArgs<ExtArgs> = {}>(args?: Subset<T, PredefinedEventArgs<ExtArgs>>): Prisma__PredefinedEventClient<$Types.GetResult<PredefinedEventPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    users<T extends Event$usersArgs<ExtArgs> = {}>(args?: Subset<T, Event$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<UsersOnEventsPayload<ExtArgs>, T, 'findMany', never>| Null>;

    waitlist<T extends Event$waitlistArgs<ExtArgs> = {}>(args?: Subset<T, Event$waitlistArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<UsersOnEventsPayload<ExtArgs>, T, 'findMany', never>| Null>;

    visitedUsers<T extends Event$visitedUsersArgs<ExtArgs> = {}>(args?: Subset<T, Event$visitedUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<UsersOnEventsPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Event base type for findUnique actions
   */
  export type EventFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findUnique
   */
  export interface EventFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends EventFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Event findUniqueOrThrow
   */
  export type EventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }


  /**
   * Event base type for findFirst actions
   */
  export type EventFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: Enumerable<EventOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: Enumerable<EventScalarFieldEnum>
  }

  /**
   * Event findFirst
   */
  export interface EventFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends EventFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Event findFirstOrThrow
   */
  export type EventFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: Enumerable<EventOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: Enumerable<EventScalarFieldEnum>
  }


  /**
   * Event findMany
   */
  export type EventFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: Enumerable<EventOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: Enumerable<EventScalarFieldEnum>
  }


  /**
   * Event create
   */
  export type EventCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to create a Event.
     */
    data: XOR<EventCreateInput, EventUncheckedCreateInput>
  }


  /**
   * Event createMany
   */
  export type EventCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: Enumerable<EventCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Event update
   */
  export type EventUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to update a Event.
     */
    data: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    /**
     * Choose, which Event to update.
     */
    where: EventWhereUniqueInput
  }


  /**
   * Event updateMany
   */
  export type EventUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
  }


  /**
   * Event upsert
   */
  export type EventUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The filter to search for the Event to update in case it exists.
     */
    where: EventWhereUniqueInput
    /**
     * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
     */
    create: XOR<EventCreateInput, EventUncheckedCreateInput>
    /**
     * In case the Event was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventUpdateInput, EventUncheckedUpdateInput>
  }


  /**
   * Event delete
   */
  export type EventDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter which Event to delete.
     */
    where: EventWhereUniqueInput
  }


  /**
   * Event deleteMany
   */
  export type EventDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventWhereInput
  }


  /**
   * Event.users
   */
  export type Event$usersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersOnEvents
     */
    select?: UsersOnEventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersOnEventsInclude<ExtArgs> | null
    where?: UsersOnEventsWhereInput
    orderBy?: Enumerable<UsersOnEventsOrderByWithRelationInput>
    cursor?: UsersOnEventsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UsersOnEventsScalarFieldEnum>
  }


  /**
   * Event.waitlist
   */
  export type Event$waitlistArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersOnEvents
     */
    select?: UsersOnEventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersOnEventsInclude<ExtArgs> | null
    where?: UsersOnEventsWhereInput
    orderBy?: Enumerable<UsersOnEventsOrderByWithRelationInput>
    cursor?: UsersOnEventsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UsersOnEventsScalarFieldEnum>
  }


  /**
   * Event.visitedUsers
   */
  export type Event$visitedUsersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersOnEvents
     */
    select?: UsersOnEventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersOnEventsInclude<ExtArgs> | null
    where?: UsersOnEventsWhereInput
    orderBy?: Enumerable<UsersOnEventsOrderByWithRelationInput>
    cursor?: UsersOnEventsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UsersOnEventsScalarFieldEnum>
  }


  /**
   * Event without action
   */
  export type EventArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude<ExtArgs> | null
  }



  /**
   * Model UsersOnEvents
   */


  export type AggregateUsersOnEvents = {
    _count: UsersOnEventsCountAggregateOutputType | null
    _min: UsersOnEventsMinAggregateOutputType | null
    _max: UsersOnEventsMaxAggregateOutputType | null
  }

  export type UsersOnEventsMinAggregateOutputType = {
    userId: string | null
    eventId: string | null
    isCompleted: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    waitlistEventId: string | null
    visitedEventId: string | null
  }

  export type UsersOnEventsMaxAggregateOutputType = {
    userId: string | null
    eventId: string | null
    isCompleted: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    waitlistEventId: string | null
    visitedEventId: string | null
  }

  export type UsersOnEventsCountAggregateOutputType = {
    userId: number
    eventId: number
    isCompleted: number
    createdAt: number
    updatedAt: number
    waitlistEventId: number
    visitedEventId: number
    _all: number
  }


  export type UsersOnEventsMinAggregateInputType = {
    userId?: true
    eventId?: true
    isCompleted?: true
    createdAt?: true
    updatedAt?: true
    waitlistEventId?: true
    visitedEventId?: true
  }

  export type UsersOnEventsMaxAggregateInputType = {
    userId?: true
    eventId?: true
    isCompleted?: true
    createdAt?: true
    updatedAt?: true
    waitlistEventId?: true
    visitedEventId?: true
  }

  export type UsersOnEventsCountAggregateInputType = {
    userId?: true
    eventId?: true
    isCompleted?: true
    createdAt?: true
    updatedAt?: true
    waitlistEventId?: true
    visitedEventId?: true
    _all?: true
  }

  export type UsersOnEventsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsersOnEvents to aggregate.
     */
    where?: UsersOnEventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsersOnEvents to fetch.
     */
    orderBy?: Enumerable<UsersOnEventsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersOnEventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsersOnEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsersOnEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UsersOnEvents
    **/
    _count?: true | UsersOnEventsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersOnEventsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersOnEventsMaxAggregateInputType
  }

  export type GetUsersOnEventsAggregateType<T extends UsersOnEventsAggregateArgs> = {
        [P in keyof T & keyof AggregateUsersOnEvents]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsersOnEvents[P]>
      : GetScalarType<T[P], AggregateUsersOnEvents[P]>
  }




  export type UsersOnEventsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UsersOnEventsWhereInput
    orderBy?: Enumerable<UsersOnEventsOrderByWithAggregationInput>
    by: UsersOnEventsScalarFieldEnum[]
    having?: UsersOnEventsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersOnEventsCountAggregateInputType | true
    _min?: UsersOnEventsMinAggregateInputType
    _max?: UsersOnEventsMaxAggregateInputType
  }


  export type UsersOnEventsGroupByOutputType = {
    userId: string
    eventId: string
    isCompleted: boolean
    createdAt: Date
    updatedAt: Date
    waitlistEventId: string | null
    visitedEventId: string | null
    _count: UsersOnEventsCountAggregateOutputType | null
    _min: UsersOnEventsMinAggregateOutputType | null
    _max: UsersOnEventsMaxAggregateOutputType | null
  }

  type GetUsersOnEventsGroupByPayload<T extends UsersOnEventsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UsersOnEventsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersOnEventsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersOnEventsGroupByOutputType[P]>
            : GetScalarType<T[P], UsersOnEventsGroupByOutputType[P]>
        }
      >
    >


  export type UsersOnEventsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    eventId?: boolean
    isCompleted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    waitlistEventId?: boolean
    visitedEventId?: boolean
    user?: boolean | UserArgs<ExtArgs>
    event?: boolean | EventArgs<ExtArgs>
    waitlistEvent?: boolean | EventArgs<ExtArgs>
    visitedEvent?: boolean | EventArgs<ExtArgs>
  }, ExtArgs["result"]["usersOnEvents"]>

  export type UsersOnEventsSelectScalar = {
    userId?: boolean
    eventId?: boolean
    isCompleted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    waitlistEventId?: boolean
    visitedEventId?: boolean
  }

  export type UsersOnEventsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
    event?: boolean | EventArgs<ExtArgs>
    waitlistEvent?: boolean | EventArgs<ExtArgs>
    visitedEvent?: boolean | EventArgs<ExtArgs>
  }


  type UsersOnEventsGetPayload<S extends boolean | null | undefined | UsersOnEventsArgs> = $Types.GetResult<UsersOnEventsPayload, S>

  type UsersOnEventsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UsersOnEventsFindManyArgs, 'select' | 'include'> & {
      select?: UsersOnEventsCountAggregateInputType | true
    }

  export interface UsersOnEventsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UsersOnEvents'], meta: { name: 'UsersOnEvents' } }
    /**
     * Find zero or one UsersOnEvents that matches the filter.
     * @param {UsersOnEventsFindUniqueArgs} args - Arguments to find a UsersOnEvents
     * @example
     * // Get one UsersOnEvents
     * const usersOnEvents = await prisma.usersOnEvents.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsersOnEventsFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UsersOnEventsFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UsersOnEvents'> extends True ? Prisma__UsersOnEventsClient<$Types.GetResult<UsersOnEventsPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__UsersOnEventsClient<$Types.GetResult<UsersOnEventsPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one UsersOnEvents that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsersOnEventsFindUniqueOrThrowArgs} args - Arguments to find a UsersOnEvents
     * @example
     * // Get one UsersOnEvents
     * const usersOnEvents = await prisma.usersOnEvents.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsersOnEventsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersOnEventsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UsersOnEventsClient<$Types.GetResult<UsersOnEventsPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first UsersOnEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersOnEventsFindFirstArgs} args - Arguments to find a UsersOnEvents
     * @example
     * // Get one UsersOnEvents
     * const usersOnEvents = await prisma.usersOnEvents.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsersOnEventsFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UsersOnEventsFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UsersOnEvents'> extends True ? Prisma__UsersOnEventsClient<$Types.GetResult<UsersOnEventsPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__UsersOnEventsClient<$Types.GetResult<UsersOnEventsPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first UsersOnEvents that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersOnEventsFindFirstOrThrowArgs} args - Arguments to find a UsersOnEvents
     * @example
     * // Get one UsersOnEvents
     * const usersOnEvents = await prisma.usersOnEvents.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsersOnEventsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersOnEventsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UsersOnEventsClient<$Types.GetResult<UsersOnEventsPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more UsersOnEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersOnEventsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UsersOnEvents
     * const usersOnEvents = await prisma.usersOnEvents.findMany()
     * 
     * // Get first 10 UsersOnEvents
     * const usersOnEvents = await prisma.usersOnEvents.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const usersOnEventsWithUserIdOnly = await prisma.usersOnEvents.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends UsersOnEventsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersOnEventsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<UsersOnEventsPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a UsersOnEvents.
     * @param {UsersOnEventsCreateArgs} args - Arguments to create a UsersOnEvents.
     * @example
     * // Create one UsersOnEvents
     * const UsersOnEvents = await prisma.usersOnEvents.create({
     *   data: {
     *     // ... data to create a UsersOnEvents
     *   }
     * })
     * 
    **/
    create<T extends UsersOnEventsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersOnEventsCreateArgs<ExtArgs>>
    ): Prisma__UsersOnEventsClient<$Types.GetResult<UsersOnEventsPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many UsersOnEvents.
     *     @param {UsersOnEventsCreateManyArgs} args - Arguments to create many UsersOnEvents.
     *     @example
     *     // Create many UsersOnEvents
     *     const usersOnEvents = await prisma.usersOnEvents.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsersOnEventsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersOnEventsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UsersOnEvents.
     * @param {UsersOnEventsDeleteArgs} args - Arguments to delete one UsersOnEvents.
     * @example
     * // Delete one UsersOnEvents
     * const UsersOnEvents = await prisma.usersOnEvents.delete({
     *   where: {
     *     // ... filter to delete one UsersOnEvents
     *   }
     * })
     * 
    **/
    delete<T extends UsersOnEventsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UsersOnEventsDeleteArgs<ExtArgs>>
    ): Prisma__UsersOnEventsClient<$Types.GetResult<UsersOnEventsPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one UsersOnEvents.
     * @param {UsersOnEventsUpdateArgs} args - Arguments to update one UsersOnEvents.
     * @example
     * // Update one UsersOnEvents
     * const usersOnEvents = await prisma.usersOnEvents.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsersOnEventsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersOnEventsUpdateArgs<ExtArgs>>
    ): Prisma__UsersOnEventsClient<$Types.GetResult<UsersOnEventsPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more UsersOnEvents.
     * @param {UsersOnEventsDeleteManyArgs} args - Arguments to filter UsersOnEvents to delete.
     * @example
     * // Delete a few UsersOnEvents
     * const { count } = await prisma.usersOnEvents.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsersOnEventsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersOnEventsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UsersOnEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersOnEventsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UsersOnEvents
     * const usersOnEvents = await prisma.usersOnEvents.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsersOnEventsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UsersOnEventsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UsersOnEvents.
     * @param {UsersOnEventsUpsertArgs} args - Arguments to update or create a UsersOnEvents.
     * @example
     * // Update or create a UsersOnEvents
     * const usersOnEvents = await prisma.usersOnEvents.upsert({
     *   create: {
     *     // ... data to create a UsersOnEvents
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UsersOnEvents we want to update
     *   }
     * })
    **/
    upsert<T extends UsersOnEventsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UsersOnEventsUpsertArgs<ExtArgs>>
    ): Prisma__UsersOnEventsClient<$Types.GetResult<UsersOnEventsPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of UsersOnEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersOnEventsCountArgs} args - Arguments to filter UsersOnEvents to count.
     * @example
     * // Count the number of UsersOnEvents
     * const count = await prisma.usersOnEvents.count({
     *   where: {
     *     // ... the filter for the UsersOnEvents we want to count
     *   }
     * })
    **/
    count<T extends UsersOnEventsCountArgs>(
      args?: Subset<T, UsersOnEventsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersOnEventsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UsersOnEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersOnEventsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersOnEventsAggregateArgs>(args: Subset<T, UsersOnEventsAggregateArgs>): Prisma.PrismaPromise<GetUsersOnEventsAggregateType<T>>

    /**
     * Group by UsersOnEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersOnEventsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersOnEventsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersOnEventsGroupByArgs['orderBy'] }
        : { orderBy?: UsersOnEventsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersOnEventsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersOnEventsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for UsersOnEvents.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UsersOnEventsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    event<T extends EventArgs<ExtArgs> = {}>(args?: Subset<T, EventArgs<ExtArgs>>): Prisma__EventClient<$Types.GetResult<EventPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    waitlistEvent<T extends EventArgs<ExtArgs> = {}>(args?: Subset<T, EventArgs<ExtArgs>>): Prisma__EventClient<$Types.GetResult<EventPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    visitedEvent<T extends EventArgs<ExtArgs> = {}>(args?: Subset<T, EventArgs<ExtArgs>>): Prisma__EventClient<$Types.GetResult<EventPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * UsersOnEvents base type for findUnique actions
   */
  export type UsersOnEventsFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersOnEvents
     */
    select?: UsersOnEventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersOnEventsInclude<ExtArgs> | null
    /**
     * Filter, which UsersOnEvents to fetch.
     */
    where: UsersOnEventsWhereUniqueInput
  }

  /**
   * UsersOnEvents findUnique
   */
  export interface UsersOnEventsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UsersOnEventsFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UsersOnEvents findUniqueOrThrow
   */
  export type UsersOnEventsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersOnEvents
     */
    select?: UsersOnEventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersOnEventsInclude<ExtArgs> | null
    /**
     * Filter, which UsersOnEvents to fetch.
     */
    where: UsersOnEventsWhereUniqueInput
  }


  /**
   * UsersOnEvents base type for findFirst actions
   */
  export type UsersOnEventsFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersOnEvents
     */
    select?: UsersOnEventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersOnEventsInclude<ExtArgs> | null
    /**
     * Filter, which UsersOnEvents to fetch.
     */
    where?: UsersOnEventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsersOnEvents to fetch.
     */
    orderBy?: Enumerable<UsersOnEventsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsersOnEvents.
     */
    cursor?: UsersOnEventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsersOnEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsersOnEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsersOnEvents.
     */
    distinct?: Enumerable<UsersOnEventsScalarFieldEnum>
  }

  /**
   * UsersOnEvents findFirst
   */
  export interface UsersOnEventsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UsersOnEventsFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UsersOnEvents findFirstOrThrow
   */
  export type UsersOnEventsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersOnEvents
     */
    select?: UsersOnEventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersOnEventsInclude<ExtArgs> | null
    /**
     * Filter, which UsersOnEvents to fetch.
     */
    where?: UsersOnEventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsersOnEvents to fetch.
     */
    orderBy?: Enumerable<UsersOnEventsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsersOnEvents.
     */
    cursor?: UsersOnEventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsersOnEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsersOnEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsersOnEvents.
     */
    distinct?: Enumerable<UsersOnEventsScalarFieldEnum>
  }


  /**
   * UsersOnEvents findMany
   */
  export type UsersOnEventsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersOnEvents
     */
    select?: UsersOnEventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersOnEventsInclude<ExtArgs> | null
    /**
     * Filter, which UsersOnEvents to fetch.
     */
    where?: UsersOnEventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsersOnEvents to fetch.
     */
    orderBy?: Enumerable<UsersOnEventsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UsersOnEvents.
     */
    cursor?: UsersOnEventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsersOnEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsersOnEvents.
     */
    skip?: number
    distinct?: Enumerable<UsersOnEventsScalarFieldEnum>
  }


  /**
   * UsersOnEvents create
   */
  export type UsersOnEventsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersOnEvents
     */
    select?: UsersOnEventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersOnEventsInclude<ExtArgs> | null
    /**
     * The data needed to create a UsersOnEvents.
     */
    data: XOR<UsersOnEventsCreateInput, UsersOnEventsUncheckedCreateInput>
  }


  /**
   * UsersOnEvents createMany
   */
  export type UsersOnEventsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UsersOnEvents.
     */
    data: Enumerable<UsersOnEventsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UsersOnEvents update
   */
  export type UsersOnEventsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersOnEvents
     */
    select?: UsersOnEventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersOnEventsInclude<ExtArgs> | null
    /**
     * The data needed to update a UsersOnEvents.
     */
    data: XOR<UsersOnEventsUpdateInput, UsersOnEventsUncheckedUpdateInput>
    /**
     * Choose, which UsersOnEvents to update.
     */
    where: UsersOnEventsWhereUniqueInput
  }


  /**
   * UsersOnEvents updateMany
   */
  export type UsersOnEventsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UsersOnEvents.
     */
    data: XOR<UsersOnEventsUpdateManyMutationInput, UsersOnEventsUncheckedUpdateManyInput>
    /**
     * Filter which UsersOnEvents to update
     */
    where?: UsersOnEventsWhereInput
  }


  /**
   * UsersOnEvents upsert
   */
  export type UsersOnEventsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersOnEvents
     */
    select?: UsersOnEventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersOnEventsInclude<ExtArgs> | null
    /**
     * The filter to search for the UsersOnEvents to update in case it exists.
     */
    where: UsersOnEventsWhereUniqueInput
    /**
     * In case the UsersOnEvents found by the `where` argument doesn't exist, create a new UsersOnEvents with this data.
     */
    create: XOR<UsersOnEventsCreateInput, UsersOnEventsUncheckedCreateInput>
    /**
     * In case the UsersOnEvents was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersOnEventsUpdateInput, UsersOnEventsUncheckedUpdateInput>
  }


  /**
   * UsersOnEvents delete
   */
  export type UsersOnEventsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersOnEvents
     */
    select?: UsersOnEventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersOnEventsInclude<ExtArgs> | null
    /**
     * Filter which UsersOnEvents to delete.
     */
    where: UsersOnEventsWhereUniqueInput
  }


  /**
   * UsersOnEvents deleteMany
   */
  export type UsersOnEventsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsersOnEvents to delete
     */
    where?: UsersOnEventsWhereInput
  }


  /**
   * UsersOnEvents without action
   */
  export type UsersOnEventsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersOnEvents
     */
    select?: UsersOnEventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersOnEventsInclude<ExtArgs> | null
  }



  /**
   * Model Chat
   */


  export type AggregateChat = {
    _count: ChatCountAggregateOutputType | null
    _min: ChatMinAggregateOutputType | null
    _max: ChatMaxAggregateOutputType | null
  }

  export type ChatMinAggregateOutputType = {
    id: string | null
    name: string | null
    pictureS3Key: string | null
    isGroup: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChatMaxAggregateOutputType = {
    id: string | null
    name: string | null
    pictureS3Key: string | null
    isGroup: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChatCountAggregateOutputType = {
    id: number
    name: number
    pictureS3Key: number
    isGroup: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ChatMinAggregateInputType = {
    id?: true
    name?: true
    pictureS3Key?: true
    isGroup?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChatMaxAggregateInputType = {
    id?: true
    name?: true
    pictureS3Key?: true
    isGroup?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChatCountAggregateInputType = {
    id?: true
    name?: true
    pictureS3Key?: true
    isGroup?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ChatAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chat to aggregate.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: Enumerable<ChatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Chats
    **/
    _count?: true | ChatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatMaxAggregateInputType
  }

  export type GetChatAggregateType<T extends ChatAggregateArgs> = {
        [P in keyof T & keyof AggregateChat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChat[P]>
      : GetScalarType<T[P], AggregateChat[P]>
  }




  export type ChatGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ChatWhereInput
    orderBy?: Enumerable<ChatOrderByWithAggregationInput>
    by: ChatScalarFieldEnum[]
    having?: ChatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatCountAggregateInputType | true
    _min?: ChatMinAggregateInputType
    _max?: ChatMaxAggregateInputType
  }


  export type ChatGroupByOutputType = {
    id: string
    name: string | null
    pictureS3Key: string | null
    isGroup: boolean
    createdAt: Date
    updatedAt: Date
    _count: ChatCountAggregateOutputType | null
    _min: ChatMinAggregateOutputType | null
    _max: ChatMaxAggregateOutputType | null
  }

  type GetChatGroupByPayload<T extends ChatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ChatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatGroupByOutputType[P]>
            : GetScalarType<T[P], ChatGroupByOutputType[P]>
        }
      >
    >


  export type ChatSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    pictureS3Key?: boolean
    isGroup?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    users?: boolean | Chat$usersArgs<ExtArgs>
    messages?: boolean | Chat$messagesArgs<ExtArgs>
    _count?: boolean | ChatCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["chat"]>

  export type ChatSelectScalar = {
    id?: boolean
    name?: boolean
    pictureS3Key?: boolean
    isGroup?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ChatInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    users?: boolean | Chat$usersArgs<ExtArgs>
    messages?: boolean | Chat$messagesArgs<ExtArgs>
    _count?: boolean | ChatCountOutputTypeArgs<ExtArgs>
  }


  type ChatGetPayload<S extends boolean | null | undefined | ChatArgs> = $Types.GetResult<ChatPayload, S>

  type ChatCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ChatFindManyArgs, 'select' | 'include'> & {
      select?: ChatCountAggregateInputType | true
    }

  export interface ChatDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Chat'], meta: { name: 'Chat' } }
    /**
     * Find zero or one Chat that matches the filter.
     * @param {ChatFindUniqueArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChatFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ChatFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Chat'> extends True ? Prisma__ChatClient<$Types.GetResult<ChatPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ChatClient<$Types.GetResult<ChatPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Chat that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChatFindUniqueOrThrowArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChatFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ChatClient<$Types.GetResult<ChatPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Chat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFindFirstArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChatFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ChatFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Chat'> extends True ? Prisma__ChatClient<$Types.GetResult<ChatPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ChatClient<$Types.GetResult<ChatPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Chat that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFindFirstOrThrowArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChatFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ChatClient<$Types.GetResult<ChatPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Chats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chats
     * const chats = await prisma.chat.findMany()
     * 
     * // Get first 10 Chats
     * const chats = await prisma.chat.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatWithIdOnly = await prisma.chat.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ChatFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ChatPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Chat.
     * @param {ChatCreateArgs} args - Arguments to create a Chat.
     * @example
     * // Create one Chat
     * const Chat = await prisma.chat.create({
     *   data: {
     *     // ... data to create a Chat
     *   }
     * })
     * 
    **/
    create<T extends ChatCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ChatCreateArgs<ExtArgs>>
    ): Prisma__ChatClient<$Types.GetResult<ChatPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Chats.
     *     @param {ChatCreateManyArgs} args - Arguments to create many Chats.
     *     @example
     *     // Create many Chats
     *     const chat = await prisma.chat.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChatCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Chat.
     * @param {ChatDeleteArgs} args - Arguments to delete one Chat.
     * @example
     * // Delete one Chat
     * const Chat = await prisma.chat.delete({
     *   where: {
     *     // ... filter to delete one Chat
     *   }
     * })
     * 
    **/
    delete<T extends ChatDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ChatDeleteArgs<ExtArgs>>
    ): Prisma__ChatClient<$Types.GetResult<ChatPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Chat.
     * @param {ChatUpdateArgs} args - Arguments to update one Chat.
     * @example
     * // Update one Chat
     * const chat = await prisma.chat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChatUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ChatUpdateArgs<ExtArgs>>
    ): Prisma__ChatClient<$Types.GetResult<ChatPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Chats.
     * @param {ChatDeleteManyArgs} args - Arguments to filter Chats to delete.
     * @example
     * // Delete a few Chats
     * const { count } = await prisma.chat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChatDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chats
     * const chat = await prisma.chat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChatUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ChatUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Chat.
     * @param {ChatUpsertArgs} args - Arguments to update or create a Chat.
     * @example
     * // Update or create a Chat
     * const chat = await prisma.chat.upsert({
     *   create: {
     *     // ... data to create a Chat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chat we want to update
     *   }
     * })
    **/
    upsert<T extends ChatUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ChatUpsertArgs<ExtArgs>>
    ): Prisma__ChatClient<$Types.GetResult<ChatPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Chats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatCountArgs} args - Arguments to filter Chats to count.
     * @example
     * // Count the number of Chats
     * const count = await prisma.chat.count({
     *   where: {
     *     // ... the filter for the Chats we want to count
     *   }
     * })
    **/
    count<T extends ChatCountArgs>(
      args?: Subset<T, ChatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatAggregateArgs>(args: Subset<T, ChatAggregateArgs>): Prisma.PrismaPromise<GetChatAggregateType<T>>

    /**
     * Group by Chat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatGroupByArgs['orderBy'] }
        : { orderBy?: ChatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Chat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ChatClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    users<T extends Chat$usersArgs<ExtArgs> = {}>(args?: Subset<T, Chat$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ChatsOnUsersPayload<ExtArgs>, T, 'findMany', never>| Null>;

    messages<T extends Chat$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Chat$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Chat base type for findUnique actions
   */
  export type ChatFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chat to fetch.
     */
    where: ChatWhereUniqueInput
  }

  /**
   * Chat findUnique
   */
  export interface ChatFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ChatFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Chat findUniqueOrThrow
   */
  export type ChatFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chat to fetch.
     */
    where: ChatWhereUniqueInput
  }


  /**
   * Chat base type for findFirst actions
   */
  export type ChatFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chat to fetch.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: Enumerable<ChatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chats.
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chats.
     */
    distinct?: Enumerable<ChatScalarFieldEnum>
  }

  /**
   * Chat findFirst
   */
  export interface ChatFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ChatFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Chat findFirstOrThrow
   */
  export type ChatFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chat to fetch.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: Enumerable<ChatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chats.
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chats.
     */
    distinct?: Enumerable<ChatScalarFieldEnum>
  }


  /**
   * Chat findMany
   */
  export type ChatFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chats to fetch.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: Enumerable<ChatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Chats.
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    distinct?: Enumerable<ChatScalarFieldEnum>
  }


  /**
   * Chat create
   */
  export type ChatCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * The data needed to create a Chat.
     */
    data: XOR<ChatCreateInput, ChatUncheckedCreateInput>
  }


  /**
   * Chat createMany
   */
  export type ChatCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Chats.
     */
    data: Enumerable<ChatCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Chat update
   */
  export type ChatUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * The data needed to update a Chat.
     */
    data: XOR<ChatUpdateInput, ChatUncheckedUpdateInput>
    /**
     * Choose, which Chat to update.
     */
    where: ChatWhereUniqueInput
  }


  /**
   * Chat updateMany
   */
  export type ChatUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Chats.
     */
    data: XOR<ChatUpdateManyMutationInput, ChatUncheckedUpdateManyInput>
    /**
     * Filter which Chats to update
     */
    where?: ChatWhereInput
  }


  /**
   * Chat upsert
   */
  export type ChatUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * The filter to search for the Chat to update in case it exists.
     */
    where: ChatWhereUniqueInput
    /**
     * In case the Chat found by the `where` argument doesn't exist, create a new Chat with this data.
     */
    create: XOR<ChatCreateInput, ChatUncheckedCreateInput>
    /**
     * In case the Chat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatUpdateInput, ChatUncheckedUpdateInput>
  }


  /**
   * Chat delete
   */
  export type ChatDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter which Chat to delete.
     */
    where: ChatWhereUniqueInput
  }


  /**
   * Chat deleteMany
   */
  export type ChatDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chats to delete
     */
    where?: ChatWhereInput
  }


  /**
   * Chat.users
   */
  export type Chat$usersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatsOnUsers
     */
    select?: ChatsOnUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatsOnUsersInclude<ExtArgs> | null
    where?: ChatsOnUsersWhereInput
    orderBy?: Enumerable<ChatsOnUsersOrderByWithRelationInput>
    cursor?: ChatsOnUsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChatsOnUsersScalarFieldEnum>
  }


  /**
   * Chat.messages
   */
  export type Chat$messagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: Enumerable<MessageOrderByWithRelationInput>
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MessageScalarFieldEnum>
  }


  /**
   * Chat without action
   */
  export type ChatArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
  }



  /**
   * Model ChatsOnUsers
   */


  export type AggregateChatsOnUsers = {
    _count: ChatsOnUsersCountAggregateOutputType | null
    _min: ChatsOnUsersMinAggregateOutputType | null
    _max: ChatsOnUsersMaxAggregateOutputType | null
  }

  export type ChatsOnUsersMinAggregateOutputType = {
    chatId: string | null
    userId: string | null
    lastSeenAt: Date | null
  }

  export type ChatsOnUsersMaxAggregateOutputType = {
    chatId: string | null
    userId: string | null
    lastSeenAt: Date | null
  }

  export type ChatsOnUsersCountAggregateOutputType = {
    chatId: number
    userId: number
    lastSeenAt: number
    _all: number
  }


  export type ChatsOnUsersMinAggregateInputType = {
    chatId?: true
    userId?: true
    lastSeenAt?: true
  }

  export type ChatsOnUsersMaxAggregateInputType = {
    chatId?: true
    userId?: true
    lastSeenAt?: true
  }

  export type ChatsOnUsersCountAggregateInputType = {
    chatId?: true
    userId?: true
    lastSeenAt?: true
    _all?: true
  }

  export type ChatsOnUsersAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatsOnUsers to aggregate.
     */
    where?: ChatsOnUsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatsOnUsers to fetch.
     */
    orderBy?: Enumerable<ChatsOnUsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatsOnUsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatsOnUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatsOnUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatsOnUsers
    **/
    _count?: true | ChatsOnUsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatsOnUsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatsOnUsersMaxAggregateInputType
  }

  export type GetChatsOnUsersAggregateType<T extends ChatsOnUsersAggregateArgs> = {
        [P in keyof T & keyof AggregateChatsOnUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatsOnUsers[P]>
      : GetScalarType<T[P], AggregateChatsOnUsers[P]>
  }




  export type ChatsOnUsersGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ChatsOnUsersWhereInput
    orderBy?: Enumerable<ChatsOnUsersOrderByWithAggregationInput>
    by: ChatsOnUsersScalarFieldEnum[]
    having?: ChatsOnUsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatsOnUsersCountAggregateInputType | true
    _min?: ChatsOnUsersMinAggregateInputType
    _max?: ChatsOnUsersMaxAggregateInputType
  }


  export type ChatsOnUsersGroupByOutputType = {
    chatId: string
    userId: string
    lastSeenAt: Date
    _count: ChatsOnUsersCountAggregateOutputType | null
    _min: ChatsOnUsersMinAggregateOutputType | null
    _max: ChatsOnUsersMaxAggregateOutputType | null
  }

  type GetChatsOnUsersGroupByPayload<T extends ChatsOnUsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ChatsOnUsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatsOnUsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatsOnUsersGroupByOutputType[P]>
            : GetScalarType<T[P], ChatsOnUsersGroupByOutputType[P]>
        }
      >
    >


  export type ChatsOnUsersSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    chatId?: boolean
    userId?: boolean
    lastSeenAt?: boolean
    chat?: boolean | ChatArgs<ExtArgs>
    user?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["chatsOnUsers"]>

  export type ChatsOnUsersSelectScalar = {
    chatId?: boolean
    userId?: boolean
    lastSeenAt?: boolean
  }

  export type ChatsOnUsersInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    chat?: boolean | ChatArgs<ExtArgs>
    user?: boolean | UserArgs<ExtArgs>
  }


  type ChatsOnUsersGetPayload<S extends boolean | null | undefined | ChatsOnUsersArgs> = $Types.GetResult<ChatsOnUsersPayload, S>

  type ChatsOnUsersCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ChatsOnUsersFindManyArgs, 'select' | 'include'> & {
      select?: ChatsOnUsersCountAggregateInputType | true
    }

  export interface ChatsOnUsersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatsOnUsers'], meta: { name: 'ChatsOnUsers' } }
    /**
     * Find zero or one ChatsOnUsers that matches the filter.
     * @param {ChatsOnUsersFindUniqueArgs} args - Arguments to find a ChatsOnUsers
     * @example
     * // Get one ChatsOnUsers
     * const chatsOnUsers = await prisma.chatsOnUsers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChatsOnUsersFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ChatsOnUsersFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ChatsOnUsers'> extends True ? Prisma__ChatsOnUsersClient<$Types.GetResult<ChatsOnUsersPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ChatsOnUsersClient<$Types.GetResult<ChatsOnUsersPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one ChatsOnUsers that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChatsOnUsersFindUniqueOrThrowArgs} args - Arguments to find a ChatsOnUsers
     * @example
     * // Get one ChatsOnUsers
     * const chatsOnUsers = await prisma.chatsOnUsers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChatsOnUsersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatsOnUsersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ChatsOnUsersClient<$Types.GetResult<ChatsOnUsersPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first ChatsOnUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatsOnUsersFindFirstArgs} args - Arguments to find a ChatsOnUsers
     * @example
     * // Get one ChatsOnUsers
     * const chatsOnUsers = await prisma.chatsOnUsers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChatsOnUsersFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ChatsOnUsersFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ChatsOnUsers'> extends True ? Prisma__ChatsOnUsersClient<$Types.GetResult<ChatsOnUsersPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ChatsOnUsersClient<$Types.GetResult<ChatsOnUsersPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first ChatsOnUsers that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatsOnUsersFindFirstOrThrowArgs} args - Arguments to find a ChatsOnUsers
     * @example
     * // Get one ChatsOnUsers
     * const chatsOnUsers = await prisma.chatsOnUsers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChatsOnUsersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatsOnUsersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ChatsOnUsersClient<$Types.GetResult<ChatsOnUsersPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more ChatsOnUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatsOnUsersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatsOnUsers
     * const chatsOnUsers = await prisma.chatsOnUsers.findMany()
     * 
     * // Get first 10 ChatsOnUsers
     * const chatsOnUsers = await prisma.chatsOnUsers.findMany({ take: 10 })
     * 
     * // Only select the `chatId`
     * const chatsOnUsersWithChatIdOnly = await prisma.chatsOnUsers.findMany({ select: { chatId: true } })
     * 
    **/
    findMany<T extends ChatsOnUsersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatsOnUsersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ChatsOnUsersPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a ChatsOnUsers.
     * @param {ChatsOnUsersCreateArgs} args - Arguments to create a ChatsOnUsers.
     * @example
     * // Create one ChatsOnUsers
     * const ChatsOnUsers = await prisma.chatsOnUsers.create({
     *   data: {
     *     // ... data to create a ChatsOnUsers
     *   }
     * })
     * 
    **/
    create<T extends ChatsOnUsersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ChatsOnUsersCreateArgs<ExtArgs>>
    ): Prisma__ChatsOnUsersClient<$Types.GetResult<ChatsOnUsersPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many ChatsOnUsers.
     *     @param {ChatsOnUsersCreateManyArgs} args - Arguments to create many ChatsOnUsers.
     *     @example
     *     // Create many ChatsOnUsers
     *     const chatsOnUsers = await prisma.chatsOnUsers.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChatsOnUsersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatsOnUsersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ChatsOnUsers.
     * @param {ChatsOnUsersDeleteArgs} args - Arguments to delete one ChatsOnUsers.
     * @example
     * // Delete one ChatsOnUsers
     * const ChatsOnUsers = await prisma.chatsOnUsers.delete({
     *   where: {
     *     // ... filter to delete one ChatsOnUsers
     *   }
     * })
     * 
    **/
    delete<T extends ChatsOnUsersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ChatsOnUsersDeleteArgs<ExtArgs>>
    ): Prisma__ChatsOnUsersClient<$Types.GetResult<ChatsOnUsersPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one ChatsOnUsers.
     * @param {ChatsOnUsersUpdateArgs} args - Arguments to update one ChatsOnUsers.
     * @example
     * // Update one ChatsOnUsers
     * const chatsOnUsers = await prisma.chatsOnUsers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChatsOnUsersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ChatsOnUsersUpdateArgs<ExtArgs>>
    ): Prisma__ChatsOnUsersClient<$Types.GetResult<ChatsOnUsersPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more ChatsOnUsers.
     * @param {ChatsOnUsersDeleteManyArgs} args - Arguments to filter ChatsOnUsers to delete.
     * @example
     * // Delete a few ChatsOnUsers
     * const { count } = await prisma.chatsOnUsers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChatsOnUsersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatsOnUsersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatsOnUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatsOnUsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatsOnUsers
     * const chatsOnUsers = await prisma.chatsOnUsers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChatsOnUsersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ChatsOnUsersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChatsOnUsers.
     * @param {ChatsOnUsersUpsertArgs} args - Arguments to update or create a ChatsOnUsers.
     * @example
     * // Update or create a ChatsOnUsers
     * const chatsOnUsers = await prisma.chatsOnUsers.upsert({
     *   create: {
     *     // ... data to create a ChatsOnUsers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatsOnUsers we want to update
     *   }
     * })
    **/
    upsert<T extends ChatsOnUsersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ChatsOnUsersUpsertArgs<ExtArgs>>
    ): Prisma__ChatsOnUsersClient<$Types.GetResult<ChatsOnUsersPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of ChatsOnUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatsOnUsersCountArgs} args - Arguments to filter ChatsOnUsers to count.
     * @example
     * // Count the number of ChatsOnUsers
     * const count = await prisma.chatsOnUsers.count({
     *   where: {
     *     // ... the filter for the ChatsOnUsers we want to count
     *   }
     * })
    **/
    count<T extends ChatsOnUsersCountArgs>(
      args?: Subset<T, ChatsOnUsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatsOnUsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatsOnUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatsOnUsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatsOnUsersAggregateArgs>(args: Subset<T, ChatsOnUsersAggregateArgs>): Prisma.PrismaPromise<GetChatsOnUsersAggregateType<T>>

    /**
     * Group by ChatsOnUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatsOnUsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatsOnUsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatsOnUsersGroupByArgs['orderBy'] }
        : { orderBy?: ChatsOnUsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatsOnUsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatsOnUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatsOnUsers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ChatsOnUsersClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    chat<T extends ChatArgs<ExtArgs> = {}>(args?: Subset<T, ChatArgs<ExtArgs>>): Prisma__ChatClient<$Types.GetResult<ChatPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ChatsOnUsers base type for findUnique actions
   */
  export type ChatsOnUsersFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatsOnUsers
     */
    select?: ChatsOnUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatsOnUsersInclude<ExtArgs> | null
    /**
     * Filter, which ChatsOnUsers to fetch.
     */
    where: ChatsOnUsersWhereUniqueInput
  }

  /**
   * ChatsOnUsers findUnique
   */
  export interface ChatsOnUsersFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ChatsOnUsersFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ChatsOnUsers findUniqueOrThrow
   */
  export type ChatsOnUsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatsOnUsers
     */
    select?: ChatsOnUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatsOnUsersInclude<ExtArgs> | null
    /**
     * Filter, which ChatsOnUsers to fetch.
     */
    where: ChatsOnUsersWhereUniqueInput
  }


  /**
   * ChatsOnUsers base type for findFirst actions
   */
  export type ChatsOnUsersFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatsOnUsers
     */
    select?: ChatsOnUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatsOnUsersInclude<ExtArgs> | null
    /**
     * Filter, which ChatsOnUsers to fetch.
     */
    where?: ChatsOnUsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatsOnUsers to fetch.
     */
    orderBy?: Enumerable<ChatsOnUsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatsOnUsers.
     */
    cursor?: ChatsOnUsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatsOnUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatsOnUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatsOnUsers.
     */
    distinct?: Enumerable<ChatsOnUsersScalarFieldEnum>
  }

  /**
   * ChatsOnUsers findFirst
   */
  export interface ChatsOnUsersFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ChatsOnUsersFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ChatsOnUsers findFirstOrThrow
   */
  export type ChatsOnUsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatsOnUsers
     */
    select?: ChatsOnUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatsOnUsersInclude<ExtArgs> | null
    /**
     * Filter, which ChatsOnUsers to fetch.
     */
    where?: ChatsOnUsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatsOnUsers to fetch.
     */
    orderBy?: Enumerable<ChatsOnUsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatsOnUsers.
     */
    cursor?: ChatsOnUsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatsOnUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatsOnUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatsOnUsers.
     */
    distinct?: Enumerable<ChatsOnUsersScalarFieldEnum>
  }


  /**
   * ChatsOnUsers findMany
   */
  export type ChatsOnUsersFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatsOnUsers
     */
    select?: ChatsOnUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatsOnUsersInclude<ExtArgs> | null
    /**
     * Filter, which ChatsOnUsers to fetch.
     */
    where?: ChatsOnUsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatsOnUsers to fetch.
     */
    orderBy?: Enumerable<ChatsOnUsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatsOnUsers.
     */
    cursor?: ChatsOnUsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatsOnUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatsOnUsers.
     */
    skip?: number
    distinct?: Enumerable<ChatsOnUsersScalarFieldEnum>
  }


  /**
   * ChatsOnUsers create
   */
  export type ChatsOnUsersCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatsOnUsers
     */
    select?: ChatsOnUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatsOnUsersInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatsOnUsers.
     */
    data: XOR<ChatsOnUsersCreateInput, ChatsOnUsersUncheckedCreateInput>
  }


  /**
   * ChatsOnUsers createMany
   */
  export type ChatsOnUsersCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatsOnUsers.
     */
    data: Enumerable<ChatsOnUsersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ChatsOnUsers update
   */
  export type ChatsOnUsersUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatsOnUsers
     */
    select?: ChatsOnUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatsOnUsersInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatsOnUsers.
     */
    data: XOR<ChatsOnUsersUpdateInput, ChatsOnUsersUncheckedUpdateInput>
    /**
     * Choose, which ChatsOnUsers to update.
     */
    where: ChatsOnUsersWhereUniqueInput
  }


  /**
   * ChatsOnUsers updateMany
   */
  export type ChatsOnUsersUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatsOnUsers.
     */
    data: XOR<ChatsOnUsersUpdateManyMutationInput, ChatsOnUsersUncheckedUpdateManyInput>
    /**
     * Filter which ChatsOnUsers to update
     */
    where?: ChatsOnUsersWhereInput
  }


  /**
   * ChatsOnUsers upsert
   */
  export type ChatsOnUsersUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatsOnUsers
     */
    select?: ChatsOnUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatsOnUsersInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatsOnUsers to update in case it exists.
     */
    where: ChatsOnUsersWhereUniqueInput
    /**
     * In case the ChatsOnUsers found by the `where` argument doesn't exist, create a new ChatsOnUsers with this data.
     */
    create: XOR<ChatsOnUsersCreateInput, ChatsOnUsersUncheckedCreateInput>
    /**
     * In case the ChatsOnUsers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatsOnUsersUpdateInput, ChatsOnUsersUncheckedUpdateInput>
  }


  /**
   * ChatsOnUsers delete
   */
  export type ChatsOnUsersDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatsOnUsers
     */
    select?: ChatsOnUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatsOnUsersInclude<ExtArgs> | null
    /**
     * Filter which ChatsOnUsers to delete.
     */
    where: ChatsOnUsersWhereUniqueInput
  }


  /**
   * ChatsOnUsers deleteMany
   */
  export type ChatsOnUsersDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatsOnUsers to delete
     */
    where?: ChatsOnUsersWhereInput
  }


  /**
   * ChatsOnUsers without action
   */
  export type ChatsOnUsersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatsOnUsers
     */
    select?: ChatsOnUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatsOnUsersInclude<ExtArgs> | null
  }



  /**
   * Model Message
   */


  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageMinAggregateOutputType = {
    id: string | null
    content: string | null
    deletedAt: Date | null
    senderId: string | null
    chatId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MessageMaxAggregateOutputType = {
    id: string | null
    content: string | null
    deletedAt: Date | null
    senderId: string | null
    chatId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    content: number
    deletedAt: number
    senderId: number
    chatId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MessageMinAggregateInputType = {
    id?: true
    content?: true
    deletedAt?: true
    senderId?: true
    chatId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    content?: true
    deletedAt?: true
    senderId?: true
    chatId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    content?: true
    deletedAt?: true
    senderId?: true
    chatId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: Enumerable<MessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: Enumerable<MessageOrderByWithAggregationInput>
    by: MessageScalarFieldEnum[]
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }


  export type MessageGroupByOutputType = {
    id: string
    content: string
    deletedAt: Date | null
    senderId: string
    chatId: string
    createdAt: Date
    updatedAt: Date
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    deletedAt?: boolean
    senderId?: boolean
    chatId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sender?: boolean | UserArgs<ExtArgs>
    chat?: boolean | ChatArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    id?: boolean
    content?: boolean
    deletedAt?: boolean
    senderId?: boolean
    chatId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MessageInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    sender?: boolean | UserArgs<ExtArgs>
    chat?: boolean | ChatArgs<ExtArgs>
  }


  type MessageGetPayload<S extends boolean | null | undefined | MessageArgs> = $Types.GetResult<MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<MessageFindManyArgs, 'select' | 'include'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MessageFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Message'> extends True ? Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Message that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MessageFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Message'> extends True ? Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Message that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MessageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
    **/
    create<T extends MessageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MessageCreateArgs<ExtArgs>>
    ): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Messages.
     *     @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     *     @example
     *     // Create many Messages
     *     const message = await prisma.message.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MessageCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
    **/
    delete<T extends MessageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>
    ): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MessageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>
    ): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MessageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MessageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
    **/
    upsert<T extends MessageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>
    ): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    sender<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    chat<T extends ChatArgs<ExtArgs> = {}>(args?: Subset<T, ChatArgs<ExtArgs>>): Prisma__ChatClient<$Types.GetResult<ChatPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Message base type for findUnique actions
   */
  export type MessageFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUnique
   */
  export interface MessageFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends MessageFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message base type for findFirst actions
   */
  export type MessageFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: Enumerable<MessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: Enumerable<MessageScalarFieldEnum>
  }

  /**
   * Message findFirst
   */
  export interface MessageFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends MessageFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: Enumerable<MessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: Enumerable<MessageScalarFieldEnum>
  }


  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: Enumerable<MessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: Enumerable<MessageScalarFieldEnum>
  }


  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }


  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: Enumerable<MessageCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
  }


  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }


  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
  }


  /**
   * Message without action
   */
  export type MessageArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
  }



  /**
   * Model QuizzesOnCourse
   */


  export type AggregateQuizzesOnCourse = {
    _count: QuizzesOnCourseCountAggregateOutputType | null
    _min: QuizzesOnCourseMinAggregateOutputType | null
    _max: QuizzesOnCourseMaxAggregateOutputType | null
  }

  export type QuizzesOnCourseMinAggregateOutputType = {
    quizId: string | null
    courseId: string | null
  }

  export type QuizzesOnCourseMaxAggregateOutputType = {
    quizId: string | null
    courseId: string | null
  }

  export type QuizzesOnCourseCountAggregateOutputType = {
    quizId: number
    courseId: number
    _all: number
  }


  export type QuizzesOnCourseMinAggregateInputType = {
    quizId?: true
    courseId?: true
  }

  export type QuizzesOnCourseMaxAggregateInputType = {
    quizId?: true
    courseId?: true
  }

  export type QuizzesOnCourseCountAggregateInputType = {
    quizId?: true
    courseId?: true
    _all?: true
  }

  export type QuizzesOnCourseAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuizzesOnCourse to aggregate.
     */
    where?: QuizzesOnCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuizzesOnCourses to fetch.
     */
    orderBy?: Enumerable<QuizzesOnCourseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuizzesOnCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuizzesOnCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuizzesOnCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuizzesOnCourses
    **/
    _count?: true | QuizzesOnCourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuizzesOnCourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuizzesOnCourseMaxAggregateInputType
  }

  export type GetQuizzesOnCourseAggregateType<T extends QuizzesOnCourseAggregateArgs> = {
        [P in keyof T & keyof AggregateQuizzesOnCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuizzesOnCourse[P]>
      : GetScalarType<T[P], AggregateQuizzesOnCourse[P]>
  }




  export type QuizzesOnCourseGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: QuizzesOnCourseWhereInput
    orderBy?: Enumerable<QuizzesOnCourseOrderByWithAggregationInput>
    by: QuizzesOnCourseScalarFieldEnum[]
    having?: QuizzesOnCourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuizzesOnCourseCountAggregateInputType | true
    _min?: QuizzesOnCourseMinAggregateInputType
    _max?: QuizzesOnCourseMaxAggregateInputType
  }


  export type QuizzesOnCourseGroupByOutputType = {
    quizId: string
    courseId: string
    _count: QuizzesOnCourseCountAggregateOutputType | null
    _min: QuizzesOnCourseMinAggregateOutputType | null
    _max: QuizzesOnCourseMaxAggregateOutputType | null
  }

  type GetQuizzesOnCourseGroupByPayload<T extends QuizzesOnCourseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<QuizzesOnCourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuizzesOnCourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuizzesOnCourseGroupByOutputType[P]>
            : GetScalarType<T[P], QuizzesOnCourseGroupByOutputType[P]>
        }
      >
    >


  export type QuizzesOnCourseSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    quizId?: boolean
    courseId?: boolean
    quiz?: boolean | QuizArgs<ExtArgs>
    course?: boolean | CourseArgs<ExtArgs>
  }, ExtArgs["result"]["quizzesOnCourse"]>

  export type QuizzesOnCourseSelectScalar = {
    quizId?: boolean
    courseId?: boolean
  }

  export type QuizzesOnCourseInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    quiz?: boolean | QuizArgs<ExtArgs>
    course?: boolean | CourseArgs<ExtArgs>
  }


  type QuizzesOnCourseGetPayload<S extends boolean | null | undefined | QuizzesOnCourseArgs> = $Types.GetResult<QuizzesOnCoursePayload, S>

  type QuizzesOnCourseCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<QuizzesOnCourseFindManyArgs, 'select' | 'include'> & {
      select?: QuizzesOnCourseCountAggregateInputType | true
    }

  export interface QuizzesOnCourseDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuizzesOnCourse'], meta: { name: 'QuizzesOnCourse' } }
    /**
     * Find zero or one QuizzesOnCourse that matches the filter.
     * @param {QuizzesOnCourseFindUniqueArgs} args - Arguments to find a QuizzesOnCourse
     * @example
     * // Get one QuizzesOnCourse
     * const quizzesOnCourse = await prisma.quizzesOnCourse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends QuizzesOnCourseFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, QuizzesOnCourseFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'QuizzesOnCourse'> extends True ? Prisma__QuizzesOnCourseClient<$Types.GetResult<QuizzesOnCoursePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__QuizzesOnCourseClient<$Types.GetResult<QuizzesOnCoursePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one QuizzesOnCourse that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {QuizzesOnCourseFindUniqueOrThrowArgs} args - Arguments to find a QuizzesOnCourse
     * @example
     * // Get one QuizzesOnCourse
     * const quizzesOnCourse = await prisma.quizzesOnCourse.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends QuizzesOnCourseFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, QuizzesOnCourseFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__QuizzesOnCourseClient<$Types.GetResult<QuizzesOnCoursePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first QuizzesOnCourse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizzesOnCourseFindFirstArgs} args - Arguments to find a QuizzesOnCourse
     * @example
     * // Get one QuizzesOnCourse
     * const quizzesOnCourse = await prisma.quizzesOnCourse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends QuizzesOnCourseFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, QuizzesOnCourseFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'QuizzesOnCourse'> extends True ? Prisma__QuizzesOnCourseClient<$Types.GetResult<QuizzesOnCoursePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__QuizzesOnCourseClient<$Types.GetResult<QuizzesOnCoursePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first QuizzesOnCourse that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizzesOnCourseFindFirstOrThrowArgs} args - Arguments to find a QuizzesOnCourse
     * @example
     * // Get one QuizzesOnCourse
     * const quizzesOnCourse = await prisma.quizzesOnCourse.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends QuizzesOnCourseFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, QuizzesOnCourseFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__QuizzesOnCourseClient<$Types.GetResult<QuizzesOnCoursePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more QuizzesOnCourses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizzesOnCourseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuizzesOnCourses
     * const quizzesOnCourses = await prisma.quizzesOnCourse.findMany()
     * 
     * // Get first 10 QuizzesOnCourses
     * const quizzesOnCourses = await prisma.quizzesOnCourse.findMany({ take: 10 })
     * 
     * // Only select the `quizId`
     * const quizzesOnCourseWithQuizIdOnly = await prisma.quizzesOnCourse.findMany({ select: { quizId: true } })
     * 
    **/
    findMany<T extends QuizzesOnCourseFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, QuizzesOnCourseFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<QuizzesOnCoursePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a QuizzesOnCourse.
     * @param {QuizzesOnCourseCreateArgs} args - Arguments to create a QuizzesOnCourse.
     * @example
     * // Create one QuizzesOnCourse
     * const QuizzesOnCourse = await prisma.quizzesOnCourse.create({
     *   data: {
     *     // ... data to create a QuizzesOnCourse
     *   }
     * })
     * 
    **/
    create<T extends QuizzesOnCourseCreateArgs<ExtArgs>>(
      args: SelectSubset<T, QuizzesOnCourseCreateArgs<ExtArgs>>
    ): Prisma__QuizzesOnCourseClient<$Types.GetResult<QuizzesOnCoursePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many QuizzesOnCourses.
     *     @param {QuizzesOnCourseCreateManyArgs} args - Arguments to create many QuizzesOnCourses.
     *     @example
     *     // Create many QuizzesOnCourses
     *     const quizzesOnCourse = await prisma.quizzesOnCourse.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends QuizzesOnCourseCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, QuizzesOnCourseCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a QuizzesOnCourse.
     * @param {QuizzesOnCourseDeleteArgs} args - Arguments to delete one QuizzesOnCourse.
     * @example
     * // Delete one QuizzesOnCourse
     * const QuizzesOnCourse = await prisma.quizzesOnCourse.delete({
     *   where: {
     *     // ... filter to delete one QuizzesOnCourse
     *   }
     * })
     * 
    **/
    delete<T extends QuizzesOnCourseDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, QuizzesOnCourseDeleteArgs<ExtArgs>>
    ): Prisma__QuizzesOnCourseClient<$Types.GetResult<QuizzesOnCoursePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one QuizzesOnCourse.
     * @param {QuizzesOnCourseUpdateArgs} args - Arguments to update one QuizzesOnCourse.
     * @example
     * // Update one QuizzesOnCourse
     * const quizzesOnCourse = await prisma.quizzesOnCourse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends QuizzesOnCourseUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, QuizzesOnCourseUpdateArgs<ExtArgs>>
    ): Prisma__QuizzesOnCourseClient<$Types.GetResult<QuizzesOnCoursePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more QuizzesOnCourses.
     * @param {QuizzesOnCourseDeleteManyArgs} args - Arguments to filter QuizzesOnCourses to delete.
     * @example
     * // Delete a few QuizzesOnCourses
     * const { count } = await prisma.quizzesOnCourse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends QuizzesOnCourseDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, QuizzesOnCourseDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuizzesOnCourses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizzesOnCourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuizzesOnCourses
     * const quizzesOnCourse = await prisma.quizzesOnCourse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends QuizzesOnCourseUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, QuizzesOnCourseUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one QuizzesOnCourse.
     * @param {QuizzesOnCourseUpsertArgs} args - Arguments to update or create a QuizzesOnCourse.
     * @example
     * // Update or create a QuizzesOnCourse
     * const quizzesOnCourse = await prisma.quizzesOnCourse.upsert({
     *   create: {
     *     // ... data to create a QuizzesOnCourse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuizzesOnCourse we want to update
     *   }
     * })
    **/
    upsert<T extends QuizzesOnCourseUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, QuizzesOnCourseUpsertArgs<ExtArgs>>
    ): Prisma__QuizzesOnCourseClient<$Types.GetResult<QuizzesOnCoursePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of QuizzesOnCourses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizzesOnCourseCountArgs} args - Arguments to filter QuizzesOnCourses to count.
     * @example
     * // Count the number of QuizzesOnCourses
     * const count = await prisma.quizzesOnCourse.count({
     *   where: {
     *     // ... the filter for the QuizzesOnCourses we want to count
     *   }
     * })
    **/
    count<T extends QuizzesOnCourseCountArgs>(
      args?: Subset<T, QuizzesOnCourseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuizzesOnCourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuizzesOnCourse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizzesOnCourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuizzesOnCourseAggregateArgs>(args: Subset<T, QuizzesOnCourseAggregateArgs>): Prisma.PrismaPromise<GetQuizzesOnCourseAggregateType<T>>

    /**
     * Group by QuizzesOnCourse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizzesOnCourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuizzesOnCourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuizzesOnCourseGroupByArgs['orderBy'] }
        : { orderBy?: QuizzesOnCourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuizzesOnCourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuizzesOnCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for QuizzesOnCourse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__QuizzesOnCourseClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    quiz<T extends QuizArgs<ExtArgs> = {}>(args?: Subset<T, QuizArgs<ExtArgs>>): Prisma__QuizClient<$Types.GetResult<QuizPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    course<T extends CourseArgs<ExtArgs> = {}>(args?: Subset<T, CourseArgs<ExtArgs>>): Prisma__CourseClient<$Types.GetResult<CoursePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * QuizzesOnCourse base type for findUnique actions
   */
  export type QuizzesOnCourseFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizzesOnCourse
     */
    select?: QuizzesOnCourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuizzesOnCourseInclude<ExtArgs> | null
    /**
     * Filter, which QuizzesOnCourse to fetch.
     */
    where: QuizzesOnCourseWhereUniqueInput
  }

  /**
   * QuizzesOnCourse findUnique
   */
  export interface QuizzesOnCourseFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends QuizzesOnCourseFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * QuizzesOnCourse findUniqueOrThrow
   */
  export type QuizzesOnCourseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizzesOnCourse
     */
    select?: QuizzesOnCourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuizzesOnCourseInclude<ExtArgs> | null
    /**
     * Filter, which QuizzesOnCourse to fetch.
     */
    where: QuizzesOnCourseWhereUniqueInput
  }


  /**
   * QuizzesOnCourse base type for findFirst actions
   */
  export type QuizzesOnCourseFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizzesOnCourse
     */
    select?: QuizzesOnCourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuizzesOnCourseInclude<ExtArgs> | null
    /**
     * Filter, which QuizzesOnCourse to fetch.
     */
    where?: QuizzesOnCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuizzesOnCourses to fetch.
     */
    orderBy?: Enumerable<QuizzesOnCourseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuizzesOnCourses.
     */
    cursor?: QuizzesOnCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuizzesOnCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuizzesOnCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuizzesOnCourses.
     */
    distinct?: Enumerable<QuizzesOnCourseScalarFieldEnum>
  }

  /**
   * QuizzesOnCourse findFirst
   */
  export interface QuizzesOnCourseFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends QuizzesOnCourseFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * QuizzesOnCourse findFirstOrThrow
   */
  export type QuizzesOnCourseFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizzesOnCourse
     */
    select?: QuizzesOnCourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuizzesOnCourseInclude<ExtArgs> | null
    /**
     * Filter, which QuizzesOnCourse to fetch.
     */
    where?: QuizzesOnCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuizzesOnCourses to fetch.
     */
    orderBy?: Enumerable<QuizzesOnCourseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuizzesOnCourses.
     */
    cursor?: QuizzesOnCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuizzesOnCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuizzesOnCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuizzesOnCourses.
     */
    distinct?: Enumerable<QuizzesOnCourseScalarFieldEnum>
  }


  /**
   * QuizzesOnCourse findMany
   */
  export type QuizzesOnCourseFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizzesOnCourse
     */
    select?: QuizzesOnCourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuizzesOnCourseInclude<ExtArgs> | null
    /**
     * Filter, which QuizzesOnCourses to fetch.
     */
    where?: QuizzesOnCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuizzesOnCourses to fetch.
     */
    orderBy?: Enumerable<QuizzesOnCourseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuizzesOnCourses.
     */
    cursor?: QuizzesOnCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuizzesOnCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuizzesOnCourses.
     */
    skip?: number
    distinct?: Enumerable<QuizzesOnCourseScalarFieldEnum>
  }


  /**
   * QuizzesOnCourse create
   */
  export type QuizzesOnCourseCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizzesOnCourse
     */
    select?: QuizzesOnCourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuizzesOnCourseInclude<ExtArgs> | null
    /**
     * The data needed to create a QuizzesOnCourse.
     */
    data: XOR<QuizzesOnCourseCreateInput, QuizzesOnCourseUncheckedCreateInput>
  }


  /**
   * QuizzesOnCourse createMany
   */
  export type QuizzesOnCourseCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QuizzesOnCourses.
     */
    data: Enumerable<QuizzesOnCourseCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * QuizzesOnCourse update
   */
  export type QuizzesOnCourseUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizzesOnCourse
     */
    select?: QuizzesOnCourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuizzesOnCourseInclude<ExtArgs> | null
    /**
     * The data needed to update a QuizzesOnCourse.
     */
    data: XOR<QuizzesOnCourseUpdateInput, QuizzesOnCourseUncheckedUpdateInput>
    /**
     * Choose, which QuizzesOnCourse to update.
     */
    where: QuizzesOnCourseWhereUniqueInput
  }


  /**
   * QuizzesOnCourse updateMany
   */
  export type QuizzesOnCourseUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QuizzesOnCourses.
     */
    data: XOR<QuizzesOnCourseUpdateManyMutationInput, QuizzesOnCourseUncheckedUpdateManyInput>
    /**
     * Filter which QuizzesOnCourses to update
     */
    where?: QuizzesOnCourseWhereInput
  }


  /**
   * QuizzesOnCourse upsert
   */
  export type QuizzesOnCourseUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizzesOnCourse
     */
    select?: QuizzesOnCourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuizzesOnCourseInclude<ExtArgs> | null
    /**
     * The filter to search for the QuizzesOnCourse to update in case it exists.
     */
    where: QuizzesOnCourseWhereUniqueInput
    /**
     * In case the QuizzesOnCourse found by the `where` argument doesn't exist, create a new QuizzesOnCourse with this data.
     */
    create: XOR<QuizzesOnCourseCreateInput, QuizzesOnCourseUncheckedCreateInput>
    /**
     * In case the QuizzesOnCourse was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuizzesOnCourseUpdateInput, QuizzesOnCourseUncheckedUpdateInput>
  }


  /**
   * QuizzesOnCourse delete
   */
  export type QuizzesOnCourseDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizzesOnCourse
     */
    select?: QuizzesOnCourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuizzesOnCourseInclude<ExtArgs> | null
    /**
     * Filter which QuizzesOnCourse to delete.
     */
    where: QuizzesOnCourseWhereUniqueInput
  }


  /**
   * QuizzesOnCourse deleteMany
   */
  export type QuizzesOnCourseDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuizzesOnCourses to delete
     */
    where?: QuizzesOnCourseWhereInput
  }


  /**
   * QuizzesOnCourse without action
   */
  export type QuizzesOnCourseArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizzesOnCourse
     */
    select?: QuizzesOnCourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuizzesOnCourseInclude<ExtArgs> | null
  }



  /**
   * Model Quiz
   */


  export type AggregateQuiz = {
    _count: QuizCountAggregateOutputType | null
    _avg: QuizAvgAggregateOutputType | null
    _sum: QuizSumAggregateOutputType | null
    _min: QuizMinAggregateOutputType | null
    _max: QuizMaxAggregateOutputType | null
  }

  export type QuizAvgAggregateOutputType = {
    nQuestionsPerAttempt: number | null
  }

  export type QuizSumAggregateOutputType = {
    nQuestionsPerAttempt: number | null
  }

  export type QuizMinAggregateOutputType = {
    id: string | null
    name: string | null
    nQuestionsPerAttempt: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuizMaxAggregateOutputType = {
    id: string | null
    name: string | null
    nQuestionsPerAttempt: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuizCountAggregateOutputType = {
    id: number
    name: number
    nQuestionsPerAttempt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type QuizAvgAggregateInputType = {
    nQuestionsPerAttempt?: true
  }

  export type QuizSumAggregateInputType = {
    nQuestionsPerAttempt?: true
  }

  export type QuizMinAggregateInputType = {
    id?: true
    name?: true
    nQuestionsPerAttempt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuizMaxAggregateInputType = {
    id?: true
    name?: true
    nQuestionsPerAttempt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuizCountAggregateInputType = {
    id?: true
    name?: true
    nQuestionsPerAttempt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type QuizAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Quiz to aggregate.
     */
    where?: QuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quizzes to fetch.
     */
    orderBy?: Enumerable<QuizOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Quizzes
    **/
    _count?: true | QuizCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuizAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuizSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuizMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuizMaxAggregateInputType
  }

  export type GetQuizAggregateType<T extends QuizAggregateArgs> = {
        [P in keyof T & keyof AggregateQuiz]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuiz[P]>
      : GetScalarType<T[P], AggregateQuiz[P]>
  }




  export type QuizGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: QuizWhereInput
    orderBy?: Enumerable<QuizOrderByWithAggregationInput>
    by: QuizScalarFieldEnum[]
    having?: QuizScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuizCountAggregateInputType | true
    _avg?: QuizAvgAggregateInputType
    _sum?: QuizSumAggregateInputType
    _min?: QuizMinAggregateInputType
    _max?: QuizMaxAggregateInputType
  }


  export type QuizGroupByOutputType = {
    id: string
    name: string
    nQuestionsPerAttempt: number
    createdAt: Date
    updatedAt: Date
    _count: QuizCountAggregateOutputType | null
    _avg: QuizAvgAggregateOutputType | null
    _sum: QuizSumAggregateOutputType | null
    _min: QuizMinAggregateOutputType | null
    _max: QuizMaxAggregateOutputType | null
  }

  type GetQuizGroupByPayload<T extends QuizGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<QuizGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuizGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuizGroupByOutputType[P]>
            : GetScalarType<T[P], QuizGroupByOutputType[P]>
        }
      >
    >


  export type QuizSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    nQuestionsPerAttempt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    courses?: boolean | Quiz$coursesArgs<ExtArgs>
    questions?: boolean | Quiz$questionsArgs<ExtArgs>
    _count?: boolean | QuizCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["quiz"]>

  export type QuizSelectScalar = {
    id?: boolean
    name?: boolean
    nQuestionsPerAttempt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type QuizInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    courses?: boolean | Quiz$coursesArgs<ExtArgs>
    questions?: boolean | Quiz$questionsArgs<ExtArgs>
    _count?: boolean | QuizCountOutputTypeArgs<ExtArgs>
  }


  type QuizGetPayload<S extends boolean | null | undefined | QuizArgs> = $Types.GetResult<QuizPayload, S>

  type QuizCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<QuizFindManyArgs, 'select' | 'include'> & {
      select?: QuizCountAggregateInputType | true
    }

  export interface QuizDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Quiz'], meta: { name: 'Quiz' } }
    /**
     * Find zero or one Quiz that matches the filter.
     * @param {QuizFindUniqueArgs} args - Arguments to find a Quiz
     * @example
     * // Get one Quiz
     * const quiz = await prisma.quiz.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends QuizFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, QuizFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Quiz'> extends True ? Prisma__QuizClient<$Types.GetResult<QuizPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__QuizClient<$Types.GetResult<QuizPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Quiz that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {QuizFindUniqueOrThrowArgs} args - Arguments to find a Quiz
     * @example
     * // Get one Quiz
     * const quiz = await prisma.quiz.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends QuizFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, QuizFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__QuizClient<$Types.GetResult<QuizPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Quiz that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizFindFirstArgs} args - Arguments to find a Quiz
     * @example
     * // Get one Quiz
     * const quiz = await prisma.quiz.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends QuizFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, QuizFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Quiz'> extends True ? Prisma__QuizClient<$Types.GetResult<QuizPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__QuizClient<$Types.GetResult<QuizPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Quiz that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizFindFirstOrThrowArgs} args - Arguments to find a Quiz
     * @example
     * // Get one Quiz
     * const quiz = await prisma.quiz.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends QuizFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, QuizFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__QuizClient<$Types.GetResult<QuizPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Quizzes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Quizzes
     * const quizzes = await prisma.quiz.findMany()
     * 
     * // Get first 10 Quizzes
     * const quizzes = await prisma.quiz.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const quizWithIdOnly = await prisma.quiz.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends QuizFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, QuizFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<QuizPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Quiz.
     * @param {QuizCreateArgs} args - Arguments to create a Quiz.
     * @example
     * // Create one Quiz
     * const Quiz = await prisma.quiz.create({
     *   data: {
     *     // ... data to create a Quiz
     *   }
     * })
     * 
    **/
    create<T extends QuizCreateArgs<ExtArgs>>(
      args: SelectSubset<T, QuizCreateArgs<ExtArgs>>
    ): Prisma__QuizClient<$Types.GetResult<QuizPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Quizzes.
     *     @param {QuizCreateManyArgs} args - Arguments to create many Quizzes.
     *     @example
     *     // Create many Quizzes
     *     const quiz = await prisma.quiz.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends QuizCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, QuizCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Quiz.
     * @param {QuizDeleteArgs} args - Arguments to delete one Quiz.
     * @example
     * // Delete one Quiz
     * const Quiz = await prisma.quiz.delete({
     *   where: {
     *     // ... filter to delete one Quiz
     *   }
     * })
     * 
    **/
    delete<T extends QuizDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, QuizDeleteArgs<ExtArgs>>
    ): Prisma__QuizClient<$Types.GetResult<QuizPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Quiz.
     * @param {QuizUpdateArgs} args - Arguments to update one Quiz.
     * @example
     * // Update one Quiz
     * const quiz = await prisma.quiz.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends QuizUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, QuizUpdateArgs<ExtArgs>>
    ): Prisma__QuizClient<$Types.GetResult<QuizPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Quizzes.
     * @param {QuizDeleteManyArgs} args - Arguments to filter Quizzes to delete.
     * @example
     * // Delete a few Quizzes
     * const { count } = await prisma.quiz.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends QuizDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, QuizDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Quizzes
     * const quiz = await prisma.quiz.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends QuizUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, QuizUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Quiz.
     * @param {QuizUpsertArgs} args - Arguments to update or create a Quiz.
     * @example
     * // Update or create a Quiz
     * const quiz = await prisma.quiz.upsert({
     *   create: {
     *     // ... data to create a Quiz
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Quiz we want to update
     *   }
     * })
    **/
    upsert<T extends QuizUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, QuizUpsertArgs<ExtArgs>>
    ): Prisma__QuizClient<$Types.GetResult<QuizPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizCountArgs} args - Arguments to filter Quizzes to count.
     * @example
     * // Count the number of Quizzes
     * const count = await prisma.quiz.count({
     *   where: {
     *     // ... the filter for the Quizzes we want to count
     *   }
     * })
    **/
    count<T extends QuizCountArgs>(
      args?: Subset<T, QuizCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuizCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Quiz.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuizAggregateArgs>(args: Subset<T, QuizAggregateArgs>): Prisma.PrismaPromise<GetQuizAggregateType<T>>

    /**
     * Group by Quiz.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuizGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuizGroupByArgs['orderBy'] }
        : { orderBy?: QuizGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuizGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuizGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Quiz.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__QuizClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    courses<T extends Quiz$coursesArgs<ExtArgs> = {}>(args?: Subset<T, Quiz$coursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<QuizzesOnCoursePayload<ExtArgs>, T, 'findMany', never>| Null>;

    questions<T extends Quiz$questionsArgs<ExtArgs> = {}>(args?: Subset<T, Quiz$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<QuestionPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Quiz base type for findUnique actions
   */
  export type QuizFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * Filter, which Quiz to fetch.
     */
    where: QuizWhereUniqueInput
  }

  /**
   * Quiz findUnique
   */
  export interface QuizFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends QuizFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Quiz findUniqueOrThrow
   */
  export type QuizFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * Filter, which Quiz to fetch.
     */
    where: QuizWhereUniqueInput
  }


  /**
   * Quiz base type for findFirst actions
   */
  export type QuizFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * Filter, which Quiz to fetch.
     */
    where?: QuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quizzes to fetch.
     */
    orderBy?: Enumerable<QuizOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Quizzes.
     */
    cursor?: QuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Quizzes.
     */
    distinct?: Enumerable<QuizScalarFieldEnum>
  }

  /**
   * Quiz findFirst
   */
  export interface QuizFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends QuizFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Quiz findFirstOrThrow
   */
  export type QuizFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * Filter, which Quiz to fetch.
     */
    where?: QuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quizzes to fetch.
     */
    orderBy?: Enumerable<QuizOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Quizzes.
     */
    cursor?: QuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Quizzes.
     */
    distinct?: Enumerable<QuizScalarFieldEnum>
  }


  /**
   * Quiz findMany
   */
  export type QuizFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * Filter, which Quizzes to fetch.
     */
    where?: QuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quizzes to fetch.
     */
    orderBy?: Enumerable<QuizOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Quizzes.
     */
    cursor?: QuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quizzes.
     */
    skip?: number
    distinct?: Enumerable<QuizScalarFieldEnum>
  }


  /**
   * Quiz create
   */
  export type QuizCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * The data needed to create a Quiz.
     */
    data: XOR<QuizCreateInput, QuizUncheckedCreateInput>
  }


  /**
   * Quiz createMany
   */
  export type QuizCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Quizzes.
     */
    data: Enumerable<QuizCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Quiz update
   */
  export type QuizUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * The data needed to update a Quiz.
     */
    data: XOR<QuizUpdateInput, QuizUncheckedUpdateInput>
    /**
     * Choose, which Quiz to update.
     */
    where: QuizWhereUniqueInput
  }


  /**
   * Quiz updateMany
   */
  export type QuizUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Quizzes.
     */
    data: XOR<QuizUpdateManyMutationInput, QuizUncheckedUpdateManyInput>
    /**
     * Filter which Quizzes to update
     */
    where?: QuizWhereInput
  }


  /**
   * Quiz upsert
   */
  export type QuizUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * The filter to search for the Quiz to update in case it exists.
     */
    where: QuizWhereUniqueInput
    /**
     * In case the Quiz found by the `where` argument doesn't exist, create a new Quiz with this data.
     */
    create: XOR<QuizCreateInput, QuizUncheckedCreateInput>
    /**
     * In case the Quiz was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuizUpdateInput, QuizUncheckedUpdateInput>
  }


  /**
   * Quiz delete
   */
  export type QuizDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * Filter which Quiz to delete.
     */
    where: QuizWhereUniqueInput
  }


  /**
   * Quiz deleteMany
   */
  export type QuizDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Quizzes to delete
     */
    where?: QuizWhereInput
  }


  /**
   * Quiz.courses
   */
  export type Quiz$coursesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizzesOnCourse
     */
    select?: QuizzesOnCourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuizzesOnCourseInclude<ExtArgs> | null
    where?: QuizzesOnCourseWhereInput
    orderBy?: Enumerable<QuizzesOnCourseOrderByWithRelationInput>
    cursor?: QuizzesOnCourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<QuizzesOnCourseScalarFieldEnum>
  }


  /**
   * Quiz.questions
   */
  export type Quiz$questionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestionInclude<ExtArgs> | null
    where?: QuestionWhereInput
    orderBy?: Enumerable<QuestionOrderByWithRelationInput>
    cursor?: QuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<QuestionScalarFieldEnum>
  }


  /**
   * Quiz without action
   */
  export type QuizArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuizInclude<ExtArgs> | null
  }



  /**
   * Model Question
   */


  export type AggregateQuestion = {
    _count: QuestionCountAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  export type QuestionMinAggregateOutputType = {
    id: string | null
    content: string | null
    quizId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuestionMaxAggregateOutputType = {
    id: string | null
    content: string | null
    quizId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuestionCountAggregateOutputType = {
    id: number
    content: number
    quizId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type QuestionMinAggregateInputType = {
    id?: true
    content?: true
    quizId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuestionMaxAggregateInputType = {
    id?: true
    content?: true
    quizId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuestionCountAggregateInputType = {
    id?: true
    content?: true
    quizId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type QuestionAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Question to aggregate.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: Enumerable<QuestionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Questions
    **/
    _count?: true | QuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionMaxAggregateInputType
  }

  export type GetQuestionAggregateType<T extends QuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestion[P]>
      : GetScalarType<T[P], AggregateQuestion[P]>
  }




  export type QuestionGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
    orderBy?: Enumerable<QuestionOrderByWithAggregationInput>
    by: QuestionScalarFieldEnum[]
    having?: QuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionCountAggregateInputType | true
    _min?: QuestionMinAggregateInputType
    _max?: QuestionMaxAggregateInputType
  }


  export type QuestionGroupByOutputType = {
    id: string
    content: string
    quizId: string
    createdAt: Date
    updatedAt: Date
    _count: QuestionCountAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  type GetQuestionGroupByPayload<T extends QuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<QuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionGroupByOutputType[P]>
        }
      >
    >


  export type QuestionSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    quizId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    answers?: boolean | Question$answersArgs<ExtArgs>
    quiz?: boolean | QuizArgs<ExtArgs>
    _count?: boolean | QuestionCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectScalar = {
    id?: boolean
    content?: boolean
    quizId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type QuestionInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    answers?: boolean | Question$answersArgs<ExtArgs>
    quiz?: boolean | QuizArgs<ExtArgs>
    _count?: boolean | QuestionCountOutputTypeArgs<ExtArgs>
  }


  type QuestionGetPayload<S extends boolean | null | undefined | QuestionArgs> = $Types.GetResult<QuestionPayload, S>

  type QuestionCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<QuestionFindManyArgs, 'select' | 'include'> & {
      select?: QuestionCountAggregateInputType | true
    }

  export interface QuestionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Question'], meta: { name: 'Question' } }
    /**
     * Find zero or one Question that matches the filter.
     * @param {QuestionFindUniqueArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends QuestionFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, QuestionFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Question'> extends True ? Prisma__QuestionClient<$Types.GetResult<QuestionPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__QuestionClient<$Types.GetResult<QuestionPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Question that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {QuestionFindUniqueOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends QuestionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, QuestionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__QuestionClient<$Types.GetResult<QuestionPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Question that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends QuestionFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, QuestionFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Question'> extends True ? Prisma__QuestionClient<$Types.GetResult<QuestionPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__QuestionClient<$Types.GetResult<QuestionPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Question that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends QuestionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, QuestionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__QuestionClient<$Types.GetResult<QuestionPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.question.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.question.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionWithIdOnly = await prisma.question.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends QuestionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, QuestionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<QuestionPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Question.
     * @param {QuestionCreateArgs} args - Arguments to create a Question.
     * @example
     * // Create one Question
     * const Question = await prisma.question.create({
     *   data: {
     *     // ... data to create a Question
     *   }
     * })
     * 
    **/
    create<T extends QuestionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, QuestionCreateArgs<ExtArgs>>
    ): Prisma__QuestionClient<$Types.GetResult<QuestionPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Questions.
     *     @param {QuestionCreateManyArgs} args - Arguments to create many Questions.
     *     @example
     *     // Create many Questions
     *     const question = await prisma.question.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends QuestionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, QuestionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Question.
     * @param {QuestionDeleteArgs} args - Arguments to delete one Question.
     * @example
     * // Delete one Question
     * const Question = await prisma.question.delete({
     *   where: {
     *     // ... filter to delete one Question
     *   }
     * })
     * 
    **/
    delete<T extends QuestionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, QuestionDeleteArgs<ExtArgs>>
    ): Prisma__QuestionClient<$Types.GetResult<QuestionPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Question.
     * @param {QuestionUpdateArgs} args - Arguments to update one Question.
     * @example
     * // Update one Question
     * const question = await prisma.question.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends QuestionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, QuestionUpdateArgs<ExtArgs>>
    ): Prisma__QuestionClient<$Types.GetResult<QuestionPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Questions.
     * @param {QuestionDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.question.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends QuestionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, QuestionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends QuestionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, QuestionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Question.
     * @param {QuestionUpsertArgs} args - Arguments to update or create a Question.
     * @example
     * // Update or create a Question
     * const question = await prisma.question.upsert({
     *   create: {
     *     // ... data to create a Question
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Question we want to update
     *   }
     * })
    **/
    upsert<T extends QuestionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, QuestionUpsertArgs<ExtArgs>>
    ): Prisma__QuestionClient<$Types.GetResult<QuestionPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionCountArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.question.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count<T extends QuestionCountArgs>(
      args?: Subset<T, QuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionAggregateArgs>(args: Subset<T, QuestionAggregateArgs>): Prisma.PrismaPromise<GetQuestionAggregateType<T>>

    /**
     * Group by Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionGroupByArgs['orderBy'] }
        : { orderBy?: QuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Question.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__QuestionClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    answers<T extends Question$answersArgs<ExtArgs> = {}>(args?: Subset<T, Question$answersArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<AnswerPayload<ExtArgs>, T, 'findMany', never>| Null>;

    quiz<T extends QuizArgs<ExtArgs> = {}>(args?: Subset<T, QuizArgs<ExtArgs>>): Prisma__QuizClient<$Types.GetResult<QuizPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Question base type for findUnique actions
   */
  export type QuestionFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findUnique
   */
  export interface QuestionFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends QuestionFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Question findUniqueOrThrow
   */
  export type QuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }


  /**
   * Question base type for findFirst actions
   */
  export type QuestionFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: Enumerable<QuestionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: Enumerable<QuestionScalarFieldEnum>
  }

  /**
   * Question findFirst
   */
  export interface QuestionFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends QuestionFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Question findFirstOrThrow
   */
  export type QuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: Enumerable<QuestionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: Enumerable<QuestionScalarFieldEnum>
  }


  /**
   * Question findMany
   */
  export type QuestionFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Questions to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: Enumerable<QuestionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    distinct?: Enumerable<QuestionScalarFieldEnum>
  }


  /**
   * Question create
   */
  export type QuestionCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to create a Question.
     */
    data: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
  }


  /**
   * Question createMany
   */
  export type QuestionCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Questions.
     */
    data: Enumerable<QuestionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Question update
   */
  export type QuestionUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to update a Question.
     */
    data: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
    /**
     * Choose, which Question to update.
     */
    where: QuestionWhereUniqueInput
  }


  /**
   * Question updateMany
   */
  export type QuestionUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionWhereInput
  }


  /**
   * Question upsert
   */
  export type QuestionUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The filter to search for the Question to update in case it exists.
     */
    where: QuestionWhereUniqueInput
    /**
     * In case the Question found by the `where` argument doesn't exist, create a new Question with this data.
     */
    create: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
    /**
     * In case the Question was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
  }


  /**
   * Question delete
   */
  export type QuestionDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter which Question to delete.
     */
    where: QuestionWhereUniqueInput
  }


  /**
   * Question deleteMany
   */
  export type QuestionDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Questions to delete
     */
    where?: QuestionWhereInput
  }


  /**
   * Question.answers
   */
  export type Question$answersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnswerInclude<ExtArgs> | null
    where?: AnswerWhereInput
    orderBy?: Enumerable<AnswerOrderByWithRelationInput>
    cursor?: AnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AnswerScalarFieldEnum>
  }


  /**
   * Question without action
   */
  export type QuestionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestionInclude<ExtArgs> | null
  }



  /**
   * Model Answer
   */


  export type AggregateAnswer = {
    _count: AnswerCountAggregateOutputType | null
    _min: AnswerMinAggregateOutputType | null
    _max: AnswerMaxAggregateOutputType | null
  }

  export type AnswerMinAggregateOutputType = {
    id: string | null
    content: string | null
    isCorrect: boolean | null
    questionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AnswerMaxAggregateOutputType = {
    id: string | null
    content: string | null
    isCorrect: boolean | null
    questionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AnswerCountAggregateOutputType = {
    id: number
    content: number
    isCorrect: number
    questionId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AnswerMinAggregateInputType = {
    id?: true
    content?: true
    isCorrect?: true
    questionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AnswerMaxAggregateInputType = {
    id?: true
    content?: true
    isCorrect?: true
    questionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AnswerCountAggregateInputType = {
    id?: true
    content?: true
    isCorrect?: true
    questionId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AnswerAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Answer to aggregate.
     */
    where?: AnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Answers to fetch.
     */
    orderBy?: Enumerable<AnswerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Answers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Answers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Answers
    **/
    _count?: true | AnswerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnswerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnswerMaxAggregateInputType
  }

  export type GetAnswerAggregateType<T extends AnswerAggregateArgs> = {
        [P in keyof T & keyof AggregateAnswer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnswer[P]>
      : GetScalarType<T[P], AggregateAnswer[P]>
  }




  export type AnswerGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AnswerWhereInput
    orderBy?: Enumerable<AnswerOrderByWithAggregationInput>
    by: AnswerScalarFieldEnum[]
    having?: AnswerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnswerCountAggregateInputType | true
    _min?: AnswerMinAggregateInputType
    _max?: AnswerMaxAggregateInputType
  }


  export type AnswerGroupByOutputType = {
    id: string
    content: string
    isCorrect: boolean
    questionId: string
    createdAt: Date
    updatedAt: Date
    _count: AnswerCountAggregateOutputType | null
    _min: AnswerMinAggregateOutputType | null
    _max: AnswerMaxAggregateOutputType | null
  }

  type GetAnswerGroupByPayload<T extends AnswerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AnswerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnswerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnswerGroupByOutputType[P]>
            : GetScalarType<T[P], AnswerGroupByOutputType[P]>
        }
      >
    >


  export type AnswerSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    isCorrect?: boolean
    questionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    question?: boolean | QuestionArgs<ExtArgs>
  }, ExtArgs["result"]["answer"]>

  export type AnswerSelectScalar = {
    id?: boolean
    content?: boolean
    isCorrect?: boolean
    questionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AnswerInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionArgs<ExtArgs>
  }


  type AnswerGetPayload<S extends boolean | null | undefined | AnswerArgs> = $Types.GetResult<AnswerPayload, S>

  type AnswerCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AnswerFindManyArgs, 'select' | 'include'> & {
      select?: AnswerCountAggregateInputType | true
    }

  export interface AnswerDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Answer'], meta: { name: 'Answer' } }
    /**
     * Find zero or one Answer that matches the filter.
     * @param {AnswerFindUniqueArgs} args - Arguments to find a Answer
     * @example
     * // Get one Answer
     * const answer = await prisma.answer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AnswerFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AnswerFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Answer'> extends True ? Prisma__AnswerClient<$Types.GetResult<AnswerPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__AnswerClient<$Types.GetResult<AnswerPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Answer that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AnswerFindUniqueOrThrowArgs} args - Arguments to find a Answer
     * @example
     * // Get one Answer
     * const answer = await prisma.answer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AnswerFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AnswerFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AnswerClient<$Types.GetResult<AnswerPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Answer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerFindFirstArgs} args - Arguments to find a Answer
     * @example
     * // Get one Answer
     * const answer = await prisma.answer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AnswerFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AnswerFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Answer'> extends True ? Prisma__AnswerClient<$Types.GetResult<AnswerPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__AnswerClient<$Types.GetResult<AnswerPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Answer that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerFindFirstOrThrowArgs} args - Arguments to find a Answer
     * @example
     * // Get one Answer
     * const answer = await prisma.answer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AnswerFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AnswerFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AnswerClient<$Types.GetResult<AnswerPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Answers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Answers
     * const answers = await prisma.answer.findMany()
     * 
     * // Get first 10 Answers
     * const answers = await prisma.answer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const answerWithIdOnly = await prisma.answer.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AnswerFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AnswerFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<AnswerPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Answer.
     * @param {AnswerCreateArgs} args - Arguments to create a Answer.
     * @example
     * // Create one Answer
     * const Answer = await prisma.answer.create({
     *   data: {
     *     // ... data to create a Answer
     *   }
     * })
     * 
    **/
    create<T extends AnswerCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AnswerCreateArgs<ExtArgs>>
    ): Prisma__AnswerClient<$Types.GetResult<AnswerPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Answers.
     *     @param {AnswerCreateManyArgs} args - Arguments to create many Answers.
     *     @example
     *     // Create many Answers
     *     const answer = await prisma.answer.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AnswerCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AnswerCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Answer.
     * @param {AnswerDeleteArgs} args - Arguments to delete one Answer.
     * @example
     * // Delete one Answer
     * const Answer = await prisma.answer.delete({
     *   where: {
     *     // ... filter to delete one Answer
     *   }
     * })
     * 
    **/
    delete<T extends AnswerDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AnswerDeleteArgs<ExtArgs>>
    ): Prisma__AnswerClient<$Types.GetResult<AnswerPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Answer.
     * @param {AnswerUpdateArgs} args - Arguments to update one Answer.
     * @example
     * // Update one Answer
     * const answer = await prisma.answer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AnswerUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AnswerUpdateArgs<ExtArgs>>
    ): Prisma__AnswerClient<$Types.GetResult<AnswerPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Answers.
     * @param {AnswerDeleteManyArgs} args - Arguments to filter Answers to delete.
     * @example
     * // Delete a few Answers
     * const { count } = await prisma.answer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AnswerDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AnswerDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Answers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Answers
     * const answer = await prisma.answer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AnswerUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AnswerUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Answer.
     * @param {AnswerUpsertArgs} args - Arguments to update or create a Answer.
     * @example
     * // Update or create a Answer
     * const answer = await prisma.answer.upsert({
     *   create: {
     *     // ... data to create a Answer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Answer we want to update
     *   }
     * })
    **/
    upsert<T extends AnswerUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AnswerUpsertArgs<ExtArgs>>
    ): Prisma__AnswerClient<$Types.GetResult<AnswerPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Answers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerCountArgs} args - Arguments to filter Answers to count.
     * @example
     * // Count the number of Answers
     * const count = await prisma.answer.count({
     *   where: {
     *     // ... the filter for the Answers we want to count
     *   }
     * })
    **/
    count<T extends AnswerCountArgs>(
      args?: Subset<T, AnswerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnswerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Answer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnswerAggregateArgs>(args: Subset<T, AnswerAggregateArgs>): Prisma.PrismaPromise<GetAnswerAggregateType<T>>

    /**
     * Group by Answer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnswerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnswerGroupByArgs['orderBy'] }
        : { orderBy?: AnswerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnswerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnswerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Answer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AnswerClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    question<T extends QuestionArgs<ExtArgs> = {}>(args?: Subset<T, QuestionArgs<ExtArgs>>): Prisma__QuestionClient<$Types.GetResult<QuestionPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Answer base type for findUnique actions
   */
  export type AnswerFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnswerInclude<ExtArgs> | null
    /**
     * Filter, which Answer to fetch.
     */
    where: AnswerWhereUniqueInput
  }

  /**
   * Answer findUnique
   */
  export interface AnswerFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AnswerFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Answer findUniqueOrThrow
   */
  export type AnswerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnswerInclude<ExtArgs> | null
    /**
     * Filter, which Answer to fetch.
     */
    where: AnswerWhereUniqueInput
  }


  /**
   * Answer base type for findFirst actions
   */
  export type AnswerFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnswerInclude<ExtArgs> | null
    /**
     * Filter, which Answer to fetch.
     */
    where?: AnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Answers to fetch.
     */
    orderBy?: Enumerable<AnswerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Answers.
     */
    cursor?: AnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Answers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Answers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Answers.
     */
    distinct?: Enumerable<AnswerScalarFieldEnum>
  }

  /**
   * Answer findFirst
   */
  export interface AnswerFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AnswerFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Answer findFirstOrThrow
   */
  export type AnswerFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnswerInclude<ExtArgs> | null
    /**
     * Filter, which Answer to fetch.
     */
    where?: AnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Answers to fetch.
     */
    orderBy?: Enumerable<AnswerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Answers.
     */
    cursor?: AnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Answers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Answers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Answers.
     */
    distinct?: Enumerable<AnswerScalarFieldEnum>
  }


  /**
   * Answer findMany
   */
  export type AnswerFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnswerInclude<ExtArgs> | null
    /**
     * Filter, which Answers to fetch.
     */
    where?: AnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Answers to fetch.
     */
    orderBy?: Enumerable<AnswerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Answers.
     */
    cursor?: AnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Answers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Answers.
     */
    skip?: number
    distinct?: Enumerable<AnswerScalarFieldEnum>
  }


  /**
   * Answer create
   */
  export type AnswerCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnswerInclude<ExtArgs> | null
    /**
     * The data needed to create a Answer.
     */
    data: XOR<AnswerCreateInput, AnswerUncheckedCreateInput>
  }


  /**
   * Answer createMany
   */
  export type AnswerCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Answers.
     */
    data: Enumerable<AnswerCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Answer update
   */
  export type AnswerUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnswerInclude<ExtArgs> | null
    /**
     * The data needed to update a Answer.
     */
    data: XOR<AnswerUpdateInput, AnswerUncheckedUpdateInput>
    /**
     * Choose, which Answer to update.
     */
    where: AnswerWhereUniqueInput
  }


  /**
   * Answer updateMany
   */
  export type AnswerUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Answers.
     */
    data: XOR<AnswerUpdateManyMutationInput, AnswerUncheckedUpdateManyInput>
    /**
     * Filter which Answers to update
     */
    where?: AnswerWhereInput
  }


  /**
   * Answer upsert
   */
  export type AnswerUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnswerInclude<ExtArgs> | null
    /**
     * The filter to search for the Answer to update in case it exists.
     */
    where: AnswerWhereUniqueInput
    /**
     * In case the Answer found by the `where` argument doesn't exist, create a new Answer with this data.
     */
    create: XOR<AnswerCreateInput, AnswerUncheckedCreateInput>
    /**
     * In case the Answer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnswerUpdateInput, AnswerUncheckedUpdateInput>
  }


  /**
   * Answer delete
   */
  export type AnswerDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnswerInclude<ExtArgs> | null
    /**
     * Filter which Answer to delete.
     */
    where: AnswerWhereUniqueInput
  }


  /**
   * Answer deleteMany
   */
  export type AnswerDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Answers to delete
     */
    where?: AnswerWhereInput
  }


  /**
   * Answer without action
   */
  export type AnswerArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnswerInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    role: 'role',
    firstName: 'firstName',
    lastName: 'lastName',
    phoneNumber: 'phoneNumber',
    birthDate: 'birthDate',
    address: 'address',
    zipCode: 'zipCode',
    city: 'city',
    idNumber: 'idNumber',
    idIssueDate: 'idIssueDate',
    profilePicturePath: 'profilePicturePath',
    isInClub: 'isInClub',
    courseId: 'courseId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isActive: 'isActive',
    isCalendarEnable: 'isCalendarEnable',
    calendarBlockingDeadline: 'calendarBlockingDeadline',
    receiveEmailsOnNewEvent: 'receiveEmailsOnNewEvent'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const WebPushSubscriptionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    endpoint: 'endpoint',
    p256dh: 'p256dh',
    auth: 'auth',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    chatEnabled: 'chatEnabled',
    calendarEnabled: 'calendarEnabled'
  };

  export type WebPushSubscriptionScalarFieldEnum = (typeof WebPushSubscriptionScalarFieldEnum)[keyof typeof WebPushSubscriptionScalarFieldEnum]


  export const QuizAttemptScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type QuizAttemptScalarFieldEnum = (typeof QuizAttemptScalarFieldEnum)[keyof typeof QuizAttemptScalarFieldEnum]


  export const PasswordRecoveryTokenScalarFieldEnum: {
    id: 'id',
    token: 'token',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PasswordRecoveryTokenScalarFieldEnum = (typeof PasswordRecoveryTokenScalarFieldEnum)[keyof typeof PasswordRecoveryTokenScalarFieldEnum]


  export const EmailVerificationTokenScalarFieldEnum: {
    id: 'id',
    email: 'email',
    token: 'token',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmailVerificationTokenScalarFieldEnum = (typeof EmailVerificationTokenScalarFieldEnum)[keyof typeof EmailVerificationTokenScalarFieldEnum]


  export const ZoomMeetingScalarFieldEnum: {
    id: 'id',
    meetingId: 'meetingId',
    joinUrl: 'joinUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ZoomMeetingScalarFieldEnum = (typeof ZoomMeetingScalarFieldEnum)[keyof typeof ZoomMeetingScalarFieldEnum]


  export const VideoScalarFieldEnum: {
    id: 'id',
    url: 'url',
    title: 'title',
    date: 'date',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VideoScalarFieldEnum = (typeof VideoScalarFieldEnum)[keyof typeof VideoScalarFieldEnum]


  export const VideosOnCoursesScalarFieldEnum: {
    videoId: 'videoId',
    courseId: 'courseId'
  };

  export type VideosOnCoursesScalarFieldEnum = (typeof VideosOnCoursesScalarFieldEnum)[keyof typeof VideosOnCoursesScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    amount: 'amount',
    currency: 'currency',
    method: 'method',
    type: 'type',
    userId: 'userId',
    description: 'description',
    paidAt: 'paidAt',
    stripePaymentIntentId: 'stripePaymentIntentId',
    woocommerceOrderId: 'woocommerceOrderId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const FileScalarFieldEnum: {
    id: 'id',
    name: 'name',
    s3Key: 's3Key',
    contentType: 'contentType',
    folderId: 'folderId',
    courseId: 'courseId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FileScalarFieldEnum = (typeof FileScalarFieldEnum)[keyof typeof FileScalarFieldEnum]


  export const FolderScalarFieldEnum: {
    id: 'id',
    name: 'name',
    parentId: 'parentId',
    isRoot: 'isRoot',
    courseId: 'courseId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FolderScalarFieldEnum = (typeof FolderScalarFieldEnum)[keyof typeof FolderScalarFieldEnum]


  export const CourseScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CourseScalarFieldEnum = (typeof CourseScalarFieldEnum)[keyof typeof CourseScalarFieldEnum]


  export const PredefinedEventScalarFieldEnum: {
    id: 'id',
    title: 'title',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PredefinedEventScalarFieldEnum = (typeof PredefinedEventScalarFieldEnum)[keyof typeof PredefinedEventScalarFieldEnum]


  export const PredefinedEventOnCoursesScalarFieldEnum: {
    predefinedEventId: 'predefinedEventId',
    courseId: 'courseId'
  };

  export type PredefinedEventOnCoursesScalarFieldEnum = (typeof PredefinedEventOnCoursesScalarFieldEnum)[keyof typeof PredefinedEventOnCoursesScalarFieldEnum]


  export const EventScalarFieldEnum: {
    id: 'id',
    startDate: 'startDate',
    endDate: 'endDate',
    totalSlots: 'totalSlots',
    description: 'description',
    predefinedEventId: 'predefinedEventId',
    title: 'title',
    isClub: 'isClub',
    isHidden: 'isHidden',
    enableBooking: 'enableBooking',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    color: 'color',
    recurrenceRule: 'recurrenceRule',
    recurrenceEnd: 'recurrenceEnd'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const UsersOnEventsScalarFieldEnum: {
    userId: 'userId',
    eventId: 'eventId',
    isCompleted: 'isCompleted',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    waitlistEventId: 'waitlistEventId',
    visitedEventId: 'visitedEventId'
  };

  export type UsersOnEventsScalarFieldEnum = (typeof UsersOnEventsScalarFieldEnum)[keyof typeof UsersOnEventsScalarFieldEnum]


  export const ChatScalarFieldEnum: {
    id: 'id',
    name: 'name',
    pictureS3Key: 'pictureS3Key',
    isGroup: 'isGroup',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ChatScalarFieldEnum = (typeof ChatScalarFieldEnum)[keyof typeof ChatScalarFieldEnum]


  export const ChatsOnUsersScalarFieldEnum: {
    chatId: 'chatId',
    userId: 'userId',
    lastSeenAt: 'lastSeenAt'
  };

  export type ChatsOnUsersScalarFieldEnum = (typeof ChatsOnUsersScalarFieldEnum)[keyof typeof ChatsOnUsersScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    content: 'content',
    deletedAt: 'deletedAt',
    senderId: 'senderId',
    chatId: 'chatId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const QuizzesOnCourseScalarFieldEnum: {
    quizId: 'quizId',
    courseId: 'courseId'
  };

  export type QuizzesOnCourseScalarFieldEnum = (typeof QuizzesOnCourseScalarFieldEnum)[keyof typeof QuizzesOnCourseScalarFieldEnum]


  export const QuizScalarFieldEnum: {
    id: 'id',
    name: 'name',
    nQuestionsPerAttempt: 'nQuestionsPerAttempt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type QuizScalarFieldEnum = (typeof QuizScalarFieldEnum)[keyof typeof QuizScalarFieldEnum]


  export const QuestionScalarFieldEnum: {
    id: 'id',
    content: 'content',
    quizId: 'quizId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type QuestionScalarFieldEnum = (typeof QuestionScalarFieldEnum)[keyof typeof QuestionScalarFieldEnum]


  export const AnswerScalarFieldEnum: {
    id: 'id',
    content: 'content',
    isCorrect: 'isCorrect',
    questionId: 'questionId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AnswerScalarFieldEnum = (typeof AnswerScalarFieldEnum)[keyof typeof AnswerScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    role?: EnumRoleFilter | Role
    firstName?: StringNullableFilter | string | null
    lastName?: StringNullableFilter | string | null
    phoneNumber?: StringNullableFilter | string | null
    birthDate?: DateTimeNullableFilter | Date | string | null
    address?: StringNullableFilter | string | null
    zipCode?: StringNullableFilter | string | null
    city?: StringNullableFilter | string | null
    idNumber?: StringNullableFilter | string | null
    idIssueDate?: DateTimeNullableFilter | Date | string | null
    profilePicturePath?: StringNullableFilter | string | null
    isInClub?: BoolFilter | boolean
    courseId?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    isActive?: BoolFilter | boolean
    isCalendarEnable?: BoolFilter | boolean
    calendarBlockingDeadline?: DateTimeNullableFilter | Date | string | null
    receiveEmailsOnNewEvent?: BoolFilter | boolean
    payments?: PaymentListRelationFilter
    chats?: ChatsOnUsersListRelationFilter
    events?: UsersOnEventsListRelationFilter
    messages?: MessageListRelationFilter
    course?: XOR<CourseRelationFilter, CourseWhereInput> | null
    passwordRecoveryToken?: XOR<PasswordRecoveryTokenRelationFilter, PasswordRecoveryTokenWhereInput> | null
    quizAttempts?: QuizAttemptListRelationFilter
    WebPushSubscription?: WebPushSubscriptionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    birthDate?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    zipCode?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    idNumber?: SortOrderInput | SortOrder
    idIssueDate?: SortOrderInput | SortOrder
    profilePicturePath?: SortOrderInput | SortOrder
    isInClub?: SortOrder
    courseId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    isCalendarEnable?: SortOrder
    calendarBlockingDeadline?: SortOrderInput | SortOrder
    receiveEmailsOnNewEvent?: SortOrder
    payments?: PaymentOrderByRelationAggregateInput
    chats?: ChatsOnUsersOrderByRelationAggregateInput
    events?: UsersOnEventsOrderByRelationAggregateInput
    messages?: MessageOrderByRelationAggregateInput
    course?: CourseOrderByWithRelationInput
    passwordRecoveryToken?: PasswordRecoveryTokenOrderByWithRelationInput
    quizAttempts?: QuizAttemptOrderByRelationAggregateInput
    WebPushSubscription?: WebPushSubscriptionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
    phoneNumber?: string
    idNumber?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    birthDate?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    zipCode?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    idNumber?: SortOrderInput | SortOrder
    idIssueDate?: SortOrderInput | SortOrder
    profilePicturePath?: SortOrderInput | SortOrder
    isInClub?: SortOrder
    courseId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    isCalendarEnable?: SortOrder
    calendarBlockingDeadline?: SortOrderInput | SortOrder
    receiveEmailsOnNewEvent?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    role?: EnumRoleWithAggregatesFilter | Role
    firstName?: StringNullableWithAggregatesFilter | string | null
    lastName?: StringNullableWithAggregatesFilter | string | null
    phoneNumber?: StringNullableWithAggregatesFilter | string | null
    birthDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
    address?: StringNullableWithAggregatesFilter | string | null
    zipCode?: StringNullableWithAggregatesFilter | string | null
    city?: StringNullableWithAggregatesFilter | string | null
    idNumber?: StringNullableWithAggregatesFilter | string | null
    idIssueDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
    profilePicturePath?: StringNullableWithAggregatesFilter | string | null
    isInClub?: BoolWithAggregatesFilter | boolean
    courseId?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    isActive?: BoolWithAggregatesFilter | boolean
    isCalendarEnable?: BoolWithAggregatesFilter | boolean
    calendarBlockingDeadline?: DateTimeNullableWithAggregatesFilter | Date | string | null
    receiveEmailsOnNewEvent?: BoolWithAggregatesFilter | boolean
  }

  export type WebPushSubscriptionWhereInput = {
    AND?: Enumerable<WebPushSubscriptionWhereInput>
    OR?: Enumerable<WebPushSubscriptionWhereInput>
    NOT?: Enumerable<WebPushSubscriptionWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    endpoint?: StringFilter | string
    p256dh?: StringFilter | string
    auth?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    chatEnabled?: BoolFilter | boolean
    calendarEnabled?: BoolFilter | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type WebPushSubscriptionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    endpoint?: SortOrder
    p256dh?: SortOrder
    auth?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    chatEnabled?: SortOrder
    calendarEnabled?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type WebPushSubscriptionWhereUniqueInput = {
    id?: string
    endpoint?: string
  }

  export type WebPushSubscriptionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    endpoint?: SortOrder
    p256dh?: SortOrder
    auth?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    chatEnabled?: SortOrder
    calendarEnabled?: SortOrder
    _count?: WebPushSubscriptionCountOrderByAggregateInput
    _max?: WebPushSubscriptionMaxOrderByAggregateInput
    _min?: WebPushSubscriptionMinOrderByAggregateInput
  }

  export type WebPushSubscriptionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<WebPushSubscriptionScalarWhereWithAggregatesInput>
    OR?: Enumerable<WebPushSubscriptionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<WebPushSubscriptionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    endpoint?: StringWithAggregatesFilter | string
    p256dh?: StringWithAggregatesFilter | string
    auth?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    chatEnabled?: BoolWithAggregatesFilter | boolean
    calendarEnabled?: BoolWithAggregatesFilter | boolean
  }

  export type QuizAttemptWhereInput = {
    AND?: Enumerable<QuizAttemptWhereInput>
    OR?: Enumerable<QuizAttemptWhereInput>
    NOT?: Enumerable<QuizAttemptWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type QuizAttemptOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type QuizAttemptWhereUniqueInput = {
    id?: string
  }

  export type QuizAttemptOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: QuizAttemptCountOrderByAggregateInput
    _max?: QuizAttemptMaxOrderByAggregateInput
    _min?: QuizAttemptMinOrderByAggregateInput
  }

  export type QuizAttemptScalarWhereWithAggregatesInput = {
    AND?: Enumerable<QuizAttemptScalarWhereWithAggregatesInput>
    OR?: Enumerable<QuizAttemptScalarWhereWithAggregatesInput>
    NOT?: Enumerable<QuizAttemptScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type PasswordRecoveryTokenWhereInput = {
    AND?: Enumerable<PasswordRecoveryTokenWhereInput>
    OR?: Enumerable<PasswordRecoveryTokenWhereInput>
    NOT?: Enumerable<PasswordRecoveryTokenWhereInput>
    id?: StringFilter | string
    token?: StringFilter | string
    userId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type PasswordRecoveryTokenOrderByWithRelationInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type PasswordRecoveryTokenWhereUniqueInput = {
    id?: string
    userId?: string
  }

  export type PasswordRecoveryTokenOrderByWithAggregationInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PasswordRecoveryTokenCountOrderByAggregateInput
    _max?: PasswordRecoveryTokenMaxOrderByAggregateInput
    _min?: PasswordRecoveryTokenMinOrderByAggregateInput
  }

  export type PasswordRecoveryTokenScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PasswordRecoveryTokenScalarWhereWithAggregatesInput>
    OR?: Enumerable<PasswordRecoveryTokenScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PasswordRecoveryTokenScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    token?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type EmailVerificationTokenWhereInput = {
    AND?: Enumerable<EmailVerificationTokenWhereInput>
    OR?: Enumerable<EmailVerificationTokenWhereInput>
    NOT?: Enumerable<EmailVerificationTokenWhereInput>
    id?: StringFilter | string
    email?: StringFilter | string
    token?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type EmailVerificationTokenOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailVerificationTokenWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type EmailVerificationTokenOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmailVerificationTokenCountOrderByAggregateInput
    _max?: EmailVerificationTokenMaxOrderByAggregateInput
    _min?: EmailVerificationTokenMinOrderByAggregateInput
  }

  export type EmailVerificationTokenScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EmailVerificationTokenScalarWhereWithAggregatesInput>
    OR?: Enumerable<EmailVerificationTokenScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EmailVerificationTokenScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    token?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ZoomMeetingWhereInput = {
    AND?: Enumerable<ZoomMeetingWhereInput>
    OR?: Enumerable<ZoomMeetingWhereInput>
    NOT?: Enumerable<ZoomMeetingWhereInput>
    id?: StringFilter | string
    meetingId?: StringFilter | string
    joinUrl?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ZoomMeetingOrderByWithRelationInput = {
    id?: SortOrder
    meetingId?: SortOrder
    joinUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ZoomMeetingWhereUniqueInput = {
    id?: string
    meetingId?: string
  }

  export type ZoomMeetingOrderByWithAggregationInput = {
    id?: SortOrder
    meetingId?: SortOrder
    joinUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ZoomMeetingCountOrderByAggregateInput
    _max?: ZoomMeetingMaxOrderByAggregateInput
    _min?: ZoomMeetingMinOrderByAggregateInput
  }

  export type ZoomMeetingScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ZoomMeetingScalarWhereWithAggregatesInput>
    OR?: Enumerable<ZoomMeetingScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ZoomMeetingScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    meetingId?: StringWithAggregatesFilter | string
    joinUrl?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type VideoWhereInput = {
    AND?: Enumerable<VideoWhereInput>
    OR?: Enumerable<VideoWhereInput>
    NOT?: Enumerable<VideoWhereInput>
    id?: StringFilter | string
    url?: StringFilter | string
    title?: StringFilter | string
    date?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    courses?: VideosOnCoursesListRelationFilter
  }

  export type VideoOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    title?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    courses?: VideosOnCoursesOrderByRelationAggregateInput
  }

  export type VideoWhereUniqueInput = {
    id?: string
  }

  export type VideoOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    title?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VideoCountOrderByAggregateInput
    _max?: VideoMaxOrderByAggregateInput
    _min?: VideoMinOrderByAggregateInput
  }

  export type VideoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VideoScalarWhereWithAggregatesInput>
    OR?: Enumerable<VideoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VideoScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    url?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    date?: DateTimeWithAggregatesFilter | Date | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type VideosOnCoursesWhereInput = {
    AND?: Enumerable<VideosOnCoursesWhereInput>
    OR?: Enumerable<VideosOnCoursesWhereInput>
    NOT?: Enumerable<VideosOnCoursesWhereInput>
    videoId?: StringFilter | string
    courseId?: StringFilter | string
    video?: XOR<VideoRelationFilter, VideoWhereInput>
    course?: XOR<CourseRelationFilter, CourseWhereInput>
  }

  export type VideosOnCoursesOrderByWithRelationInput = {
    videoId?: SortOrder
    courseId?: SortOrder
    video?: VideoOrderByWithRelationInput
    course?: CourseOrderByWithRelationInput
  }

  export type VideosOnCoursesWhereUniqueInput = {
    videoId_courseId?: VideosOnCoursesVideoIdCourseIdCompoundUniqueInput
  }

  export type VideosOnCoursesOrderByWithAggregationInput = {
    videoId?: SortOrder
    courseId?: SortOrder
    _count?: VideosOnCoursesCountOrderByAggregateInput
    _max?: VideosOnCoursesMaxOrderByAggregateInput
    _min?: VideosOnCoursesMinOrderByAggregateInput
  }

  export type VideosOnCoursesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VideosOnCoursesScalarWhereWithAggregatesInput>
    OR?: Enumerable<VideosOnCoursesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VideosOnCoursesScalarWhereWithAggregatesInput>
    videoId?: StringWithAggregatesFilter | string
    courseId?: StringWithAggregatesFilter | string
  }

  export type PaymentWhereInput = {
    AND?: Enumerable<PaymentWhereInput>
    OR?: Enumerable<PaymentWhereInput>
    NOT?: Enumerable<PaymentWhereInput>
    id?: StringFilter | string
    amount?: FloatFilter | number
    currency?: StringFilter | string
    method?: EnumPaymentMethodFilter | PaymentMethod
    type?: EnumPaymentTypeFilter | PaymentType
    userId?: StringFilter | string
    description?: StringNullableFilter | string | null
    paidAt?: DateTimeFilter | Date | string
    stripePaymentIntentId?: StringNullableFilter | string | null
    woocommerceOrderId?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type PaymentOrderByWithRelationInput = {
    id?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    method?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    description?: SortOrderInput | SortOrder
    paidAt?: SortOrder
    stripePaymentIntentId?: SortOrderInput | SortOrder
    woocommerceOrderId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type PaymentWhereUniqueInput = {
    id?: string
    stripePaymentIntentId?: string
    woocommerceOrderId?: string
  }

  export type PaymentOrderByWithAggregationInput = {
    id?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    method?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    description?: SortOrderInput | SortOrder
    paidAt?: SortOrder
    stripePaymentIntentId?: SortOrderInput | SortOrder
    woocommerceOrderId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PaymentCountOrderByAggregateInput
    _avg?: PaymentAvgOrderByAggregateInput
    _max?: PaymentMaxOrderByAggregateInput
    _min?: PaymentMinOrderByAggregateInput
    _sum?: PaymentSumOrderByAggregateInput
  }

  export type PaymentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PaymentScalarWhereWithAggregatesInput>
    OR?: Enumerable<PaymentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PaymentScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    amount?: FloatWithAggregatesFilter | number
    currency?: StringWithAggregatesFilter | string
    method?: EnumPaymentMethodWithAggregatesFilter | PaymentMethod
    type?: EnumPaymentTypeWithAggregatesFilter | PaymentType
    userId?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
    paidAt?: DateTimeWithAggregatesFilter | Date | string
    stripePaymentIntentId?: StringNullableWithAggregatesFilter | string | null
    woocommerceOrderId?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type FileWhereInput = {
    AND?: Enumerable<FileWhereInput>
    OR?: Enumerable<FileWhereInput>
    NOT?: Enumerable<FileWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    s3Key?: StringFilter | string
    contentType?: StringFilter | string
    folderId?: StringFilter | string
    courseId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    folder?: XOR<FolderRelationFilter, FolderWhereInput>
    Course?: XOR<CourseRelationFilter, CourseWhereInput>
  }

  export type FileOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    s3Key?: SortOrder
    contentType?: SortOrder
    folderId?: SortOrder
    courseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    folder?: FolderOrderByWithRelationInput
    Course?: CourseOrderByWithRelationInput
  }

  export type FileWhereUniqueInput = {
    id?: string
  }

  export type FileOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    s3Key?: SortOrder
    contentType?: SortOrder
    folderId?: SortOrder
    courseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FileCountOrderByAggregateInput
    _max?: FileMaxOrderByAggregateInput
    _min?: FileMinOrderByAggregateInput
  }

  export type FileScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FileScalarWhereWithAggregatesInput>
    OR?: Enumerable<FileScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FileScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    s3Key?: StringWithAggregatesFilter | string
    contentType?: StringWithAggregatesFilter | string
    folderId?: StringWithAggregatesFilter | string
    courseId?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type FolderWhereInput = {
    AND?: Enumerable<FolderWhereInput>
    OR?: Enumerable<FolderWhereInput>
    NOT?: Enumerable<FolderWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    parentId?: StringNullableFilter | string | null
    isRoot?: BoolFilter | boolean
    courseId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    files?: FileListRelationFilter
    folders?: FolderListRelationFilter
    parent?: XOR<FolderRelationFilter, FolderWhereInput> | null
    course?: XOR<CourseRelationFilter, CourseWhereInput>
  }

  export type FolderOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    parentId?: SortOrderInput | SortOrder
    isRoot?: SortOrder
    courseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    files?: FileOrderByRelationAggregateInput
    folders?: FolderOrderByRelationAggregateInput
    parent?: FolderOrderByWithRelationInput
    course?: CourseOrderByWithRelationInput
  }

  export type FolderWhereUniqueInput = {
    id?: string
  }

  export type FolderOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    parentId?: SortOrderInput | SortOrder
    isRoot?: SortOrder
    courseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FolderCountOrderByAggregateInput
    _max?: FolderMaxOrderByAggregateInput
    _min?: FolderMinOrderByAggregateInput
  }

  export type FolderScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FolderScalarWhereWithAggregatesInput>
    OR?: Enumerable<FolderScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FolderScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    parentId?: StringNullableWithAggregatesFilter | string | null
    isRoot?: BoolWithAggregatesFilter | boolean
    courseId?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type CourseWhereInput = {
    AND?: Enumerable<CourseWhereInput>
    OR?: Enumerable<CourseWhereInput>
    NOT?: Enumerable<CourseWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    folders?: FolderListRelationFilter
    files?: FileListRelationFilter
    videos?: VideosOnCoursesListRelationFilter
    students?: UserListRelationFilter
    quizzes?: QuizzesOnCourseListRelationFilter
    predefinedEvents?: PredefinedEventOnCoursesListRelationFilter
  }

  export type CourseOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    folders?: FolderOrderByRelationAggregateInput
    files?: FileOrderByRelationAggregateInput
    videos?: VideosOnCoursesOrderByRelationAggregateInput
    students?: UserOrderByRelationAggregateInput
    quizzes?: QuizzesOnCourseOrderByRelationAggregateInput
    predefinedEvents?: PredefinedEventOnCoursesOrderByRelationAggregateInput
  }

  export type CourseWhereUniqueInput = {
    id?: string
    name?: string
  }

  export type CourseOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CourseCountOrderByAggregateInput
    _max?: CourseMaxOrderByAggregateInput
    _min?: CourseMinOrderByAggregateInput
  }

  export type CourseScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CourseScalarWhereWithAggregatesInput>
    OR?: Enumerable<CourseScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CourseScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type PredefinedEventWhereInput = {
    AND?: Enumerable<PredefinedEventWhereInput>
    OR?: Enumerable<PredefinedEventWhereInput>
    NOT?: Enumerable<PredefinedEventWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    events?: EventListRelationFilter
    courses?: PredefinedEventOnCoursesListRelationFilter
  }

  export type PredefinedEventOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    events?: EventOrderByRelationAggregateInput
    courses?: PredefinedEventOnCoursesOrderByRelationAggregateInput
  }

  export type PredefinedEventWhereUniqueInput = {
    id?: string
  }

  export type PredefinedEventOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PredefinedEventCountOrderByAggregateInput
    _max?: PredefinedEventMaxOrderByAggregateInput
    _min?: PredefinedEventMinOrderByAggregateInput
  }

  export type PredefinedEventScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PredefinedEventScalarWhereWithAggregatesInput>
    OR?: Enumerable<PredefinedEventScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PredefinedEventScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type PredefinedEventOnCoursesWhereInput = {
    AND?: Enumerable<PredefinedEventOnCoursesWhereInput>
    OR?: Enumerable<PredefinedEventOnCoursesWhereInput>
    NOT?: Enumerable<PredefinedEventOnCoursesWhereInput>
    predefinedEventId?: StringFilter | string
    courseId?: StringFilter | string
    predefinedEvent?: XOR<PredefinedEventRelationFilter, PredefinedEventWhereInput>
    course?: XOR<CourseRelationFilter, CourseWhereInput>
  }

  export type PredefinedEventOnCoursesOrderByWithRelationInput = {
    predefinedEventId?: SortOrder
    courseId?: SortOrder
    predefinedEvent?: PredefinedEventOrderByWithRelationInput
    course?: CourseOrderByWithRelationInput
  }

  export type PredefinedEventOnCoursesWhereUniqueInput = {
    predefinedEventId_courseId?: PredefinedEventOnCoursesPredefinedEventIdCourseIdCompoundUniqueInput
  }

  export type PredefinedEventOnCoursesOrderByWithAggregationInput = {
    predefinedEventId?: SortOrder
    courseId?: SortOrder
    _count?: PredefinedEventOnCoursesCountOrderByAggregateInput
    _max?: PredefinedEventOnCoursesMaxOrderByAggregateInput
    _min?: PredefinedEventOnCoursesMinOrderByAggregateInput
  }

  export type PredefinedEventOnCoursesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PredefinedEventOnCoursesScalarWhereWithAggregatesInput>
    OR?: Enumerable<PredefinedEventOnCoursesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PredefinedEventOnCoursesScalarWhereWithAggregatesInput>
    predefinedEventId?: StringWithAggregatesFilter | string
    courseId?: StringWithAggregatesFilter | string
  }

  export type EventWhereInput = {
    AND?: Enumerable<EventWhereInput>
    OR?: Enumerable<EventWhereInput>
    NOT?: Enumerable<EventWhereInput>
    id?: StringFilter | string
    startDate?: DateTimeFilter | Date | string
    endDate?: DateTimeFilter | Date | string
    totalSlots?: IntFilter | number
    description?: StringNullableFilter | string | null
    predefinedEventId?: StringNullableFilter | string | null
    title?: StringNullableFilter | string | null
    isClub?: BoolFilter | boolean
    isHidden?: BoolFilter | boolean
    enableBooking?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    color?: StringNullableFilter | string | null
    recurrenceRule?: StringNullableFilter | string | null
    recurrenceEnd?: DateTimeNullableFilter | Date | string | null
    predefinedEvent?: XOR<PredefinedEventRelationFilter, PredefinedEventWhereInput> | null
    users?: UsersOnEventsListRelationFilter
    waitlist?: UsersOnEventsListRelationFilter
    visitedUsers?: UsersOnEventsListRelationFilter
  }

  export type EventOrderByWithRelationInput = {
    id?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalSlots?: SortOrder
    description?: SortOrderInput | SortOrder
    predefinedEventId?: SortOrderInput | SortOrder
    title?: SortOrderInput | SortOrder
    isClub?: SortOrder
    isHidden?: SortOrder
    enableBooking?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    color?: SortOrderInput | SortOrder
    recurrenceRule?: SortOrderInput | SortOrder
    recurrenceEnd?: SortOrderInput | SortOrder
    predefinedEvent?: PredefinedEventOrderByWithRelationInput
    users?: UsersOnEventsOrderByRelationAggregateInput
    waitlist?: UsersOnEventsOrderByRelationAggregateInput
    visitedUsers?: UsersOnEventsOrderByRelationAggregateInput
  }

  export type EventWhereUniqueInput = {
    id?: string
  }

  export type EventOrderByWithAggregationInput = {
    id?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalSlots?: SortOrder
    description?: SortOrderInput | SortOrder
    predefinedEventId?: SortOrderInput | SortOrder
    title?: SortOrderInput | SortOrder
    isClub?: SortOrder
    isHidden?: SortOrder
    enableBooking?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    color?: SortOrderInput | SortOrder
    recurrenceRule?: SortOrderInput | SortOrder
    recurrenceEnd?: SortOrderInput | SortOrder
    _count?: EventCountOrderByAggregateInput
    _avg?: EventAvgOrderByAggregateInput
    _max?: EventMaxOrderByAggregateInput
    _min?: EventMinOrderByAggregateInput
    _sum?: EventSumOrderByAggregateInput
  }

  export type EventScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EventScalarWhereWithAggregatesInput>
    OR?: Enumerable<EventScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EventScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    startDate?: DateTimeWithAggregatesFilter | Date | string
    endDate?: DateTimeWithAggregatesFilter | Date | string
    totalSlots?: IntWithAggregatesFilter | number
    description?: StringNullableWithAggregatesFilter | string | null
    predefinedEventId?: StringNullableWithAggregatesFilter | string | null
    title?: StringNullableWithAggregatesFilter | string | null
    isClub?: BoolWithAggregatesFilter | boolean
    isHidden?: BoolWithAggregatesFilter | boolean
    enableBooking?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    color?: StringNullableWithAggregatesFilter | string | null
    recurrenceRule?: StringNullableWithAggregatesFilter | string | null
    recurrenceEnd?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type UsersOnEventsWhereInput = {
    AND?: Enumerable<UsersOnEventsWhereInput>
    OR?: Enumerable<UsersOnEventsWhereInput>
    NOT?: Enumerable<UsersOnEventsWhereInput>
    userId?: StringFilter | string
    eventId?: StringFilter | string
    isCompleted?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    waitlistEventId?: StringNullableFilter | string | null
    visitedEventId?: StringNullableFilter | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    event?: XOR<EventRelationFilter, EventWhereInput>
    waitlistEvent?: XOR<EventRelationFilter, EventWhereInput> | null
    visitedEvent?: XOR<EventRelationFilter, EventWhereInput> | null
  }

  export type UsersOnEventsOrderByWithRelationInput = {
    userId?: SortOrder
    eventId?: SortOrder
    isCompleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    waitlistEventId?: SortOrderInput | SortOrder
    visitedEventId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    event?: EventOrderByWithRelationInput
    waitlistEvent?: EventOrderByWithRelationInput
    visitedEvent?: EventOrderByWithRelationInput
  }

  export type UsersOnEventsWhereUniqueInput = {
    userId_eventId?: UsersOnEventsUserIdEventIdCompoundUniqueInput
  }

  export type UsersOnEventsOrderByWithAggregationInput = {
    userId?: SortOrder
    eventId?: SortOrder
    isCompleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    waitlistEventId?: SortOrderInput | SortOrder
    visitedEventId?: SortOrderInput | SortOrder
    _count?: UsersOnEventsCountOrderByAggregateInput
    _max?: UsersOnEventsMaxOrderByAggregateInput
    _min?: UsersOnEventsMinOrderByAggregateInput
  }

  export type UsersOnEventsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UsersOnEventsScalarWhereWithAggregatesInput>
    OR?: Enumerable<UsersOnEventsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UsersOnEventsScalarWhereWithAggregatesInput>
    userId?: StringWithAggregatesFilter | string
    eventId?: StringWithAggregatesFilter | string
    isCompleted?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    waitlistEventId?: StringNullableWithAggregatesFilter | string | null
    visitedEventId?: StringNullableWithAggregatesFilter | string | null
  }

  export type ChatWhereInput = {
    AND?: Enumerable<ChatWhereInput>
    OR?: Enumerable<ChatWhereInput>
    NOT?: Enumerable<ChatWhereInput>
    id?: StringFilter | string
    name?: StringNullableFilter | string | null
    pictureS3Key?: StringNullableFilter | string | null
    isGroup?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    users?: ChatsOnUsersListRelationFilter
    messages?: MessageListRelationFilter
  }

  export type ChatOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    pictureS3Key?: SortOrderInput | SortOrder
    isGroup?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    users?: ChatsOnUsersOrderByRelationAggregateInput
    messages?: MessageOrderByRelationAggregateInput
  }

  export type ChatWhereUniqueInput = {
    id?: string
  }

  export type ChatOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    pictureS3Key?: SortOrderInput | SortOrder
    isGroup?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ChatCountOrderByAggregateInput
    _max?: ChatMaxOrderByAggregateInput
    _min?: ChatMinOrderByAggregateInput
  }

  export type ChatScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ChatScalarWhereWithAggregatesInput>
    OR?: Enumerable<ChatScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ChatScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
    pictureS3Key?: StringNullableWithAggregatesFilter | string | null
    isGroup?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ChatsOnUsersWhereInput = {
    AND?: Enumerable<ChatsOnUsersWhereInput>
    OR?: Enumerable<ChatsOnUsersWhereInput>
    NOT?: Enumerable<ChatsOnUsersWhereInput>
    chatId?: StringFilter | string
    userId?: StringFilter | string
    lastSeenAt?: DateTimeFilter | Date | string
    chat?: XOR<ChatRelationFilter, ChatWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ChatsOnUsersOrderByWithRelationInput = {
    chatId?: SortOrder
    userId?: SortOrder
    lastSeenAt?: SortOrder
    chat?: ChatOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ChatsOnUsersWhereUniqueInput = {
    chatId_userId?: ChatsOnUsersChatIdUserIdCompoundUniqueInput
  }

  export type ChatsOnUsersOrderByWithAggregationInput = {
    chatId?: SortOrder
    userId?: SortOrder
    lastSeenAt?: SortOrder
    _count?: ChatsOnUsersCountOrderByAggregateInput
    _max?: ChatsOnUsersMaxOrderByAggregateInput
    _min?: ChatsOnUsersMinOrderByAggregateInput
  }

  export type ChatsOnUsersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ChatsOnUsersScalarWhereWithAggregatesInput>
    OR?: Enumerable<ChatsOnUsersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ChatsOnUsersScalarWhereWithAggregatesInput>
    chatId?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    lastSeenAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type MessageWhereInput = {
    AND?: Enumerable<MessageWhereInput>
    OR?: Enumerable<MessageWhereInput>
    NOT?: Enumerable<MessageWhereInput>
    id?: StringFilter | string
    content?: StringFilter | string
    deletedAt?: DateTimeNullableFilter | Date | string | null
    senderId?: StringFilter | string
    chatId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    sender?: XOR<UserRelationFilter, UserWhereInput>
    chat?: XOR<ChatRelationFilter, ChatWhereInput>
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    senderId?: SortOrder
    chatId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sender?: UserOrderByWithRelationInput
    chat?: ChatOrderByWithRelationInput
  }

  export type MessageWhereUniqueInput = {
    id?: string
  }

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    senderId?: SortOrder
    chatId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MessageScalarWhereWithAggregatesInput>
    OR?: Enumerable<MessageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MessageScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    content?: StringWithAggregatesFilter | string
    deletedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    senderId?: StringWithAggregatesFilter | string
    chatId?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type QuizzesOnCourseWhereInput = {
    AND?: Enumerable<QuizzesOnCourseWhereInput>
    OR?: Enumerable<QuizzesOnCourseWhereInput>
    NOT?: Enumerable<QuizzesOnCourseWhereInput>
    quizId?: StringFilter | string
    courseId?: StringFilter | string
    quiz?: XOR<QuizRelationFilter, QuizWhereInput>
    course?: XOR<CourseRelationFilter, CourseWhereInput>
  }

  export type QuizzesOnCourseOrderByWithRelationInput = {
    quizId?: SortOrder
    courseId?: SortOrder
    quiz?: QuizOrderByWithRelationInput
    course?: CourseOrderByWithRelationInput
  }

  export type QuizzesOnCourseWhereUniqueInput = {
    quizId_courseId?: QuizzesOnCourseQuizIdCourseIdCompoundUniqueInput
  }

  export type QuizzesOnCourseOrderByWithAggregationInput = {
    quizId?: SortOrder
    courseId?: SortOrder
    _count?: QuizzesOnCourseCountOrderByAggregateInput
    _max?: QuizzesOnCourseMaxOrderByAggregateInput
    _min?: QuizzesOnCourseMinOrderByAggregateInput
  }

  export type QuizzesOnCourseScalarWhereWithAggregatesInput = {
    AND?: Enumerable<QuizzesOnCourseScalarWhereWithAggregatesInput>
    OR?: Enumerable<QuizzesOnCourseScalarWhereWithAggregatesInput>
    NOT?: Enumerable<QuizzesOnCourseScalarWhereWithAggregatesInput>
    quizId?: StringWithAggregatesFilter | string
    courseId?: StringWithAggregatesFilter | string
  }

  export type QuizWhereInput = {
    AND?: Enumerable<QuizWhereInput>
    OR?: Enumerable<QuizWhereInput>
    NOT?: Enumerable<QuizWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    nQuestionsPerAttempt?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    courses?: QuizzesOnCourseListRelationFilter
    questions?: QuestionListRelationFilter
  }

  export type QuizOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    nQuestionsPerAttempt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    courses?: QuizzesOnCourseOrderByRelationAggregateInput
    questions?: QuestionOrderByRelationAggregateInput
  }

  export type QuizWhereUniqueInput = {
    id?: string
  }

  export type QuizOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    nQuestionsPerAttempt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: QuizCountOrderByAggregateInput
    _avg?: QuizAvgOrderByAggregateInput
    _max?: QuizMaxOrderByAggregateInput
    _min?: QuizMinOrderByAggregateInput
    _sum?: QuizSumOrderByAggregateInput
  }

  export type QuizScalarWhereWithAggregatesInput = {
    AND?: Enumerable<QuizScalarWhereWithAggregatesInput>
    OR?: Enumerable<QuizScalarWhereWithAggregatesInput>
    NOT?: Enumerable<QuizScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    nQuestionsPerAttempt?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type QuestionWhereInput = {
    AND?: Enumerable<QuestionWhereInput>
    OR?: Enumerable<QuestionWhereInput>
    NOT?: Enumerable<QuestionWhereInput>
    id?: StringFilter | string
    content?: StringFilter | string
    quizId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    answers?: AnswerListRelationFilter
    quiz?: XOR<QuizRelationFilter, QuizWhereInput>
  }

  export type QuestionOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    quizId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    answers?: AnswerOrderByRelationAggregateInput
    quiz?: QuizOrderByWithRelationInput
  }

  export type QuestionWhereUniqueInput = {
    id?: string
  }

  export type QuestionOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    quizId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: QuestionCountOrderByAggregateInput
    _max?: QuestionMaxOrderByAggregateInput
    _min?: QuestionMinOrderByAggregateInput
  }

  export type QuestionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<QuestionScalarWhereWithAggregatesInput>
    OR?: Enumerable<QuestionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<QuestionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    content?: StringWithAggregatesFilter | string
    quizId?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type AnswerWhereInput = {
    AND?: Enumerable<AnswerWhereInput>
    OR?: Enumerable<AnswerWhereInput>
    NOT?: Enumerable<AnswerWhereInput>
    id?: StringFilter | string
    content?: StringFilter | string
    isCorrect?: BoolFilter | boolean
    questionId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    question?: XOR<QuestionRelationFilter, QuestionWhereInput>
  }

  export type AnswerOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    isCorrect?: SortOrder
    questionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    question?: QuestionOrderByWithRelationInput
  }

  export type AnswerWhereUniqueInput = {
    id?: string
  }

  export type AnswerOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    isCorrect?: SortOrder
    questionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AnswerCountOrderByAggregateInput
    _max?: AnswerMaxOrderByAggregateInput
    _min?: AnswerMinOrderByAggregateInput
  }

  export type AnswerScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AnswerScalarWhereWithAggregatesInput>
    OR?: Enumerable<AnswerScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AnswerScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    content?: StringWithAggregatesFilter | string
    isCorrect?: BoolWithAggregatesFilter | boolean
    questionId?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    role?: Role
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    birthDate?: Date | string | null
    address?: string | null
    zipCode?: string | null
    city?: string | null
    idNumber?: string | null
    idIssueDate?: Date | string | null
    profilePicturePath?: string | null
    isInClub?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isCalendarEnable?: boolean
    calendarBlockingDeadline?: Date | string | null
    receiveEmailsOnNewEvent?: boolean
    payments?: PaymentCreateNestedManyWithoutUserInput
    chats?: ChatsOnUsersCreateNestedManyWithoutUserInput
    events?: UsersOnEventsCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutSenderInput
    course?: CourseCreateNestedOneWithoutStudentsInput
    passwordRecoveryToken?: PasswordRecoveryTokenCreateNestedOneWithoutUserInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutUserInput
    WebPushSubscription?: WebPushSubscriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    role?: Role
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    birthDate?: Date | string | null
    address?: string | null
    zipCode?: string | null
    city?: string | null
    idNumber?: string | null
    idIssueDate?: Date | string | null
    profilePicturePath?: string | null
    isInClub?: boolean
    courseId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isCalendarEnable?: boolean
    calendarBlockingDeadline?: Date | string | null
    receiveEmailsOnNewEvent?: boolean
    payments?: PaymentUncheckedCreateNestedManyWithoutUserInput
    chats?: ChatsOnUsersUncheckedCreateNestedManyWithoutUserInput
    events?: UsersOnEventsUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    passwordRecoveryToken?: PasswordRecoveryTokenUncheckedCreateNestedOneWithoutUserInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutUserInput
    WebPushSubscription?: WebPushSubscriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idIssueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profilePicturePath?: NullableStringFieldUpdateOperationsInput | string | null
    isInClub?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCalendarEnable?: BoolFieldUpdateOperationsInput | boolean
    calendarBlockingDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receiveEmailsOnNewEvent?: BoolFieldUpdateOperationsInput | boolean
    payments?: PaymentUpdateManyWithoutUserNestedInput
    chats?: ChatsOnUsersUpdateManyWithoutUserNestedInput
    events?: UsersOnEventsUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
    course?: CourseUpdateOneWithoutStudentsNestedInput
    passwordRecoveryToken?: PasswordRecoveryTokenUpdateOneWithoutUserNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutUserNestedInput
    WebPushSubscription?: WebPushSubscriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idIssueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profilePicturePath?: NullableStringFieldUpdateOperationsInput | string | null
    isInClub?: BoolFieldUpdateOperationsInput | boolean
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCalendarEnable?: BoolFieldUpdateOperationsInput | boolean
    calendarBlockingDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receiveEmailsOnNewEvent?: BoolFieldUpdateOperationsInput | boolean
    payments?: PaymentUncheckedUpdateManyWithoutUserNestedInput
    chats?: ChatsOnUsersUncheckedUpdateManyWithoutUserNestedInput
    events?: UsersOnEventsUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    passwordRecoveryToken?: PasswordRecoveryTokenUncheckedUpdateOneWithoutUserNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutUserNestedInput
    WebPushSubscription?: WebPushSubscriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    role?: Role
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    birthDate?: Date | string | null
    address?: string | null
    zipCode?: string | null
    city?: string | null
    idNumber?: string | null
    idIssueDate?: Date | string | null
    profilePicturePath?: string | null
    isInClub?: boolean
    courseId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isCalendarEnable?: boolean
    calendarBlockingDeadline?: Date | string | null
    receiveEmailsOnNewEvent?: boolean
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idIssueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profilePicturePath?: NullableStringFieldUpdateOperationsInput | string | null
    isInClub?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCalendarEnable?: BoolFieldUpdateOperationsInput | boolean
    calendarBlockingDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receiveEmailsOnNewEvent?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idIssueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profilePicturePath?: NullableStringFieldUpdateOperationsInput | string | null
    isInClub?: BoolFieldUpdateOperationsInput | boolean
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCalendarEnable?: BoolFieldUpdateOperationsInput | boolean
    calendarBlockingDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receiveEmailsOnNewEvent?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WebPushSubscriptionCreateInput = {
    id?: string
    endpoint: string
    p256dh: string
    auth: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatEnabled?: boolean
    calendarEnabled?: boolean
    user: UserCreateNestedOneWithoutWebPushSubscriptionInput
  }

  export type WebPushSubscriptionUncheckedCreateInput = {
    id?: string
    userId: string
    endpoint: string
    p256dh: string
    auth: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatEnabled?: boolean
    calendarEnabled?: boolean
  }

  export type WebPushSubscriptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    endpoint?: StringFieldUpdateOperationsInput | string
    p256dh?: StringFieldUpdateOperationsInput | string
    auth?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatEnabled?: BoolFieldUpdateOperationsInput | boolean
    calendarEnabled?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutWebPushSubscriptionNestedInput
  }

  export type WebPushSubscriptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    endpoint?: StringFieldUpdateOperationsInput | string
    p256dh?: StringFieldUpdateOperationsInput | string
    auth?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatEnabled?: BoolFieldUpdateOperationsInput | boolean
    calendarEnabled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WebPushSubscriptionCreateManyInput = {
    id?: string
    userId: string
    endpoint: string
    p256dh: string
    auth: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatEnabled?: boolean
    calendarEnabled?: boolean
  }

  export type WebPushSubscriptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    endpoint?: StringFieldUpdateOperationsInput | string
    p256dh?: StringFieldUpdateOperationsInput | string
    auth?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatEnabled?: BoolFieldUpdateOperationsInput | boolean
    calendarEnabled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WebPushSubscriptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    endpoint?: StringFieldUpdateOperationsInput | string
    p256dh?: StringFieldUpdateOperationsInput | string
    auth?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatEnabled?: BoolFieldUpdateOperationsInput | boolean
    calendarEnabled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuizAttemptCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutQuizAttemptsInput
  }

  export type QuizAttemptUncheckedCreateInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuizAttemptUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutQuizAttemptsNestedInput
  }

  export type QuizAttemptUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuizAttemptCreateManyInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuizAttemptUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuizAttemptUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordRecoveryTokenCreateInput = {
    id?: string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPasswordRecoveryTokenInput
  }

  export type PasswordRecoveryTokenUncheckedCreateInput = {
    id?: string
    token: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PasswordRecoveryTokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPasswordRecoveryTokenNestedInput
  }

  export type PasswordRecoveryTokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordRecoveryTokenCreateManyInput = {
    id?: string
    token: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PasswordRecoveryTokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordRecoveryTokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailVerificationTokenCreateInput = {
    id?: string
    email: string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailVerificationTokenUncheckedCreateInput = {
    id?: string
    email: string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailVerificationTokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailVerificationTokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailVerificationTokenCreateManyInput = {
    id?: string
    email: string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailVerificationTokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailVerificationTokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ZoomMeetingCreateInput = {
    id?: string
    meetingId: string
    joinUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ZoomMeetingUncheckedCreateInput = {
    id?: string
    meetingId: string
    joinUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ZoomMeetingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    meetingId?: StringFieldUpdateOperationsInput | string
    joinUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ZoomMeetingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    meetingId?: StringFieldUpdateOperationsInput | string
    joinUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ZoomMeetingCreateManyInput = {
    id?: string
    meetingId: string
    joinUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ZoomMeetingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    meetingId?: StringFieldUpdateOperationsInput | string
    joinUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ZoomMeetingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    meetingId?: StringFieldUpdateOperationsInput | string
    joinUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VideoCreateInput = {
    id?: string
    url: string
    title: string
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    courses?: VideosOnCoursesCreateNestedManyWithoutVideoInput
  }

  export type VideoUncheckedCreateInput = {
    id?: string
    url: string
    title: string
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    courses?: VideosOnCoursesUncheckedCreateNestedManyWithoutVideoInput
  }

  export type VideoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courses?: VideosOnCoursesUpdateManyWithoutVideoNestedInput
  }

  export type VideoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courses?: VideosOnCoursesUncheckedUpdateManyWithoutVideoNestedInput
  }

  export type VideoCreateManyInput = {
    id?: string
    url: string
    title: string
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VideoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VideoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VideosOnCoursesCreateInput = {
    video: VideoCreateNestedOneWithoutCoursesInput
    course: CourseCreateNestedOneWithoutVideosInput
  }

  export type VideosOnCoursesUncheckedCreateInput = {
    videoId: string
    courseId: string
  }

  export type VideosOnCoursesUpdateInput = {
    video?: VideoUpdateOneRequiredWithoutCoursesNestedInput
    course?: CourseUpdateOneRequiredWithoutVideosNestedInput
  }

  export type VideosOnCoursesUncheckedUpdateInput = {
    videoId?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
  }

  export type VideosOnCoursesCreateManyInput = {
    videoId: string
    courseId: string
  }

  export type VideosOnCoursesUpdateManyMutationInput = {

  }

  export type VideosOnCoursesUncheckedUpdateManyInput = {
    videoId?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
  }

  export type PaymentCreateInput = {
    id?: string
    amount: number
    currency: string
    method: PaymentMethod
    type: PaymentType
    description?: string | null
    paidAt: Date | string
    stripePaymentIntentId?: string | null
    woocommerceOrderId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPaymentsInput
  }

  export type PaymentUncheckedCreateInput = {
    id?: string
    amount: number
    currency: string
    method: PaymentMethod
    type: PaymentType
    userId: string
    description?: string | null
    paidAt: Date | string
    stripePaymentIntentId?: string | null
    woocommerceOrderId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | PaymentMethod
    type?: EnumPaymentTypeFieldUpdateOperationsInput | PaymentType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stripePaymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    woocommerceOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | PaymentMethod
    type?: EnumPaymentTypeFieldUpdateOperationsInput | PaymentType
    userId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stripePaymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    woocommerceOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateManyInput = {
    id?: string
    amount: number
    currency: string
    method: PaymentMethod
    type: PaymentType
    userId: string
    description?: string | null
    paidAt: Date | string
    stripePaymentIntentId?: string | null
    woocommerceOrderId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | PaymentMethod
    type?: EnumPaymentTypeFieldUpdateOperationsInput | PaymentType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stripePaymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    woocommerceOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | PaymentMethod
    type?: EnumPaymentTypeFieldUpdateOperationsInput | PaymentType
    userId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stripePaymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    woocommerceOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileCreateInput = {
    id?: string
    name: string
    s3Key: string
    contentType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    folder: FolderCreateNestedOneWithoutFilesInput
    Course: CourseCreateNestedOneWithoutFilesInput
  }

  export type FileUncheckedCreateInput = {
    id?: string
    name: string
    s3Key: string
    contentType: string
    folderId: string
    courseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    s3Key?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    folder?: FolderUpdateOneRequiredWithoutFilesNestedInput
    Course?: CourseUpdateOneRequiredWithoutFilesNestedInput
  }

  export type FileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    s3Key?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    folderId?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileCreateManyInput = {
    id?: string
    name: string
    s3Key: string
    contentType: string
    folderId: string
    courseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    s3Key?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    s3Key?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    folderId?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FolderCreateInput = {
    id?: string
    name: string
    isRoot?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    files?: FileCreateNestedManyWithoutFolderInput
    folders?: FolderCreateNestedManyWithoutParentInput
    parent?: FolderCreateNestedOneWithoutFoldersInput
    course: CourseCreateNestedOneWithoutFoldersInput
  }

  export type FolderUncheckedCreateInput = {
    id?: string
    name: string
    parentId?: string | null
    isRoot?: boolean
    courseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    files?: FileUncheckedCreateNestedManyWithoutFolderInput
    folders?: FolderUncheckedCreateNestedManyWithoutParentInput
  }

  export type FolderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isRoot?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: FileUpdateManyWithoutFolderNestedInput
    folders?: FolderUpdateManyWithoutParentNestedInput
    parent?: FolderUpdateOneWithoutFoldersNestedInput
    course?: CourseUpdateOneRequiredWithoutFoldersNestedInput
  }

  export type FolderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isRoot?: BoolFieldUpdateOperationsInput | boolean
    courseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: FileUncheckedUpdateManyWithoutFolderNestedInput
    folders?: FolderUncheckedUpdateManyWithoutParentNestedInput
  }

  export type FolderCreateManyInput = {
    id?: string
    name: string
    parentId?: string | null
    isRoot?: boolean
    courseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FolderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isRoot?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FolderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isRoot?: BoolFieldUpdateOperationsInput | boolean
    courseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    folders?: FolderCreateNestedManyWithoutCourseInput
    files?: FileCreateNestedManyWithoutCourseInput
    videos?: VideosOnCoursesCreateNestedManyWithoutCourseInput
    students?: UserCreateNestedManyWithoutCourseInput
    quizzes?: QuizzesOnCourseCreateNestedManyWithoutCourseInput
    predefinedEvents?: PredefinedEventOnCoursesCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    folders?: FolderUncheckedCreateNestedManyWithoutCourseInput
    files?: FileUncheckedCreateNestedManyWithoutCourseInput
    videos?: VideosOnCoursesUncheckedCreateNestedManyWithoutCourseInput
    students?: UserUncheckedCreateNestedManyWithoutCourseInput
    quizzes?: QuizzesOnCourseUncheckedCreateNestedManyWithoutCourseInput
    predefinedEvents?: PredefinedEventOnCoursesUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    folders?: FolderUpdateManyWithoutCourseNestedInput
    files?: FileUpdateManyWithoutCourseNestedInput
    videos?: VideosOnCoursesUpdateManyWithoutCourseNestedInput
    students?: UserUpdateManyWithoutCourseNestedInput
    quizzes?: QuizzesOnCourseUpdateManyWithoutCourseNestedInput
    predefinedEvents?: PredefinedEventOnCoursesUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    folders?: FolderUncheckedUpdateManyWithoutCourseNestedInput
    files?: FileUncheckedUpdateManyWithoutCourseNestedInput
    videos?: VideosOnCoursesUncheckedUpdateManyWithoutCourseNestedInput
    students?: UserUncheckedUpdateManyWithoutCourseNestedInput
    quizzes?: QuizzesOnCourseUncheckedUpdateManyWithoutCourseNestedInput
    predefinedEvents?: PredefinedEventOnCoursesUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PredefinedEventCreateInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: EventCreateNestedManyWithoutPredefinedEventInput
    courses?: PredefinedEventOnCoursesCreateNestedManyWithoutPredefinedEventInput
  }

  export type PredefinedEventUncheckedCreateInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: EventUncheckedCreateNestedManyWithoutPredefinedEventInput
    courses?: PredefinedEventOnCoursesUncheckedCreateNestedManyWithoutPredefinedEventInput
  }

  export type PredefinedEventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUpdateManyWithoutPredefinedEventNestedInput
    courses?: PredefinedEventOnCoursesUpdateManyWithoutPredefinedEventNestedInput
  }

  export type PredefinedEventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUncheckedUpdateManyWithoutPredefinedEventNestedInput
    courses?: PredefinedEventOnCoursesUncheckedUpdateManyWithoutPredefinedEventNestedInput
  }

  export type PredefinedEventCreateManyInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PredefinedEventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PredefinedEventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PredefinedEventOnCoursesCreateInput = {
    predefinedEvent: PredefinedEventCreateNestedOneWithoutCoursesInput
    course: CourseCreateNestedOneWithoutPredefinedEventsInput
  }

  export type PredefinedEventOnCoursesUncheckedCreateInput = {
    predefinedEventId: string
    courseId: string
  }

  export type PredefinedEventOnCoursesUpdateInput = {
    predefinedEvent?: PredefinedEventUpdateOneRequiredWithoutCoursesNestedInput
    course?: CourseUpdateOneRequiredWithoutPredefinedEventsNestedInput
  }

  export type PredefinedEventOnCoursesUncheckedUpdateInput = {
    predefinedEventId?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
  }

  export type PredefinedEventOnCoursesCreateManyInput = {
    predefinedEventId: string
    courseId: string
  }

  export type PredefinedEventOnCoursesUpdateManyMutationInput = {

  }

  export type PredefinedEventOnCoursesUncheckedUpdateManyInput = {
    predefinedEventId?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
  }

  export type EventCreateInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    totalSlots: number
    description?: string | null
    title?: string | null
    isClub?: boolean
    isHidden?: boolean
    enableBooking?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    color?: string | null
    recurrenceRule?: string | null
    recurrenceEnd?: Date | string | null
    predefinedEvent?: PredefinedEventCreateNestedOneWithoutEventsInput
    users?: UsersOnEventsCreateNestedManyWithoutEventInput
    waitlist?: UsersOnEventsCreateNestedManyWithoutWaitlistEventInput
    visitedUsers?: UsersOnEventsCreateNestedManyWithoutVisitedEventInput
  }

  export type EventUncheckedCreateInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    totalSlots: number
    description?: string | null
    predefinedEventId?: string | null
    title?: string | null
    isClub?: boolean
    isHidden?: boolean
    enableBooking?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    color?: string | null
    recurrenceRule?: string | null
    recurrenceEnd?: Date | string | null
    users?: UsersOnEventsUncheckedCreateNestedManyWithoutEventInput
    waitlist?: UsersOnEventsUncheckedCreateNestedManyWithoutWaitlistEventInput
    visitedUsers?: UsersOnEventsUncheckedCreateNestedManyWithoutVisitedEventInput
  }

  export type EventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSlots?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    isClub?: BoolFieldUpdateOperationsInput | boolean
    isHidden?: BoolFieldUpdateOperationsInput | boolean
    enableBooking?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceRule?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    predefinedEvent?: PredefinedEventUpdateOneWithoutEventsNestedInput
    users?: UsersOnEventsUpdateManyWithoutEventNestedInput
    waitlist?: UsersOnEventsUpdateManyWithoutWaitlistEventNestedInput
    visitedUsers?: UsersOnEventsUpdateManyWithoutVisitedEventNestedInput
  }

  export type EventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSlots?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    predefinedEventId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    isClub?: BoolFieldUpdateOperationsInput | boolean
    isHidden?: BoolFieldUpdateOperationsInput | boolean
    enableBooking?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceRule?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UsersOnEventsUncheckedUpdateManyWithoutEventNestedInput
    waitlist?: UsersOnEventsUncheckedUpdateManyWithoutWaitlistEventNestedInput
    visitedUsers?: UsersOnEventsUncheckedUpdateManyWithoutVisitedEventNestedInput
  }

  export type EventCreateManyInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    totalSlots: number
    description?: string | null
    predefinedEventId?: string | null
    title?: string | null
    isClub?: boolean
    isHidden?: boolean
    enableBooking?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    color?: string | null
    recurrenceRule?: string | null
    recurrenceEnd?: Date | string | null
  }

  export type EventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSlots?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    isClub?: BoolFieldUpdateOperationsInput | boolean
    isHidden?: BoolFieldUpdateOperationsInput | boolean
    enableBooking?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceRule?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSlots?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    predefinedEventId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    isClub?: BoolFieldUpdateOperationsInput | boolean
    isHidden?: BoolFieldUpdateOperationsInput | boolean
    enableBooking?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceRule?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsersOnEventsCreateInput = {
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutEventsInput
    event: EventCreateNestedOneWithoutUsersInput
    waitlistEvent?: EventCreateNestedOneWithoutWaitlistInput
    visitedEvent?: EventCreateNestedOneWithoutVisitedUsersInput
  }

  export type UsersOnEventsUncheckedCreateInput = {
    userId: string
    eventId: string
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    waitlistEventId?: string | null
    visitedEventId?: string | null
  }

  export type UsersOnEventsUpdateInput = {
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutEventsNestedInput
    event?: EventUpdateOneRequiredWithoutUsersNestedInput
    waitlistEvent?: EventUpdateOneWithoutWaitlistNestedInput
    visitedEvent?: EventUpdateOneWithoutVisitedUsersNestedInput
  }

  export type UsersOnEventsUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    waitlistEventId?: NullableStringFieldUpdateOperationsInput | string | null
    visitedEventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsersOnEventsCreateManyInput = {
    userId: string
    eventId: string
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    waitlistEventId?: string | null
    visitedEventId?: string | null
  }

  export type UsersOnEventsUpdateManyMutationInput = {
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersOnEventsUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    waitlistEventId?: NullableStringFieldUpdateOperationsInput | string | null
    visitedEventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChatCreateInput = {
    id?: string
    name?: string | null
    pictureS3Key?: string | null
    isGroup: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: ChatsOnUsersCreateNestedManyWithoutChatInput
    messages?: MessageCreateNestedManyWithoutChatInput
  }

  export type ChatUncheckedCreateInput = {
    id?: string
    name?: string | null
    pictureS3Key?: string | null
    isGroup: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: ChatsOnUsersUncheckedCreateNestedManyWithoutChatInput
    messages?: MessageUncheckedCreateNestedManyWithoutChatInput
  }

  export type ChatUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    pictureS3Key?: NullableStringFieldUpdateOperationsInput | string | null
    isGroup?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: ChatsOnUsersUpdateManyWithoutChatNestedInput
    messages?: MessageUpdateManyWithoutChatNestedInput
  }

  export type ChatUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    pictureS3Key?: NullableStringFieldUpdateOperationsInput | string | null
    isGroup?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: ChatsOnUsersUncheckedUpdateManyWithoutChatNestedInput
    messages?: MessageUncheckedUpdateManyWithoutChatNestedInput
  }

  export type ChatCreateManyInput = {
    id?: string
    name?: string | null
    pictureS3Key?: string | null
    isGroup: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    pictureS3Key?: NullableStringFieldUpdateOperationsInput | string | null
    isGroup?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    pictureS3Key?: NullableStringFieldUpdateOperationsInput | string | null
    isGroup?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatsOnUsersCreateInput = {
    lastSeenAt?: Date | string
    chat: ChatCreateNestedOneWithoutUsersInput
    user: UserCreateNestedOneWithoutChatsInput
  }

  export type ChatsOnUsersUncheckedCreateInput = {
    chatId: string
    userId: string
    lastSeenAt?: Date | string
  }

  export type ChatsOnUsersUpdateInput = {
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chat?: ChatUpdateOneRequiredWithoutUsersNestedInput
    user?: UserUpdateOneRequiredWithoutChatsNestedInput
  }

  export type ChatsOnUsersUncheckedUpdateInput = {
    chatId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatsOnUsersCreateManyInput = {
    chatId: string
    userId: string
    lastSeenAt?: Date | string
  }

  export type ChatsOnUsersUpdateManyMutationInput = {
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatsOnUsersUncheckedUpdateManyInput = {
    chatId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageCreateInput = {
    id?: string
    content: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sender: UserCreateNestedOneWithoutMessagesInput
    chat: ChatCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateInput = {
    id?: string
    content: string
    deletedAt?: Date | string | null
    senderId: string
    chatId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutMessagesNestedInput
    chat?: ChatUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    senderId?: StringFieldUpdateOperationsInput | string
    chatId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageCreateManyInput = {
    id?: string
    content: string
    deletedAt?: Date | string | null
    senderId: string
    chatId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    senderId?: StringFieldUpdateOperationsInput | string
    chatId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuizzesOnCourseCreateInput = {
    quiz: QuizCreateNestedOneWithoutCoursesInput
    course: CourseCreateNestedOneWithoutQuizzesInput
  }

  export type QuizzesOnCourseUncheckedCreateInput = {
    quizId: string
    courseId: string
  }

  export type QuizzesOnCourseUpdateInput = {
    quiz?: QuizUpdateOneRequiredWithoutCoursesNestedInput
    course?: CourseUpdateOneRequiredWithoutQuizzesNestedInput
  }

  export type QuizzesOnCourseUncheckedUpdateInput = {
    quizId?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
  }

  export type QuizzesOnCourseCreateManyInput = {
    quizId: string
    courseId: string
  }

  export type QuizzesOnCourseUpdateManyMutationInput = {

  }

  export type QuizzesOnCourseUncheckedUpdateManyInput = {
    quizId?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
  }

  export type QuizCreateInput = {
    id?: string
    name: string
    nQuestionsPerAttempt?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    courses?: QuizzesOnCourseCreateNestedManyWithoutQuizInput
    questions?: QuestionCreateNestedManyWithoutQuizInput
  }

  export type QuizUncheckedCreateInput = {
    id?: string
    name: string
    nQuestionsPerAttempt?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    courses?: QuizzesOnCourseUncheckedCreateNestedManyWithoutQuizInput
    questions?: QuestionUncheckedCreateNestedManyWithoutQuizInput
  }

  export type QuizUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nQuestionsPerAttempt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courses?: QuizzesOnCourseUpdateManyWithoutQuizNestedInput
    questions?: QuestionUpdateManyWithoutQuizNestedInput
  }

  export type QuizUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nQuestionsPerAttempt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courses?: QuizzesOnCourseUncheckedUpdateManyWithoutQuizNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type QuizCreateManyInput = {
    id?: string
    name: string
    nQuestionsPerAttempt?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuizUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nQuestionsPerAttempt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuizUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nQuestionsPerAttempt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    answers?: AnswerCreateNestedManyWithoutQuestionInput
    quiz: QuizCreateNestedOneWithoutQuestionsInput
  }

  export type QuestionUncheckedCreateInput = {
    id?: string
    content: string
    quizId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    answers?: AnswerUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answers?: AnswerUpdateManyWithoutQuestionNestedInput
    quiz?: QuizUpdateOneRequiredWithoutQuestionsNestedInput
  }

  export type QuestionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    quizId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answers?: AnswerUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionCreateManyInput = {
    id?: string
    content: string
    quizId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    quizId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnswerCreateInput = {
    id?: string
    content: string
    isCorrect: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    question: QuestionCreateNestedOneWithoutAnswersInput
  }

  export type AnswerUncheckedCreateInput = {
    id?: string
    content: string
    isCorrect: boolean
    questionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AnswerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    question?: QuestionUpdateOneRequiredWithoutAnswersNestedInput
  }

  export type AnswerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    questionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnswerCreateManyInput = {
    id?: string
    content: string
    isCorrect: boolean
    questionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AnswerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnswerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    questionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type EnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type PaymentListRelationFilter = {
    every?: PaymentWhereInput
    some?: PaymentWhereInput
    none?: PaymentWhereInput
  }

  export type ChatsOnUsersListRelationFilter = {
    every?: ChatsOnUsersWhereInput
    some?: ChatsOnUsersWhereInput
    none?: ChatsOnUsersWhereInput
  }

  export type UsersOnEventsListRelationFilter = {
    every?: UsersOnEventsWhereInput
    some?: UsersOnEventsWhereInput
    none?: UsersOnEventsWhereInput
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type CourseRelationFilter = {
    is?: CourseWhereInput | null
    isNot?: CourseWhereInput | null
  }

  export type PasswordRecoveryTokenRelationFilter = {
    is?: PasswordRecoveryTokenWhereInput | null
    isNot?: PasswordRecoveryTokenWhereInput | null
  }

  export type QuizAttemptListRelationFilter = {
    every?: QuizAttemptWhereInput
    some?: QuizAttemptWhereInput
    none?: QuizAttemptWhereInput
  }

  export type WebPushSubscriptionListRelationFilter = {
    every?: WebPushSubscriptionWhereInput
    some?: WebPushSubscriptionWhereInput
    none?: WebPushSubscriptionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatsOnUsersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersOnEventsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuizAttemptOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WebPushSubscriptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    birthDate?: SortOrder
    address?: SortOrder
    zipCode?: SortOrder
    city?: SortOrder
    idNumber?: SortOrder
    idIssueDate?: SortOrder
    profilePicturePath?: SortOrder
    isInClub?: SortOrder
    courseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    isCalendarEnable?: SortOrder
    calendarBlockingDeadline?: SortOrder
    receiveEmailsOnNewEvent?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    birthDate?: SortOrder
    address?: SortOrder
    zipCode?: SortOrder
    city?: SortOrder
    idNumber?: SortOrder
    idIssueDate?: SortOrder
    profilePicturePath?: SortOrder
    isInClub?: SortOrder
    courseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    isCalendarEnable?: SortOrder
    calendarBlockingDeadline?: SortOrder
    receiveEmailsOnNewEvent?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    birthDate?: SortOrder
    address?: SortOrder
    zipCode?: SortOrder
    city?: SortOrder
    idNumber?: SortOrder
    idIssueDate?: SortOrder
    profilePicturePath?: SortOrder
    isInClub?: SortOrder
    courseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    isCalendarEnable?: SortOrder
    calendarBlockingDeadline?: SortOrder
    receiveEmailsOnNewEvent?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type EnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type WebPushSubscriptionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    endpoint?: SortOrder
    p256dh?: SortOrder
    auth?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    chatEnabled?: SortOrder
    calendarEnabled?: SortOrder
  }

  export type WebPushSubscriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    endpoint?: SortOrder
    p256dh?: SortOrder
    auth?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    chatEnabled?: SortOrder
    calendarEnabled?: SortOrder
  }

  export type WebPushSubscriptionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    endpoint?: SortOrder
    p256dh?: SortOrder
    auth?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    chatEnabled?: SortOrder
    calendarEnabled?: SortOrder
  }

  export type QuizAttemptCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuizAttemptMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuizAttemptMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PasswordRecoveryTokenCountOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PasswordRecoveryTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PasswordRecoveryTokenMinOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailVerificationTokenCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailVerificationTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailVerificationTokenMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ZoomMeetingCountOrderByAggregateInput = {
    id?: SortOrder
    meetingId?: SortOrder
    joinUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ZoomMeetingMaxOrderByAggregateInput = {
    id?: SortOrder
    meetingId?: SortOrder
    joinUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ZoomMeetingMinOrderByAggregateInput = {
    id?: SortOrder
    meetingId?: SortOrder
    joinUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VideosOnCoursesListRelationFilter = {
    every?: VideosOnCoursesWhereInput
    some?: VideosOnCoursesWhereInput
    none?: VideosOnCoursesWhereInput
  }

  export type VideosOnCoursesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VideoCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    title?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VideoMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    title?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VideoMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    title?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VideoRelationFilter = {
    is?: VideoWhereInput | null
    isNot?: VideoWhereInput | null
  }

  export type VideosOnCoursesVideoIdCourseIdCompoundUniqueInput = {
    videoId: string
    courseId: string
  }

  export type VideosOnCoursesCountOrderByAggregateInput = {
    videoId?: SortOrder
    courseId?: SortOrder
  }

  export type VideosOnCoursesMaxOrderByAggregateInput = {
    videoId?: SortOrder
    courseId?: SortOrder
  }

  export type VideosOnCoursesMinOrderByAggregateInput = {
    videoId?: SortOrder
    courseId?: SortOrder
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type EnumPaymentMethodFilter = {
    equals?: PaymentMethod
    in?: Enumerable<PaymentMethod>
    notIn?: Enumerable<PaymentMethod>
    not?: NestedEnumPaymentMethodFilter | PaymentMethod
  }

  export type EnumPaymentTypeFilter = {
    equals?: PaymentType
    in?: Enumerable<PaymentType>
    notIn?: Enumerable<PaymentType>
    not?: NestedEnumPaymentTypeFilter | PaymentType
  }

  export type PaymentCountOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    method?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    description?: SortOrder
    paidAt?: SortOrder
    stripePaymentIntentId?: SortOrder
    woocommerceOrderId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type PaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    method?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    description?: SortOrder
    paidAt?: SortOrder
    stripePaymentIntentId?: SortOrder
    woocommerceOrderId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentMinOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    method?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    description?: SortOrder
    paidAt?: SortOrder
    stripePaymentIntentId?: SortOrder
    woocommerceOrderId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type EnumPaymentMethodWithAggregatesFilter = {
    equals?: PaymentMethod
    in?: Enumerable<PaymentMethod>
    notIn?: Enumerable<PaymentMethod>
    not?: NestedEnumPaymentMethodWithAggregatesFilter | PaymentMethod
    _count?: NestedIntFilter
    _min?: NestedEnumPaymentMethodFilter
    _max?: NestedEnumPaymentMethodFilter
  }

  export type EnumPaymentTypeWithAggregatesFilter = {
    equals?: PaymentType
    in?: Enumerable<PaymentType>
    notIn?: Enumerable<PaymentType>
    not?: NestedEnumPaymentTypeWithAggregatesFilter | PaymentType
    _count?: NestedIntFilter
    _min?: NestedEnumPaymentTypeFilter
    _max?: NestedEnumPaymentTypeFilter
  }

  export type FolderRelationFilter = {
    is?: FolderWhereInput | null
    isNot?: FolderWhereInput | null
  }

  export type FileCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    s3Key?: SortOrder
    contentType?: SortOrder
    folderId?: SortOrder
    courseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FileMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    s3Key?: SortOrder
    contentType?: SortOrder
    folderId?: SortOrder
    courseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FileMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    s3Key?: SortOrder
    contentType?: SortOrder
    folderId?: SortOrder
    courseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FileListRelationFilter = {
    every?: FileWhereInput
    some?: FileWhereInput
    none?: FileWhereInput
  }

  export type FolderListRelationFilter = {
    every?: FolderWhereInput
    some?: FolderWhereInput
    none?: FolderWhereInput
  }

  export type FileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FolderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FolderCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    parentId?: SortOrder
    isRoot?: SortOrder
    courseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FolderMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    parentId?: SortOrder
    isRoot?: SortOrder
    courseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FolderMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    parentId?: SortOrder
    isRoot?: SortOrder
    courseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type QuizzesOnCourseListRelationFilter = {
    every?: QuizzesOnCourseWhereInput
    some?: QuizzesOnCourseWhereInput
    none?: QuizzesOnCourseWhereInput
  }

  export type PredefinedEventOnCoursesListRelationFilter = {
    every?: PredefinedEventOnCoursesWhereInput
    some?: PredefinedEventOnCoursesWhereInput
    none?: PredefinedEventOnCoursesWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuizzesOnCourseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PredefinedEventOnCoursesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourseCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CourseMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CourseMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EventListRelationFilter = {
    every?: EventWhereInput
    some?: EventWhereInput
    none?: EventWhereInput
  }

  export type EventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PredefinedEventCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PredefinedEventMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PredefinedEventMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PredefinedEventRelationFilter = {
    is?: PredefinedEventWhereInput | null
    isNot?: PredefinedEventWhereInput | null
  }

  export type PredefinedEventOnCoursesPredefinedEventIdCourseIdCompoundUniqueInput = {
    predefinedEventId: string
    courseId: string
  }

  export type PredefinedEventOnCoursesCountOrderByAggregateInput = {
    predefinedEventId?: SortOrder
    courseId?: SortOrder
  }

  export type PredefinedEventOnCoursesMaxOrderByAggregateInput = {
    predefinedEventId?: SortOrder
    courseId?: SortOrder
  }

  export type PredefinedEventOnCoursesMinOrderByAggregateInput = {
    predefinedEventId?: SortOrder
    courseId?: SortOrder
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type EventCountOrderByAggregateInput = {
    id?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalSlots?: SortOrder
    description?: SortOrder
    predefinedEventId?: SortOrder
    title?: SortOrder
    isClub?: SortOrder
    isHidden?: SortOrder
    enableBooking?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    color?: SortOrder
    recurrenceRule?: SortOrder
    recurrenceEnd?: SortOrder
  }

  export type EventAvgOrderByAggregateInput = {
    totalSlots?: SortOrder
  }

  export type EventMaxOrderByAggregateInput = {
    id?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalSlots?: SortOrder
    description?: SortOrder
    predefinedEventId?: SortOrder
    title?: SortOrder
    isClub?: SortOrder
    isHidden?: SortOrder
    enableBooking?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    color?: SortOrder
    recurrenceRule?: SortOrder
    recurrenceEnd?: SortOrder
  }

  export type EventMinOrderByAggregateInput = {
    id?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalSlots?: SortOrder
    description?: SortOrder
    predefinedEventId?: SortOrder
    title?: SortOrder
    isClub?: SortOrder
    isHidden?: SortOrder
    enableBooking?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    color?: SortOrder
    recurrenceRule?: SortOrder
    recurrenceEnd?: SortOrder
  }

  export type EventSumOrderByAggregateInput = {
    totalSlots?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type EventRelationFilter = {
    is?: EventWhereInput | null
    isNot?: EventWhereInput | null
  }

  export type UsersOnEventsUserIdEventIdCompoundUniqueInput = {
    userId: string
    eventId: string
  }

  export type UsersOnEventsCountOrderByAggregateInput = {
    userId?: SortOrder
    eventId?: SortOrder
    isCompleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    waitlistEventId?: SortOrder
    visitedEventId?: SortOrder
  }

  export type UsersOnEventsMaxOrderByAggregateInput = {
    userId?: SortOrder
    eventId?: SortOrder
    isCompleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    waitlistEventId?: SortOrder
    visitedEventId?: SortOrder
  }

  export type UsersOnEventsMinOrderByAggregateInput = {
    userId?: SortOrder
    eventId?: SortOrder
    isCompleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    waitlistEventId?: SortOrder
    visitedEventId?: SortOrder
  }

  export type ChatCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    pictureS3Key?: SortOrder
    isGroup?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    pictureS3Key?: SortOrder
    isGroup?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    pictureS3Key?: SortOrder
    isGroup?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatRelationFilter = {
    is?: ChatWhereInput | null
    isNot?: ChatWhereInput | null
  }

  export type ChatsOnUsersChatIdUserIdCompoundUniqueInput = {
    chatId: string
    userId: string
  }

  export type ChatsOnUsersCountOrderByAggregateInput = {
    chatId?: SortOrder
    userId?: SortOrder
    lastSeenAt?: SortOrder
  }

  export type ChatsOnUsersMaxOrderByAggregateInput = {
    chatId?: SortOrder
    userId?: SortOrder
    lastSeenAt?: SortOrder
  }

  export type ChatsOnUsersMinOrderByAggregateInput = {
    chatId?: SortOrder
    userId?: SortOrder
    lastSeenAt?: SortOrder
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    deletedAt?: SortOrder
    senderId?: SortOrder
    chatId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    deletedAt?: SortOrder
    senderId?: SortOrder
    chatId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    deletedAt?: SortOrder
    senderId?: SortOrder
    chatId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuizRelationFilter = {
    is?: QuizWhereInput | null
    isNot?: QuizWhereInput | null
  }

  export type QuizzesOnCourseQuizIdCourseIdCompoundUniqueInput = {
    quizId: string
    courseId: string
  }

  export type QuizzesOnCourseCountOrderByAggregateInput = {
    quizId?: SortOrder
    courseId?: SortOrder
  }

  export type QuizzesOnCourseMaxOrderByAggregateInput = {
    quizId?: SortOrder
    courseId?: SortOrder
  }

  export type QuizzesOnCourseMinOrderByAggregateInput = {
    quizId?: SortOrder
    courseId?: SortOrder
  }

  export type QuestionListRelationFilter = {
    every?: QuestionWhereInput
    some?: QuestionWhereInput
    none?: QuestionWhereInput
  }

  export type QuestionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuizCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    nQuestionsPerAttempt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuizAvgOrderByAggregateInput = {
    nQuestionsPerAttempt?: SortOrder
  }

  export type QuizMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    nQuestionsPerAttempt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuizMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    nQuestionsPerAttempt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuizSumOrderByAggregateInput = {
    nQuestionsPerAttempt?: SortOrder
  }

  export type AnswerListRelationFilter = {
    every?: AnswerWhereInput
    some?: AnswerWhereInput
    none?: AnswerWhereInput
  }

  export type AnswerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestionCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    quizId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    quizId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    quizId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionRelationFilter = {
    is?: QuestionWhereInput | null
    isNot?: QuestionWhereInput | null
  }

  export type AnswerCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    isCorrect?: SortOrder
    questionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AnswerMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    isCorrect?: SortOrder
    questionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AnswerMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    isCorrect?: SortOrder
    questionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<PaymentCreateWithoutUserInput>, Enumerable<PaymentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PaymentCreateOrConnectWithoutUserInput>
    createMany?: PaymentCreateManyUserInputEnvelope
    connect?: Enumerable<PaymentWhereUniqueInput>
  }

  export type ChatsOnUsersCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ChatsOnUsersCreateWithoutUserInput>, Enumerable<ChatsOnUsersUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ChatsOnUsersCreateOrConnectWithoutUserInput>
    createMany?: ChatsOnUsersCreateManyUserInputEnvelope
    connect?: Enumerable<ChatsOnUsersWhereUniqueInput>
  }

  export type UsersOnEventsCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UsersOnEventsCreateWithoutUserInput>, Enumerable<UsersOnEventsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UsersOnEventsCreateOrConnectWithoutUserInput>
    createMany?: UsersOnEventsCreateManyUserInputEnvelope
    connect?: Enumerable<UsersOnEventsWhereUniqueInput>
  }

  export type MessageCreateNestedManyWithoutSenderInput = {
    create?: XOR<Enumerable<MessageCreateWithoutSenderInput>, Enumerable<MessageUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutSenderInput>
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: Enumerable<MessageWhereUniqueInput>
  }

  export type CourseCreateNestedOneWithoutStudentsInput = {
    create?: XOR<CourseCreateWithoutStudentsInput, CourseUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutStudentsInput
    connect?: CourseWhereUniqueInput
  }

  export type PasswordRecoveryTokenCreateNestedOneWithoutUserInput = {
    create?: XOR<PasswordRecoveryTokenCreateWithoutUserInput, PasswordRecoveryTokenUncheckedCreateWithoutUserInput>
    connectOrCreate?: PasswordRecoveryTokenCreateOrConnectWithoutUserInput
    connect?: PasswordRecoveryTokenWhereUniqueInput
  }

  export type QuizAttemptCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<QuizAttemptCreateWithoutUserInput>, Enumerable<QuizAttemptUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<QuizAttemptCreateOrConnectWithoutUserInput>
    createMany?: QuizAttemptCreateManyUserInputEnvelope
    connect?: Enumerable<QuizAttemptWhereUniqueInput>
  }

  export type WebPushSubscriptionCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<WebPushSubscriptionCreateWithoutUserInput>, Enumerable<WebPushSubscriptionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<WebPushSubscriptionCreateOrConnectWithoutUserInput>
    createMany?: WebPushSubscriptionCreateManyUserInputEnvelope
    connect?: Enumerable<WebPushSubscriptionWhereUniqueInput>
  }

  export type PaymentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<PaymentCreateWithoutUserInput>, Enumerable<PaymentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PaymentCreateOrConnectWithoutUserInput>
    createMany?: PaymentCreateManyUserInputEnvelope
    connect?: Enumerable<PaymentWhereUniqueInput>
  }

  export type ChatsOnUsersUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ChatsOnUsersCreateWithoutUserInput>, Enumerable<ChatsOnUsersUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ChatsOnUsersCreateOrConnectWithoutUserInput>
    createMany?: ChatsOnUsersCreateManyUserInputEnvelope
    connect?: Enumerable<ChatsOnUsersWhereUniqueInput>
  }

  export type UsersOnEventsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UsersOnEventsCreateWithoutUserInput>, Enumerable<UsersOnEventsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UsersOnEventsCreateOrConnectWithoutUserInput>
    createMany?: UsersOnEventsCreateManyUserInputEnvelope
    connect?: Enumerable<UsersOnEventsWhereUniqueInput>
  }

  export type MessageUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<Enumerable<MessageCreateWithoutSenderInput>, Enumerable<MessageUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutSenderInput>
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: Enumerable<MessageWhereUniqueInput>
  }

  export type PasswordRecoveryTokenUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<PasswordRecoveryTokenCreateWithoutUserInput, PasswordRecoveryTokenUncheckedCreateWithoutUserInput>
    connectOrCreate?: PasswordRecoveryTokenCreateOrConnectWithoutUserInput
    connect?: PasswordRecoveryTokenWhereUniqueInput
  }

  export type QuizAttemptUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<QuizAttemptCreateWithoutUserInput>, Enumerable<QuizAttemptUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<QuizAttemptCreateOrConnectWithoutUserInput>
    createMany?: QuizAttemptCreateManyUserInputEnvelope
    connect?: Enumerable<QuizAttemptWhereUniqueInput>
  }

  export type WebPushSubscriptionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<WebPushSubscriptionCreateWithoutUserInput>, Enumerable<WebPushSubscriptionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<WebPushSubscriptionCreateOrConnectWithoutUserInput>
    createMany?: WebPushSubscriptionCreateManyUserInputEnvelope
    connect?: Enumerable<WebPushSubscriptionWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: Role
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PaymentUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<PaymentCreateWithoutUserInput>, Enumerable<PaymentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PaymentCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<PaymentUpsertWithWhereUniqueWithoutUserInput>
    createMany?: PaymentCreateManyUserInputEnvelope
    set?: Enumerable<PaymentWhereUniqueInput>
    disconnect?: Enumerable<PaymentWhereUniqueInput>
    delete?: Enumerable<PaymentWhereUniqueInput>
    connect?: Enumerable<PaymentWhereUniqueInput>
    update?: Enumerable<PaymentUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<PaymentUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<PaymentScalarWhereInput>
  }

  export type ChatsOnUsersUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ChatsOnUsersCreateWithoutUserInput>, Enumerable<ChatsOnUsersUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ChatsOnUsersCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ChatsOnUsersUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ChatsOnUsersCreateManyUserInputEnvelope
    set?: Enumerable<ChatsOnUsersWhereUniqueInput>
    disconnect?: Enumerable<ChatsOnUsersWhereUniqueInput>
    delete?: Enumerable<ChatsOnUsersWhereUniqueInput>
    connect?: Enumerable<ChatsOnUsersWhereUniqueInput>
    update?: Enumerable<ChatsOnUsersUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ChatsOnUsersUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ChatsOnUsersScalarWhereInput>
  }

  export type UsersOnEventsUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UsersOnEventsCreateWithoutUserInput>, Enumerable<UsersOnEventsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UsersOnEventsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UsersOnEventsUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UsersOnEventsCreateManyUserInputEnvelope
    set?: Enumerable<UsersOnEventsWhereUniqueInput>
    disconnect?: Enumerable<UsersOnEventsWhereUniqueInput>
    delete?: Enumerable<UsersOnEventsWhereUniqueInput>
    connect?: Enumerable<UsersOnEventsWhereUniqueInput>
    update?: Enumerable<UsersOnEventsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UsersOnEventsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UsersOnEventsScalarWhereInput>
  }

  export type MessageUpdateManyWithoutSenderNestedInput = {
    create?: XOR<Enumerable<MessageCreateWithoutSenderInput>, Enumerable<MessageUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutSenderInput>
    upsert?: Enumerable<MessageUpsertWithWhereUniqueWithoutSenderInput>
    createMany?: MessageCreateManySenderInputEnvelope
    set?: Enumerable<MessageWhereUniqueInput>
    disconnect?: Enumerable<MessageWhereUniqueInput>
    delete?: Enumerable<MessageWhereUniqueInput>
    connect?: Enumerable<MessageWhereUniqueInput>
    update?: Enumerable<MessageUpdateWithWhereUniqueWithoutSenderInput>
    updateMany?: Enumerable<MessageUpdateManyWithWhereWithoutSenderInput>
    deleteMany?: Enumerable<MessageScalarWhereInput>
  }

  export type CourseUpdateOneWithoutStudentsNestedInput = {
    create?: XOR<CourseCreateWithoutStudentsInput, CourseUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutStudentsInput
    upsert?: CourseUpsertWithoutStudentsInput
    disconnect?: boolean
    delete?: boolean
    connect?: CourseWhereUniqueInput
    update?: XOR<CourseUpdateWithoutStudentsInput, CourseUncheckedUpdateWithoutStudentsInput>
  }

  export type PasswordRecoveryTokenUpdateOneWithoutUserNestedInput = {
    create?: XOR<PasswordRecoveryTokenCreateWithoutUserInput, PasswordRecoveryTokenUncheckedCreateWithoutUserInput>
    connectOrCreate?: PasswordRecoveryTokenCreateOrConnectWithoutUserInput
    upsert?: PasswordRecoveryTokenUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: PasswordRecoveryTokenWhereUniqueInput
    update?: XOR<PasswordRecoveryTokenUpdateWithoutUserInput, PasswordRecoveryTokenUncheckedUpdateWithoutUserInput>
  }

  export type QuizAttemptUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<QuizAttemptCreateWithoutUserInput>, Enumerable<QuizAttemptUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<QuizAttemptCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<QuizAttemptUpsertWithWhereUniqueWithoutUserInput>
    createMany?: QuizAttemptCreateManyUserInputEnvelope
    set?: Enumerable<QuizAttemptWhereUniqueInput>
    disconnect?: Enumerable<QuizAttemptWhereUniqueInput>
    delete?: Enumerable<QuizAttemptWhereUniqueInput>
    connect?: Enumerable<QuizAttemptWhereUniqueInput>
    update?: Enumerable<QuizAttemptUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<QuizAttemptUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<QuizAttemptScalarWhereInput>
  }

  export type WebPushSubscriptionUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<WebPushSubscriptionCreateWithoutUserInput>, Enumerable<WebPushSubscriptionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<WebPushSubscriptionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<WebPushSubscriptionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: WebPushSubscriptionCreateManyUserInputEnvelope
    set?: Enumerable<WebPushSubscriptionWhereUniqueInput>
    disconnect?: Enumerable<WebPushSubscriptionWhereUniqueInput>
    delete?: Enumerable<WebPushSubscriptionWhereUniqueInput>
    connect?: Enumerable<WebPushSubscriptionWhereUniqueInput>
    update?: Enumerable<WebPushSubscriptionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<WebPushSubscriptionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<WebPushSubscriptionScalarWhereInput>
  }

  export type PaymentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<PaymentCreateWithoutUserInput>, Enumerable<PaymentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PaymentCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<PaymentUpsertWithWhereUniqueWithoutUserInput>
    createMany?: PaymentCreateManyUserInputEnvelope
    set?: Enumerable<PaymentWhereUniqueInput>
    disconnect?: Enumerable<PaymentWhereUniqueInput>
    delete?: Enumerable<PaymentWhereUniqueInput>
    connect?: Enumerable<PaymentWhereUniqueInput>
    update?: Enumerable<PaymentUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<PaymentUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<PaymentScalarWhereInput>
  }

  export type ChatsOnUsersUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ChatsOnUsersCreateWithoutUserInput>, Enumerable<ChatsOnUsersUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ChatsOnUsersCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ChatsOnUsersUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ChatsOnUsersCreateManyUserInputEnvelope
    set?: Enumerable<ChatsOnUsersWhereUniqueInput>
    disconnect?: Enumerable<ChatsOnUsersWhereUniqueInput>
    delete?: Enumerable<ChatsOnUsersWhereUniqueInput>
    connect?: Enumerable<ChatsOnUsersWhereUniqueInput>
    update?: Enumerable<ChatsOnUsersUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ChatsOnUsersUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ChatsOnUsersScalarWhereInput>
  }

  export type UsersOnEventsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UsersOnEventsCreateWithoutUserInput>, Enumerable<UsersOnEventsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UsersOnEventsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UsersOnEventsUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UsersOnEventsCreateManyUserInputEnvelope
    set?: Enumerable<UsersOnEventsWhereUniqueInput>
    disconnect?: Enumerable<UsersOnEventsWhereUniqueInput>
    delete?: Enumerable<UsersOnEventsWhereUniqueInput>
    connect?: Enumerable<UsersOnEventsWhereUniqueInput>
    update?: Enumerable<UsersOnEventsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UsersOnEventsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UsersOnEventsScalarWhereInput>
  }

  export type MessageUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<Enumerable<MessageCreateWithoutSenderInput>, Enumerable<MessageUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutSenderInput>
    upsert?: Enumerable<MessageUpsertWithWhereUniqueWithoutSenderInput>
    createMany?: MessageCreateManySenderInputEnvelope
    set?: Enumerable<MessageWhereUniqueInput>
    disconnect?: Enumerable<MessageWhereUniqueInput>
    delete?: Enumerable<MessageWhereUniqueInput>
    connect?: Enumerable<MessageWhereUniqueInput>
    update?: Enumerable<MessageUpdateWithWhereUniqueWithoutSenderInput>
    updateMany?: Enumerable<MessageUpdateManyWithWhereWithoutSenderInput>
    deleteMany?: Enumerable<MessageScalarWhereInput>
  }

  export type PasswordRecoveryTokenUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<PasswordRecoveryTokenCreateWithoutUserInput, PasswordRecoveryTokenUncheckedCreateWithoutUserInput>
    connectOrCreate?: PasswordRecoveryTokenCreateOrConnectWithoutUserInput
    upsert?: PasswordRecoveryTokenUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: PasswordRecoveryTokenWhereUniqueInput
    update?: XOR<PasswordRecoveryTokenUpdateWithoutUserInput, PasswordRecoveryTokenUncheckedUpdateWithoutUserInput>
  }

  export type QuizAttemptUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<QuizAttemptCreateWithoutUserInput>, Enumerable<QuizAttemptUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<QuizAttemptCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<QuizAttemptUpsertWithWhereUniqueWithoutUserInput>
    createMany?: QuizAttemptCreateManyUserInputEnvelope
    set?: Enumerable<QuizAttemptWhereUniqueInput>
    disconnect?: Enumerable<QuizAttemptWhereUniqueInput>
    delete?: Enumerable<QuizAttemptWhereUniqueInput>
    connect?: Enumerable<QuizAttemptWhereUniqueInput>
    update?: Enumerable<QuizAttemptUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<QuizAttemptUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<QuizAttemptScalarWhereInput>
  }

  export type WebPushSubscriptionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<WebPushSubscriptionCreateWithoutUserInput>, Enumerable<WebPushSubscriptionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<WebPushSubscriptionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<WebPushSubscriptionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: WebPushSubscriptionCreateManyUserInputEnvelope
    set?: Enumerable<WebPushSubscriptionWhereUniqueInput>
    disconnect?: Enumerable<WebPushSubscriptionWhereUniqueInput>
    delete?: Enumerable<WebPushSubscriptionWhereUniqueInput>
    connect?: Enumerable<WebPushSubscriptionWhereUniqueInput>
    update?: Enumerable<WebPushSubscriptionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<WebPushSubscriptionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<WebPushSubscriptionScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutWebPushSubscriptionInput = {
    create?: XOR<UserCreateWithoutWebPushSubscriptionInput, UserUncheckedCreateWithoutWebPushSubscriptionInput>
    connectOrCreate?: UserCreateOrConnectWithoutWebPushSubscriptionInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutWebPushSubscriptionNestedInput = {
    create?: XOR<UserCreateWithoutWebPushSubscriptionInput, UserUncheckedCreateWithoutWebPushSubscriptionInput>
    connectOrCreate?: UserCreateOrConnectWithoutWebPushSubscriptionInput
    upsert?: UserUpsertWithoutWebPushSubscriptionInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutWebPushSubscriptionInput, UserUncheckedUpdateWithoutWebPushSubscriptionInput>
  }

  export type UserCreateNestedOneWithoutQuizAttemptsInput = {
    create?: XOR<UserCreateWithoutQuizAttemptsInput, UserUncheckedCreateWithoutQuizAttemptsInput>
    connectOrCreate?: UserCreateOrConnectWithoutQuizAttemptsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutQuizAttemptsNestedInput = {
    create?: XOR<UserCreateWithoutQuizAttemptsInput, UserUncheckedCreateWithoutQuizAttemptsInput>
    connectOrCreate?: UserCreateOrConnectWithoutQuizAttemptsInput
    upsert?: UserUpsertWithoutQuizAttemptsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutQuizAttemptsInput, UserUncheckedUpdateWithoutQuizAttemptsInput>
  }

  export type UserCreateNestedOneWithoutPasswordRecoveryTokenInput = {
    create?: XOR<UserCreateWithoutPasswordRecoveryTokenInput, UserUncheckedCreateWithoutPasswordRecoveryTokenInput>
    connectOrCreate?: UserCreateOrConnectWithoutPasswordRecoveryTokenInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPasswordRecoveryTokenNestedInput = {
    create?: XOR<UserCreateWithoutPasswordRecoveryTokenInput, UserUncheckedCreateWithoutPasswordRecoveryTokenInput>
    connectOrCreate?: UserCreateOrConnectWithoutPasswordRecoveryTokenInput
    upsert?: UserUpsertWithoutPasswordRecoveryTokenInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutPasswordRecoveryTokenInput, UserUncheckedUpdateWithoutPasswordRecoveryTokenInput>
  }

  export type VideosOnCoursesCreateNestedManyWithoutVideoInput = {
    create?: XOR<Enumerable<VideosOnCoursesCreateWithoutVideoInput>, Enumerable<VideosOnCoursesUncheckedCreateWithoutVideoInput>>
    connectOrCreate?: Enumerable<VideosOnCoursesCreateOrConnectWithoutVideoInput>
    createMany?: VideosOnCoursesCreateManyVideoInputEnvelope
    connect?: Enumerable<VideosOnCoursesWhereUniqueInput>
  }

  export type VideosOnCoursesUncheckedCreateNestedManyWithoutVideoInput = {
    create?: XOR<Enumerable<VideosOnCoursesCreateWithoutVideoInput>, Enumerable<VideosOnCoursesUncheckedCreateWithoutVideoInput>>
    connectOrCreate?: Enumerable<VideosOnCoursesCreateOrConnectWithoutVideoInput>
    createMany?: VideosOnCoursesCreateManyVideoInputEnvelope
    connect?: Enumerable<VideosOnCoursesWhereUniqueInput>
  }

  export type VideosOnCoursesUpdateManyWithoutVideoNestedInput = {
    create?: XOR<Enumerable<VideosOnCoursesCreateWithoutVideoInput>, Enumerable<VideosOnCoursesUncheckedCreateWithoutVideoInput>>
    connectOrCreate?: Enumerable<VideosOnCoursesCreateOrConnectWithoutVideoInput>
    upsert?: Enumerable<VideosOnCoursesUpsertWithWhereUniqueWithoutVideoInput>
    createMany?: VideosOnCoursesCreateManyVideoInputEnvelope
    set?: Enumerable<VideosOnCoursesWhereUniqueInput>
    disconnect?: Enumerable<VideosOnCoursesWhereUniqueInput>
    delete?: Enumerable<VideosOnCoursesWhereUniqueInput>
    connect?: Enumerable<VideosOnCoursesWhereUniqueInput>
    update?: Enumerable<VideosOnCoursesUpdateWithWhereUniqueWithoutVideoInput>
    updateMany?: Enumerable<VideosOnCoursesUpdateManyWithWhereWithoutVideoInput>
    deleteMany?: Enumerable<VideosOnCoursesScalarWhereInput>
  }

  export type VideosOnCoursesUncheckedUpdateManyWithoutVideoNestedInput = {
    create?: XOR<Enumerable<VideosOnCoursesCreateWithoutVideoInput>, Enumerable<VideosOnCoursesUncheckedCreateWithoutVideoInput>>
    connectOrCreate?: Enumerable<VideosOnCoursesCreateOrConnectWithoutVideoInput>
    upsert?: Enumerable<VideosOnCoursesUpsertWithWhereUniqueWithoutVideoInput>
    createMany?: VideosOnCoursesCreateManyVideoInputEnvelope
    set?: Enumerable<VideosOnCoursesWhereUniqueInput>
    disconnect?: Enumerable<VideosOnCoursesWhereUniqueInput>
    delete?: Enumerable<VideosOnCoursesWhereUniqueInput>
    connect?: Enumerable<VideosOnCoursesWhereUniqueInput>
    update?: Enumerable<VideosOnCoursesUpdateWithWhereUniqueWithoutVideoInput>
    updateMany?: Enumerable<VideosOnCoursesUpdateManyWithWhereWithoutVideoInput>
    deleteMany?: Enumerable<VideosOnCoursesScalarWhereInput>
  }

  export type VideoCreateNestedOneWithoutCoursesInput = {
    create?: XOR<VideoCreateWithoutCoursesInput, VideoUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: VideoCreateOrConnectWithoutCoursesInput
    connect?: VideoWhereUniqueInput
  }

  export type CourseCreateNestedOneWithoutVideosInput = {
    create?: XOR<CourseCreateWithoutVideosInput, CourseUncheckedCreateWithoutVideosInput>
    connectOrCreate?: CourseCreateOrConnectWithoutVideosInput
    connect?: CourseWhereUniqueInput
  }

  export type VideoUpdateOneRequiredWithoutCoursesNestedInput = {
    create?: XOR<VideoCreateWithoutCoursesInput, VideoUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: VideoCreateOrConnectWithoutCoursesInput
    upsert?: VideoUpsertWithoutCoursesInput
    connect?: VideoWhereUniqueInput
    update?: XOR<VideoUpdateWithoutCoursesInput, VideoUncheckedUpdateWithoutCoursesInput>
  }

  export type CourseUpdateOneRequiredWithoutVideosNestedInput = {
    create?: XOR<CourseCreateWithoutVideosInput, CourseUncheckedCreateWithoutVideosInput>
    connectOrCreate?: CourseCreateOrConnectWithoutVideosInput
    upsert?: CourseUpsertWithoutVideosInput
    connect?: CourseWhereUniqueInput
    update?: XOR<CourseUpdateWithoutVideosInput, CourseUncheckedUpdateWithoutVideosInput>
  }

  export type UserCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<UserCreateWithoutPaymentsInput, UserUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPaymentsInput
    connect?: UserWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumPaymentMethodFieldUpdateOperationsInput = {
    set?: PaymentMethod
  }

  export type EnumPaymentTypeFieldUpdateOperationsInput = {
    set?: PaymentType
  }

  export type UserUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<UserCreateWithoutPaymentsInput, UserUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPaymentsInput
    upsert?: UserUpsertWithoutPaymentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutPaymentsInput, UserUncheckedUpdateWithoutPaymentsInput>
  }

  export type FolderCreateNestedOneWithoutFilesInput = {
    create?: XOR<FolderCreateWithoutFilesInput, FolderUncheckedCreateWithoutFilesInput>
    connectOrCreate?: FolderCreateOrConnectWithoutFilesInput
    connect?: FolderWhereUniqueInput
  }

  export type CourseCreateNestedOneWithoutFilesInput = {
    create?: XOR<CourseCreateWithoutFilesInput, CourseUncheckedCreateWithoutFilesInput>
    connectOrCreate?: CourseCreateOrConnectWithoutFilesInput
    connect?: CourseWhereUniqueInput
  }

  export type FolderUpdateOneRequiredWithoutFilesNestedInput = {
    create?: XOR<FolderCreateWithoutFilesInput, FolderUncheckedCreateWithoutFilesInput>
    connectOrCreate?: FolderCreateOrConnectWithoutFilesInput
    upsert?: FolderUpsertWithoutFilesInput
    connect?: FolderWhereUniqueInput
    update?: XOR<FolderUpdateWithoutFilesInput, FolderUncheckedUpdateWithoutFilesInput>
  }

  export type CourseUpdateOneRequiredWithoutFilesNestedInput = {
    create?: XOR<CourseCreateWithoutFilesInput, CourseUncheckedCreateWithoutFilesInput>
    connectOrCreate?: CourseCreateOrConnectWithoutFilesInput
    upsert?: CourseUpsertWithoutFilesInput
    connect?: CourseWhereUniqueInput
    update?: XOR<CourseUpdateWithoutFilesInput, CourseUncheckedUpdateWithoutFilesInput>
  }

  export type FileCreateNestedManyWithoutFolderInput = {
    create?: XOR<Enumerable<FileCreateWithoutFolderInput>, Enumerable<FileUncheckedCreateWithoutFolderInput>>
    connectOrCreate?: Enumerable<FileCreateOrConnectWithoutFolderInput>
    createMany?: FileCreateManyFolderInputEnvelope
    connect?: Enumerable<FileWhereUniqueInput>
  }

  export type FolderCreateNestedManyWithoutParentInput = {
    create?: XOR<Enumerable<FolderCreateWithoutParentInput>, Enumerable<FolderUncheckedCreateWithoutParentInput>>
    connectOrCreate?: Enumerable<FolderCreateOrConnectWithoutParentInput>
    createMany?: FolderCreateManyParentInputEnvelope
    connect?: Enumerable<FolderWhereUniqueInput>
  }

  export type FolderCreateNestedOneWithoutFoldersInput = {
    create?: XOR<FolderCreateWithoutFoldersInput, FolderUncheckedCreateWithoutFoldersInput>
    connectOrCreate?: FolderCreateOrConnectWithoutFoldersInput
    connect?: FolderWhereUniqueInput
  }

  export type CourseCreateNestedOneWithoutFoldersInput = {
    create?: XOR<CourseCreateWithoutFoldersInput, CourseUncheckedCreateWithoutFoldersInput>
    connectOrCreate?: CourseCreateOrConnectWithoutFoldersInput
    connect?: CourseWhereUniqueInput
  }

  export type FileUncheckedCreateNestedManyWithoutFolderInput = {
    create?: XOR<Enumerable<FileCreateWithoutFolderInput>, Enumerable<FileUncheckedCreateWithoutFolderInput>>
    connectOrCreate?: Enumerable<FileCreateOrConnectWithoutFolderInput>
    createMany?: FileCreateManyFolderInputEnvelope
    connect?: Enumerable<FileWhereUniqueInput>
  }

  export type FolderUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<Enumerable<FolderCreateWithoutParentInput>, Enumerable<FolderUncheckedCreateWithoutParentInput>>
    connectOrCreate?: Enumerable<FolderCreateOrConnectWithoutParentInput>
    createMany?: FolderCreateManyParentInputEnvelope
    connect?: Enumerable<FolderWhereUniqueInput>
  }

  export type FileUpdateManyWithoutFolderNestedInput = {
    create?: XOR<Enumerable<FileCreateWithoutFolderInput>, Enumerable<FileUncheckedCreateWithoutFolderInput>>
    connectOrCreate?: Enumerable<FileCreateOrConnectWithoutFolderInput>
    upsert?: Enumerable<FileUpsertWithWhereUniqueWithoutFolderInput>
    createMany?: FileCreateManyFolderInputEnvelope
    set?: Enumerable<FileWhereUniqueInput>
    disconnect?: Enumerable<FileWhereUniqueInput>
    delete?: Enumerable<FileWhereUniqueInput>
    connect?: Enumerable<FileWhereUniqueInput>
    update?: Enumerable<FileUpdateWithWhereUniqueWithoutFolderInput>
    updateMany?: Enumerable<FileUpdateManyWithWhereWithoutFolderInput>
    deleteMany?: Enumerable<FileScalarWhereInput>
  }

  export type FolderUpdateManyWithoutParentNestedInput = {
    create?: XOR<Enumerable<FolderCreateWithoutParentInput>, Enumerable<FolderUncheckedCreateWithoutParentInput>>
    connectOrCreate?: Enumerable<FolderCreateOrConnectWithoutParentInput>
    upsert?: Enumerable<FolderUpsertWithWhereUniqueWithoutParentInput>
    createMany?: FolderCreateManyParentInputEnvelope
    set?: Enumerable<FolderWhereUniqueInput>
    disconnect?: Enumerable<FolderWhereUniqueInput>
    delete?: Enumerable<FolderWhereUniqueInput>
    connect?: Enumerable<FolderWhereUniqueInput>
    update?: Enumerable<FolderUpdateWithWhereUniqueWithoutParentInput>
    updateMany?: Enumerable<FolderUpdateManyWithWhereWithoutParentInput>
    deleteMany?: Enumerable<FolderScalarWhereInput>
  }

  export type FolderUpdateOneWithoutFoldersNestedInput = {
    create?: XOR<FolderCreateWithoutFoldersInput, FolderUncheckedCreateWithoutFoldersInput>
    connectOrCreate?: FolderCreateOrConnectWithoutFoldersInput
    upsert?: FolderUpsertWithoutFoldersInput
    disconnect?: boolean
    delete?: boolean
    connect?: FolderWhereUniqueInput
    update?: XOR<FolderUpdateWithoutFoldersInput, FolderUncheckedUpdateWithoutFoldersInput>
  }

  export type CourseUpdateOneRequiredWithoutFoldersNestedInput = {
    create?: XOR<CourseCreateWithoutFoldersInput, CourseUncheckedCreateWithoutFoldersInput>
    connectOrCreate?: CourseCreateOrConnectWithoutFoldersInput
    upsert?: CourseUpsertWithoutFoldersInput
    connect?: CourseWhereUniqueInput
    update?: XOR<CourseUpdateWithoutFoldersInput, CourseUncheckedUpdateWithoutFoldersInput>
  }

  export type FileUncheckedUpdateManyWithoutFolderNestedInput = {
    create?: XOR<Enumerable<FileCreateWithoutFolderInput>, Enumerable<FileUncheckedCreateWithoutFolderInput>>
    connectOrCreate?: Enumerable<FileCreateOrConnectWithoutFolderInput>
    upsert?: Enumerable<FileUpsertWithWhereUniqueWithoutFolderInput>
    createMany?: FileCreateManyFolderInputEnvelope
    set?: Enumerable<FileWhereUniqueInput>
    disconnect?: Enumerable<FileWhereUniqueInput>
    delete?: Enumerable<FileWhereUniqueInput>
    connect?: Enumerable<FileWhereUniqueInput>
    update?: Enumerable<FileUpdateWithWhereUniqueWithoutFolderInput>
    updateMany?: Enumerable<FileUpdateManyWithWhereWithoutFolderInput>
    deleteMany?: Enumerable<FileScalarWhereInput>
  }

  export type FolderUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<Enumerable<FolderCreateWithoutParentInput>, Enumerable<FolderUncheckedCreateWithoutParentInput>>
    connectOrCreate?: Enumerable<FolderCreateOrConnectWithoutParentInput>
    upsert?: Enumerable<FolderUpsertWithWhereUniqueWithoutParentInput>
    createMany?: FolderCreateManyParentInputEnvelope
    set?: Enumerable<FolderWhereUniqueInput>
    disconnect?: Enumerable<FolderWhereUniqueInput>
    delete?: Enumerable<FolderWhereUniqueInput>
    connect?: Enumerable<FolderWhereUniqueInput>
    update?: Enumerable<FolderUpdateWithWhereUniqueWithoutParentInput>
    updateMany?: Enumerable<FolderUpdateManyWithWhereWithoutParentInput>
    deleteMany?: Enumerable<FolderScalarWhereInput>
  }

  export type FolderCreateNestedManyWithoutCourseInput = {
    create?: XOR<Enumerable<FolderCreateWithoutCourseInput>, Enumerable<FolderUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<FolderCreateOrConnectWithoutCourseInput>
    createMany?: FolderCreateManyCourseInputEnvelope
    connect?: Enumerable<FolderWhereUniqueInput>
  }

  export type FileCreateNestedManyWithoutCourseInput = {
    create?: XOR<Enumerable<FileCreateWithoutCourseInput>, Enumerable<FileUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<FileCreateOrConnectWithoutCourseInput>
    createMany?: FileCreateManyCourseInputEnvelope
    connect?: Enumerable<FileWhereUniqueInput>
  }

  export type VideosOnCoursesCreateNestedManyWithoutCourseInput = {
    create?: XOR<Enumerable<VideosOnCoursesCreateWithoutCourseInput>, Enumerable<VideosOnCoursesUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<VideosOnCoursesCreateOrConnectWithoutCourseInput>
    createMany?: VideosOnCoursesCreateManyCourseInputEnvelope
    connect?: Enumerable<VideosOnCoursesWhereUniqueInput>
  }

  export type UserCreateNestedManyWithoutCourseInput = {
    create?: XOR<Enumerable<UserCreateWithoutCourseInput>, Enumerable<UserUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutCourseInput>
    createMany?: UserCreateManyCourseInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type QuizzesOnCourseCreateNestedManyWithoutCourseInput = {
    create?: XOR<Enumerable<QuizzesOnCourseCreateWithoutCourseInput>, Enumerable<QuizzesOnCourseUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<QuizzesOnCourseCreateOrConnectWithoutCourseInput>
    createMany?: QuizzesOnCourseCreateManyCourseInputEnvelope
    connect?: Enumerable<QuizzesOnCourseWhereUniqueInput>
  }

  export type PredefinedEventOnCoursesCreateNestedManyWithoutCourseInput = {
    create?: XOR<Enumerable<PredefinedEventOnCoursesCreateWithoutCourseInput>, Enumerable<PredefinedEventOnCoursesUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<PredefinedEventOnCoursesCreateOrConnectWithoutCourseInput>
    createMany?: PredefinedEventOnCoursesCreateManyCourseInputEnvelope
    connect?: Enumerable<PredefinedEventOnCoursesWhereUniqueInput>
  }

  export type FolderUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<Enumerable<FolderCreateWithoutCourseInput>, Enumerable<FolderUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<FolderCreateOrConnectWithoutCourseInput>
    createMany?: FolderCreateManyCourseInputEnvelope
    connect?: Enumerable<FolderWhereUniqueInput>
  }

  export type FileUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<Enumerable<FileCreateWithoutCourseInput>, Enumerable<FileUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<FileCreateOrConnectWithoutCourseInput>
    createMany?: FileCreateManyCourseInputEnvelope
    connect?: Enumerable<FileWhereUniqueInput>
  }

  export type VideosOnCoursesUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<Enumerable<VideosOnCoursesCreateWithoutCourseInput>, Enumerable<VideosOnCoursesUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<VideosOnCoursesCreateOrConnectWithoutCourseInput>
    createMany?: VideosOnCoursesCreateManyCourseInputEnvelope
    connect?: Enumerable<VideosOnCoursesWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<Enumerable<UserCreateWithoutCourseInput>, Enumerable<UserUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutCourseInput>
    createMany?: UserCreateManyCourseInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type QuizzesOnCourseUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<Enumerable<QuizzesOnCourseCreateWithoutCourseInput>, Enumerable<QuizzesOnCourseUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<QuizzesOnCourseCreateOrConnectWithoutCourseInput>
    createMany?: QuizzesOnCourseCreateManyCourseInputEnvelope
    connect?: Enumerable<QuizzesOnCourseWhereUniqueInput>
  }

  export type PredefinedEventOnCoursesUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<Enumerable<PredefinedEventOnCoursesCreateWithoutCourseInput>, Enumerable<PredefinedEventOnCoursesUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<PredefinedEventOnCoursesCreateOrConnectWithoutCourseInput>
    createMany?: PredefinedEventOnCoursesCreateManyCourseInputEnvelope
    connect?: Enumerable<PredefinedEventOnCoursesWhereUniqueInput>
  }

  export type FolderUpdateManyWithoutCourseNestedInput = {
    create?: XOR<Enumerable<FolderCreateWithoutCourseInput>, Enumerable<FolderUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<FolderCreateOrConnectWithoutCourseInput>
    upsert?: Enumerable<FolderUpsertWithWhereUniqueWithoutCourseInput>
    createMany?: FolderCreateManyCourseInputEnvelope
    set?: Enumerable<FolderWhereUniqueInput>
    disconnect?: Enumerable<FolderWhereUniqueInput>
    delete?: Enumerable<FolderWhereUniqueInput>
    connect?: Enumerable<FolderWhereUniqueInput>
    update?: Enumerable<FolderUpdateWithWhereUniqueWithoutCourseInput>
    updateMany?: Enumerable<FolderUpdateManyWithWhereWithoutCourseInput>
    deleteMany?: Enumerable<FolderScalarWhereInput>
  }

  export type FileUpdateManyWithoutCourseNestedInput = {
    create?: XOR<Enumerable<FileCreateWithoutCourseInput>, Enumerable<FileUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<FileCreateOrConnectWithoutCourseInput>
    upsert?: Enumerable<FileUpsertWithWhereUniqueWithoutCourseInput>
    createMany?: FileCreateManyCourseInputEnvelope
    set?: Enumerable<FileWhereUniqueInput>
    disconnect?: Enumerable<FileWhereUniqueInput>
    delete?: Enumerable<FileWhereUniqueInput>
    connect?: Enumerable<FileWhereUniqueInput>
    update?: Enumerable<FileUpdateWithWhereUniqueWithoutCourseInput>
    updateMany?: Enumerable<FileUpdateManyWithWhereWithoutCourseInput>
    deleteMany?: Enumerable<FileScalarWhereInput>
  }

  export type VideosOnCoursesUpdateManyWithoutCourseNestedInput = {
    create?: XOR<Enumerable<VideosOnCoursesCreateWithoutCourseInput>, Enumerable<VideosOnCoursesUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<VideosOnCoursesCreateOrConnectWithoutCourseInput>
    upsert?: Enumerable<VideosOnCoursesUpsertWithWhereUniqueWithoutCourseInput>
    createMany?: VideosOnCoursesCreateManyCourseInputEnvelope
    set?: Enumerable<VideosOnCoursesWhereUniqueInput>
    disconnect?: Enumerable<VideosOnCoursesWhereUniqueInput>
    delete?: Enumerable<VideosOnCoursesWhereUniqueInput>
    connect?: Enumerable<VideosOnCoursesWhereUniqueInput>
    update?: Enumerable<VideosOnCoursesUpdateWithWhereUniqueWithoutCourseInput>
    updateMany?: Enumerable<VideosOnCoursesUpdateManyWithWhereWithoutCourseInput>
    deleteMany?: Enumerable<VideosOnCoursesScalarWhereInput>
  }

  export type UserUpdateManyWithoutCourseNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutCourseInput>, Enumerable<UserUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutCourseInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutCourseInput>
    createMany?: UserCreateManyCourseInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutCourseInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutCourseInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type QuizzesOnCourseUpdateManyWithoutCourseNestedInput = {
    create?: XOR<Enumerable<QuizzesOnCourseCreateWithoutCourseInput>, Enumerable<QuizzesOnCourseUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<QuizzesOnCourseCreateOrConnectWithoutCourseInput>
    upsert?: Enumerable<QuizzesOnCourseUpsertWithWhereUniqueWithoutCourseInput>
    createMany?: QuizzesOnCourseCreateManyCourseInputEnvelope
    set?: Enumerable<QuizzesOnCourseWhereUniqueInput>
    disconnect?: Enumerable<QuizzesOnCourseWhereUniqueInput>
    delete?: Enumerable<QuizzesOnCourseWhereUniqueInput>
    connect?: Enumerable<QuizzesOnCourseWhereUniqueInput>
    update?: Enumerable<QuizzesOnCourseUpdateWithWhereUniqueWithoutCourseInput>
    updateMany?: Enumerable<QuizzesOnCourseUpdateManyWithWhereWithoutCourseInput>
    deleteMany?: Enumerable<QuizzesOnCourseScalarWhereInput>
  }

  export type PredefinedEventOnCoursesUpdateManyWithoutCourseNestedInput = {
    create?: XOR<Enumerable<PredefinedEventOnCoursesCreateWithoutCourseInput>, Enumerable<PredefinedEventOnCoursesUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<PredefinedEventOnCoursesCreateOrConnectWithoutCourseInput>
    upsert?: Enumerable<PredefinedEventOnCoursesUpsertWithWhereUniqueWithoutCourseInput>
    createMany?: PredefinedEventOnCoursesCreateManyCourseInputEnvelope
    set?: Enumerable<PredefinedEventOnCoursesWhereUniqueInput>
    disconnect?: Enumerable<PredefinedEventOnCoursesWhereUniqueInput>
    delete?: Enumerable<PredefinedEventOnCoursesWhereUniqueInput>
    connect?: Enumerable<PredefinedEventOnCoursesWhereUniqueInput>
    update?: Enumerable<PredefinedEventOnCoursesUpdateWithWhereUniqueWithoutCourseInput>
    updateMany?: Enumerable<PredefinedEventOnCoursesUpdateManyWithWhereWithoutCourseInput>
    deleteMany?: Enumerable<PredefinedEventOnCoursesScalarWhereInput>
  }

  export type FolderUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<Enumerable<FolderCreateWithoutCourseInput>, Enumerable<FolderUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<FolderCreateOrConnectWithoutCourseInput>
    upsert?: Enumerable<FolderUpsertWithWhereUniqueWithoutCourseInput>
    createMany?: FolderCreateManyCourseInputEnvelope
    set?: Enumerable<FolderWhereUniqueInput>
    disconnect?: Enumerable<FolderWhereUniqueInput>
    delete?: Enumerable<FolderWhereUniqueInput>
    connect?: Enumerable<FolderWhereUniqueInput>
    update?: Enumerable<FolderUpdateWithWhereUniqueWithoutCourseInput>
    updateMany?: Enumerable<FolderUpdateManyWithWhereWithoutCourseInput>
    deleteMany?: Enumerable<FolderScalarWhereInput>
  }

  export type FileUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<Enumerable<FileCreateWithoutCourseInput>, Enumerable<FileUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<FileCreateOrConnectWithoutCourseInput>
    upsert?: Enumerable<FileUpsertWithWhereUniqueWithoutCourseInput>
    createMany?: FileCreateManyCourseInputEnvelope
    set?: Enumerable<FileWhereUniqueInput>
    disconnect?: Enumerable<FileWhereUniqueInput>
    delete?: Enumerable<FileWhereUniqueInput>
    connect?: Enumerable<FileWhereUniqueInput>
    update?: Enumerable<FileUpdateWithWhereUniqueWithoutCourseInput>
    updateMany?: Enumerable<FileUpdateManyWithWhereWithoutCourseInput>
    deleteMany?: Enumerable<FileScalarWhereInput>
  }

  export type VideosOnCoursesUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<Enumerable<VideosOnCoursesCreateWithoutCourseInput>, Enumerable<VideosOnCoursesUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<VideosOnCoursesCreateOrConnectWithoutCourseInput>
    upsert?: Enumerable<VideosOnCoursesUpsertWithWhereUniqueWithoutCourseInput>
    createMany?: VideosOnCoursesCreateManyCourseInputEnvelope
    set?: Enumerable<VideosOnCoursesWhereUniqueInput>
    disconnect?: Enumerable<VideosOnCoursesWhereUniqueInput>
    delete?: Enumerable<VideosOnCoursesWhereUniqueInput>
    connect?: Enumerable<VideosOnCoursesWhereUniqueInput>
    update?: Enumerable<VideosOnCoursesUpdateWithWhereUniqueWithoutCourseInput>
    updateMany?: Enumerable<VideosOnCoursesUpdateManyWithWhereWithoutCourseInput>
    deleteMany?: Enumerable<VideosOnCoursesScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutCourseInput>, Enumerable<UserUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutCourseInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutCourseInput>
    createMany?: UserCreateManyCourseInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutCourseInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutCourseInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type QuizzesOnCourseUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<Enumerable<QuizzesOnCourseCreateWithoutCourseInput>, Enumerable<QuizzesOnCourseUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<QuizzesOnCourseCreateOrConnectWithoutCourseInput>
    upsert?: Enumerable<QuizzesOnCourseUpsertWithWhereUniqueWithoutCourseInput>
    createMany?: QuizzesOnCourseCreateManyCourseInputEnvelope
    set?: Enumerable<QuizzesOnCourseWhereUniqueInput>
    disconnect?: Enumerable<QuizzesOnCourseWhereUniqueInput>
    delete?: Enumerable<QuizzesOnCourseWhereUniqueInput>
    connect?: Enumerable<QuizzesOnCourseWhereUniqueInput>
    update?: Enumerable<QuizzesOnCourseUpdateWithWhereUniqueWithoutCourseInput>
    updateMany?: Enumerable<QuizzesOnCourseUpdateManyWithWhereWithoutCourseInput>
    deleteMany?: Enumerable<QuizzesOnCourseScalarWhereInput>
  }

  export type PredefinedEventOnCoursesUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<Enumerable<PredefinedEventOnCoursesCreateWithoutCourseInput>, Enumerable<PredefinedEventOnCoursesUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<PredefinedEventOnCoursesCreateOrConnectWithoutCourseInput>
    upsert?: Enumerable<PredefinedEventOnCoursesUpsertWithWhereUniqueWithoutCourseInput>
    createMany?: PredefinedEventOnCoursesCreateManyCourseInputEnvelope
    set?: Enumerable<PredefinedEventOnCoursesWhereUniqueInput>
    disconnect?: Enumerable<PredefinedEventOnCoursesWhereUniqueInput>
    delete?: Enumerable<PredefinedEventOnCoursesWhereUniqueInput>
    connect?: Enumerable<PredefinedEventOnCoursesWhereUniqueInput>
    update?: Enumerable<PredefinedEventOnCoursesUpdateWithWhereUniqueWithoutCourseInput>
    updateMany?: Enumerable<PredefinedEventOnCoursesUpdateManyWithWhereWithoutCourseInput>
    deleteMany?: Enumerable<PredefinedEventOnCoursesScalarWhereInput>
  }

  export type EventCreateNestedManyWithoutPredefinedEventInput = {
    create?: XOR<Enumerable<EventCreateWithoutPredefinedEventInput>, Enumerable<EventUncheckedCreateWithoutPredefinedEventInput>>
    connectOrCreate?: Enumerable<EventCreateOrConnectWithoutPredefinedEventInput>
    createMany?: EventCreateManyPredefinedEventInputEnvelope
    connect?: Enumerable<EventWhereUniqueInput>
  }

  export type PredefinedEventOnCoursesCreateNestedManyWithoutPredefinedEventInput = {
    create?: XOR<Enumerable<PredefinedEventOnCoursesCreateWithoutPredefinedEventInput>, Enumerable<PredefinedEventOnCoursesUncheckedCreateWithoutPredefinedEventInput>>
    connectOrCreate?: Enumerable<PredefinedEventOnCoursesCreateOrConnectWithoutPredefinedEventInput>
    createMany?: PredefinedEventOnCoursesCreateManyPredefinedEventInputEnvelope
    connect?: Enumerable<PredefinedEventOnCoursesWhereUniqueInput>
  }

  export type EventUncheckedCreateNestedManyWithoutPredefinedEventInput = {
    create?: XOR<Enumerable<EventCreateWithoutPredefinedEventInput>, Enumerable<EventUncheckedCreateWithoutPredefinedEventInput>>
    connectOrCreate?: Enumerable<EventCreateOrConnectWithoutPredefinedEventInput>
    createMany?: EventCreateManyPredefinedEventInputEnvelope
    connect?: Enumerable<EventWhereUniqueInput>
  }

  export type PredefinedEventOnCoursesUncheckedCreateNestedManyWithoutPredefinedEventInput = {
    create?: XOR<Enumerable<PredefinedEventOnCoursesCreateWithoutPredefinedEventInput>, Enumerable<PredefinedEventOnCoursesUncheckedCreateWithoutPredefinedEventInput>>
    connectOrCreate?: Enumerable<PredefinedEventOnCoursesCreateOrConnectWithoutPredefinedEventInput>
    createMany?: PredefinedEventOnCoursesCreateManyPredefinedEventInputEnvelope
    connect?: Enumerable<PredefinedEventOnCoursesWhereUniqueInput>
  }

  export type EventUpdateManyWithoutPredefinedEventNestedInput = {
    create?: XOR<Enumerable<EventCreateWithoutPredefinedEventInput>, Enumerable<EventUncheckedCreateWithoutPredefinedEventInput>>
    connectOrCreate?: Enumerable<EventCreateOrConnectWithoutPredefinedEventInput>
    upsert?: Enumerable<EventUpsertWithWhereUniqueWithoutPredefinedEventInput>
    createMany?: EventCreateManyPredefinedEventInputEnvelope
    set?: Enumerable<EventWhereUniqueInput>
    disconnect?: Enumerable<EventWhereUniqueInput>
    delete?: Enumerable<EventWhereUniqueInput>
    connect?: Enumerable<EventWhereUniqueInput>
    update?: Enumerable<EventUpdateWithWhereUniqueWithoutPredefinedEventInput>
    updateMany?: Enumerable<EventUpdateManyWithWhereWithoutPredefinedEventInput>
    deleteMany?: Enumerable<EventScalarWhereInput>
  }

  export type PredefinedEventOnCoursesUpdateManyWithoutPredefinedEventNestedInput = {
    create?: XOR<Enumerable<PredefinedEventOnCoursesCreateWithoutPredefinedEventInput>, Enumerable<PredefinedEventOnCoursesUncheckedCreateWithoutPredefinedEventInput>>
    connectOrCreate?: Enumerable<PredefinedEventOnCoursesCreateOrConnectWithoutPredefinedEventInput>
    upsert?: Enumerable<PredefinedEventOnCoursesUpsertWithWhereUniqueWithoutPredefinedEventInput>
    createMany?: PredefinedEventOnCoursesCreateManyPredefinedEventInputEnvelope
    set?: Enumerable<PredefinedEventOnCoursesWhereUniqueInput>
    disconnect?: Enumerable<PredefinedEventOnCoursesWhereUniqueInput>
    delete?: Enumerable<PredefinedEventOnCoursesWhereUniqueInput>
    connect?: Enumerable<PredefinedEventOnCoursesWhereUniqueInput>
    update?: Enumerable<PredefinedEventOnCoursesUpdateWithWhereUniqueWithoutPredefinedEventInput>
    updateMany?: Enumerable<PredefinedEventOnCoursesUpdateManyWithWhereWithoutPredefinedEventInput>
    deleteMany?: Enumerable<PredefinedEventOnCoursesScalarWhereInput>
  }

  export type EventUncheckedUpdateManyWithoutPredefinedEventNestedInput = {
    create?: XOR<Enumerable<EventCreateWithoutPredefinedEventInput>, Enumerable<EventUncheckedCreateWithoutPredefinedEventInput>>
    connectOrCreate?: Enumerable<EventCreateOrConnectWithoutPredefinedEventInput>
    upsert?: Enumerable<EventUpsertWithWhereUniqueWithoutPredefinedEventInput>
    createMany?: EventCreateManyPredefinedEventInputEnvelope
    set?: Enumerable<EventWhereUniqueInput>
    disconnect?: Enumerable<EventWhereUniqueInput>
    delete?: Enumerable<EventWhereUniqueInput>
    connect?: Enumerable<EventWhereUniqueInput>
    update?: Enumerable<EventUpdateWithWhereUniqueWithoutPredefinedEventInput>
    updateMany?: Enumerable<EventUpdateManyWithWhereWithoutPredefinedEventInput>
    deleteMany?: Enumerable<EventScalarWhereInput>
  }

  export type PredefinedEventOnCoursesUncheckedUpdateManyWithoutPredefinedEventNestedInput = {
    create?: XOR<Enumerable<PredefinedEventOnCoursesCreateWithoutPredefinedEventInput>, Enumerable<PredefinedEventOnCoursesUncheckedCreateWithoutPredefinedEventInput>>
    connectOrCreate?: Enumerable<PredefinedEventOnCoursesCreateOrConnectWithoutPredefinedEventInput>
    upsert?: Enumerable<PredefinedEventOnCoursesUpsertWithWhereUniqueWithoutPredefinedEventInput>
    createMany?: PredefinedEventOnCoursesCreateManyPredefinedEventInputEnvelope
    set?: Enumerable<PredefinedEventOnCoursesWhereUniqueInput>
    disconnect?: Enumerable<PredefinedEventOnCoursesWhereUniqueInput>
    delete?: Enumerable<PredefinedEventOnCoursesWhereUniqueInput>
    connect?: Enumerable<PredefinedEventOnCoursesWhereUniqueInput>
    update?: Enumerable<PredefinedEventOnCoursesUpdateWithWhereUniqueWithoutPredefinedEventInput>
    updateMany?: Enumerable<PredefinedEventOnCoursesUpdateManyWithWhereWithoutPredefinedEventInput>
    deleteMany?: Enumerable<PredefinedEventOnCoursesScalarWhereInput>
  }

  export type PredefinedEventCreateNestedOneWithoutCoursesInput = {
    create?: XOR<PredefinedEventCreateWithoutCoursesInput, PredefinedEventUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: PredefinedEventCreateOrConnectWithoutCoursesInput
    connect?: PredefinedEventWhereUniqueInput
  }

  export type CourseCreateNestedOneWithoutPredefinedEventsInput = {
    create?: XOR<CourseCreateWithoutPredefinedEventsInput, CourseUncheckedCreateWithoutPredefinedEventsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutPredefinedEventsInput
    connect?: CourseWhereUniqueInput
  }

  export type PredefinedEventUpdateOneRequiredWithoutCoursesNestedInput = {
    create?: XOR<PredefinedEventCreateWithoutCoursesInput, PredefinedEventUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: PredefinedEventCreateOrConnectWithoutCoursesInput
    upsert?: PredefinedEventUpsertWithoutCoursesInput
    connect?: PredefinedEventWhereUniqueInput
    update?: XOR<PredefinedEventUpdateWithoutCoursesInput, PredefinedEventUncheckedUpdateWithoutCoursesInput>
  }

  export type CourseUpdateOneRequiredWithoutPredefinedEventsNestedInput = {
    create?: XOR<CourseCreateWithoutPredefinedEventsInput, CourseUncheckedCreateWithoutPredefinedEventsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutPredefinedEventsInput
    upsert?: CourseUpsertWithoutPredefinedEventsInput
    connect?: CourseWhereUniqueInput
    update?: XOR<CourseUpdateWithoutPredefinedEventsInput, CourseUncheckedUpdateWithoutPredefinedEventsInput>
  }

  export type PredefinedEventCreateNestedOneWithoutEventsInput = {
    create?: XOR<PredefinedEventCreateWithoutEventsInput, PredefinedEventUncheckedCreateWithoutEventsInput>
    connectOrCreate?: PredefinedEventCreateOrConnectWithoutEventsInput
    connect?: PredefinedEventWhereUniqueInput
  }

  export type UsersOnEventsCreateNestedManyWithoutEventInput = {
    create?: XOR<Enumerable<UsersOnEventsCreateWithoutEventInput>, Enumerable<UsersOnEventsUncheckedCreateWithoutEventInput>>
    connectOrCreate?: Enumerable<UsersOnEventsCreateOrConnectWithoutEventInput>
    createMany?: UsersOnEventsCreateManyEventInputEnvelope
    connect?: Enumerable<UsersOnEventsWhereUniqueInput>
  }

  export type UsersOnEventsCreateNestedManyWithoutWaitlistEventInput = {
    create?: XOR<Enumerable<UsersOnEventsCreateWithoutWaitlistEventInput>, Enumerable<UsersOnEventsUncheckedCreateWithoutWaitlistEventInput>>
    connectOrCreate?: Enumerable<UsersOnEventsCreateOrConnectWithoutWaitlistEventInput>
    createMany?: UsersOnEventsCreateManyWaitlistEventInputEnvelope
    connect?: Enumerable<UsersOnEventsWhereUniqueInput>
  }

  export type UsersOnEventsCreateNestedManyWithoutVisitedEventInput = {
    create?: XOR<Enumerable<UsersOnEventsCreateWithoutVisitedEventInput>, Enumerable<UsersOnEventsUncheckedCreateWithoutVisitedEventInput>>
    connectOrCreate?: Enumerable<UsersOnEventsCreateOrConnectWithoutVisitedEventInput>
    createMany?: UsersOnEventsCreateManyVisitedEventInputEnvelope
    connect?: Enumerable<UsersOnEventsWhereUniqueInput>
  }

  export type UsersOnEventsUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<Enumerable<UsersOnEventsCreateWithoutEventInput>, Enumerable<UsersOnEventsUncheckedCreateWithoutEventInput>>
    connectOrCreate?: Enumerable<UsersOnEventsCreateOrConnectWithoutEventInput>
    createMany?: UsersOnEventsCreateManyEventInputEnvelope
    connect?: Enumerable<UsersOnEventsWhereUniqueInput>
  }

  export type UsersOnEventsUncheckedCreateNestedManyWithoutWaitlistEventInput = {
    create?: XOR<Enumerable<UsersOnEventsCreateWithoutWaitlistEventInput>, Enumerable<UsersOnEventsUncheckedCreateWithoutWaitlistEventInput>>
    connectOrCreate?: Enumerable<UsersOnEventsCreateOrConnectWithoutWaitlistEventInput>
    createMany?: UsersOnEventsCreateManyWaitlistEventInputEnvelope
    connect?: Enumerable<UsersOnEventsWhereUniqueInput>
  }

  export type UsersOnEventsUncheckedCreateNestedManyWithoutVisitedEventInput = {
    create?: XOR<Enumerable<UsersOnEventsCreateWithoutVisitedEventInput>, Enumerable<UsersOnEventsUncheckedCreateWithoutVisitedEventInput>>
    connectOrCreate?: Enumerable<UsersOnEventsCreateOrConnectWithoutVisitedEventInput>
    createMany?: UsersOnEventsCreateManyVisitedEventInputEnvelope
    connect?: Enumerable<UsersOnEventsWhereUniqueInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PredefinedEventUpdateOneWithoutEventsNestedInput = {
    create?: XOR<PredefinedEventCreateWithoutEventsInput, PredefinedEventUncheckedCreateWithoutEventsInput>
    connectOrCreate?: PredefinedEventCreateOrConnectWithoutEventsInput
    upsert?: PredefinedEventUpsertWithoutEventsInput
    disconnect?: boolean
    delete?: boolean
    connect?: PredefinedEventWhereUniqueInput
    update?: XOR<PredefinedEventUpdateWithoutEventsInput, PredefinedEventUncheckedUpdateWithoutEventsInput>
  }

  export type UsersOnEventsUpdateManyWithoutEventNestedInput = {
    create?: XOR<Enumerable<UsersOnEventsCreateWithoutEventInput>, Enumerable<UsersOnEventsUncheckedCreateWithoutEventInput>>
    connectOrCreate?: Enumerable<UsersOnEventsCreateOrConnectWithoutEventInput>
    upsert?: Enumerable<UsersOnEventsUpsertWithWhereUniqueWithoutEventInput>
    createMany?: UsersOnEventsCreateManyEventInputEnvelope
    set?: Enumerable<UsersOnEventsWhereUniqueInput>
    disconnect?: Enumerable<UsersOnEventsWhereUniqueInput>
    delete?: Enumerable<UsersOnEventsWhereUniqueInput>
    connect?: Enumerable<UsersOnEventsWhereUniqueInput>
    update?: Enumerable<UsersOnEventsUpdateWithWhereUniqueWithoutEventInput>
    updateMany?: Enumerable<UsersOnEventsUpdateManyWithWhereWithoutEventInput>
    deleteMany?: Enumerable<UsersOnEventsScalarWhereInput>
  }

  export type UsersOnEventsUpdateManyWithoutWaitlistEventNestedInput = {
    create?: XOR<Enumerable<UsersOnEventsCreateWithoutWaitlistEventInput>, Enumerable<UsersOnEventsUncheckedCreateWithoutWaitlistEventInput>>
    connectOrCreate?: Enumerable<UsersOnEventsCreateOrConnectWithoutWaitlistEventInput>
    upsert?: Enumerable<UsersOnEventsUpsertWithWhereUniqueWithoutWaitlistEventInput>
    createMany?: UsersOnEventsCreateManyWaitlistEventInputEnvelope
    set?: Enumerable<UsersOnEventsWhereUniqueInput>
    disconnect?: Enumerable<UsersOnEventsWhereUniqueInput>
    delete?: Enumerable<UsersOnEventsWhereUniqueInput>
    connect?: Enumerable<UsersOnEventsWhereUniqueInput>
    update?: Enumerable<UsersOnEventsUpdateWithWhereUniqueWithoutWaitlistEventInput>
    updateMany?: Enumerable<UsersOnEventsUpdateManyWithWhereWithoutWaitlistEventInput>
    deleteMany?: Enumerable<UsersOnEventsScalarWhereInput>
  }

  export type UsersOnEventsUpdateManyWithoutVisitedEventNestedInput = {
    create?: XOR<Enumerable<UsersOnEventsCreateWithoutVisitedEventInput>, Enumerable<UsersOnEventsUncheckedCreateWithoutVisitedEventInput>>
    connectOrCreate?: Enumerable<UsersOnEventsCreateOrConnectWithoutVisitedEventInput>
    upsert?: Enumerable<UsersOnEventsUpsertWithWhereUniqueWithoutVisitedEventInput>
    createMany?: UsersOnEventsCreateManyVisitedEventInputEnvelope
    set?: Enumerable<UsersOnEventsWhereUniqueInput>
    disconnect?: Enumerable<UsersOnEventsWhereUniqueInput>
    delete?: Enumerable<UsersOnEventsWhereUniqueInput>
    connect?: Enumerable<UsersOnEventsWhereUniqueInput>
    update?: Enumerable<UsersOnEventsUpdateWithWhereUniqueWithoutVisitedEventInput>
    updateMany?: Enumerable<UsersOnEventsUpdateManyWithWhereWithoutVisitedEventInput>
    deleteMany?: Enumerable<UsersOnEventsScalarWhereInput>
  }

  export type UsersOnEventsUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<Enumerable<UsersOnEventsCreateWithoutEventInput>, Enumerable<UsersOnEventsUncheckedCreateWithoutEventInput>>
    connectOrCreate?: Enumerable<UsersOnEventsCreateOrConnectWithoutEventInput>
    upsert?: Enumerable<UsersOnEventsUpsertWithWhereUniqueWithoutEventInput>
    createMany?: UsersOnEventsCreateManyEventInputEnvelope
    set?: Enumerable<UsersOnEventsWhereUniqueInput>
    disconnect?: Enumerable<UsersOnEventsWhereUniqueInput>
    delete?: Enumerable<UsersOnEventsWhereUniqueInput>
    connect?: Enumerable<UsersOnEventsWhereUniqueInput>
    update?: Enumerable<UsersOnEventsUpdateWithWhereUniqueWithoutEventInput>
    updateMany?: Enumerable<UsersOnEventsUpdateManyWithWhereWithoutEventInput>
    deleteMany?: Enumerable<UsersOnEventsScalarWhereInput>
  }

  export type UsersOnEventsUncheckedUpdateManyWithoutWaitlistEventNestedInput = {
    create?: XOR<Enumerable<UsersOnEventsCreateWithoutWaitlistEventInput>, Enumerable<UsersOnEventsUncheckedCreateWithoutWaitlistEventInput>>
    connectOrCreate?: Enumerable<UsersOnEventsCreateOrConnectWithoutWaitlistEventInput>
    upsert?: Enumerable<UsersOnEventsUpsertWithWhereUniqueWithoutWaitlistEventInput>
    createMany?: UsersOnEventsCreateManyWaitlistEventInputEnvelope
    set?: Enumerable<UsersOnEventsWhereUniqueInput>
    disconnect?: Enumerable<UsersOnEventsWhereUniqueInput>
    delete?: Enumerable<UsersOnEventsWhereUniqueInput>
    connect?: Enumerable<UsersOnEventsWhereUniqueInput>
    update?: Enumerable<UsersOnEventsUpdateWithWhereUniqueWithoutWaitlistEventInput>
    updateMany?: Enumerable<UsersOnEventsUpdateManyWithWhereWithoutWaitlistEventInput>
    deleteMany?: Enumerable<UsersOnEventsScalarWhereInput>
  }

  export type UsersOnEventsUncheckedUpdateManyWithoutVisitedEventNestedInput = {
    create?: XOR<Enumerable<UsersOnEventsCreateWithoutVisitedEventInput>, Enumerable<UsersOnEventsUncheckedCreateWithoutVisitedEventInput>>
    connectOrCreate?: Enumerable<UsersOnEventsCreateOrConnectWithoutVisitedEventInput>
    upsert?: Enumerable<UsersOnEventsUpsertWithWhereUniqueWithoutVisitedEventInput>
    createMany?: UsersOnEventsCreateManyVisitedEventInputEnvelope
    set?: Enumerable<UsersOnEventsWhereUniqueInput>
    disconnect?: Enumerable<UsersOnEventsWhereUniqueInput>
    delete?: Enumerable<UsersOnEventsWhereUniqueInput>
    connect?: Enumerable<UsersOnEventsWhereUniqueInput>
    update?: Enumerable<UsersOnEventsUpdateWithWhereUniqueWithoutVisitedEventInput>
    updateMany?: Enumerable<UsersOnEventsUpdateManyWithWhereWithoutVisitedEventInput>
    deleteMany?: Enumerable<UsersOnEventsScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutEventsInput = {
    create?: XOR<UserCreateWithoutEventsInput, UserUncheckedCreateWithoutEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEventsInput
    connect?: UserWhereUniqueInput
  }

  export type EventCreateNestedOneWithoutUsersInput = {
    create?: XOR<EventCreateWithoutUsersInput, EventUncheckedCreateWithoutUsersInput>
    connectOrCreate?: EventCreateOrConnectWithoutUsersInput
    connect?: EventWhereUniqueInput
  }

  export type EventCreateNestedOneWithoutWaitlistInput = {
    create?: XOR<EventCreateWithoutWaitlistInput, EventUncheckedCreateWithoutWaitlistInput>
    connectOrCreate?: EventCreateOrConnectWithoutWaitlistInput
    connect?: EventWhereUniqueInput
  }

  export type EventCreateNestedOneWithoutVisitedUsersInput = {
    create?: XOR<EventCreateWithoutVisitedUsersInput, EventUncheckedCreateWithoutVisitedUsersInput>
    connectOrCreate?: EventCreateOrConnectWithoutVisitedUsersInput
    connect?: EventWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutEventsNestedInput = {
    create?: XOR<UserCreateWithoutEventsInput, UserUncheckedCreateWithoutEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEventsInput
    upsert?: UserUpsertWithoutEventsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutEventsInput, UserUncheckedUpdateWithoutEventsInput>
  }

  export type EventUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<EventCreateWithoutUsersInput, EventUncheckedCreateWithoutUsersInput>
    connectOrCreate?: EventCreateOrConnectWithoutUsersInput
    upsert?: EventUpsertWithoutUsersInput
    connect?: EventWhereUniqueInput
    update?: XOR<EventUpdateWithoutUsersInput, EventUncheckedUpdateWithoutUsersInput>
  }

  export type EventUpdateOneWithoutWaitlistNestedInput = {
    create?: XOR<EventCreateWithoutWaitlistInput, EventUncheckedCreateWithoutWaitlistInput>
    connectOrCreate?: EventCreateOrConnectWithoutWaitlistInput
    upsert?: EventUpsertWithoutWaitlistInput
    disconnect?: boolean
    delete?: boolean
    connect?: EventWhereUniqueInput
    update?: XOR<EventUpdateWithoutWaitlistInput, EventUncheckedUpdateWithoutWaitlistInput>
  }

  export type EventUpdateOneWithoutVisitedUsersNestedInput = {
    create?: XOR<EventCreateWithoutVisitedUsersInput, EventUncheckedCreateWithoutVisitedUsersInput>
    connectOrCreate?: EventCreateOrConnectWithoutVisitedUsersInput
    upsert?: EventUpsertWithoutVisitedUsersInput
    disconnect?: boolean
    delete?: boolean
    connect?: EventWhereUniqueInput
    update?: XOR<EventUpdateWithoutVisitedUsersInput, EventUncheckedUpdateWithoutVisitedUsersInput>
  }

  export type ChatsOnUsersCreateNestedManyWithoutChatInput = {
    create?: XOR<Enumerable<ChatsOnUsersCreateWithoutChatInput>, Enumerable<ChatsOnUsersUncheckedCreateWithoutChatInput>>
    connectOrCreate?: Enumerable<ChatsOnUsersCreateOrConnectWithoutChatInput>
    createMany?: ChatsOnUsersCreateManyChatInputEnvelope
    connect?: Enumerable<ChatsOnUsersWhereUniqueInput>
  }

  export type MessageCreateNestedManyWithoutChatInput = {
    create?: XOR<Enumerable<MessageCreateWithoutChatInput>, Enumerable<MessageUncheckedCreateWithoutChatInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutChatInput>
    createMany?: MessageCreateManyChatInputEnvelope
    connect?: Enumerable<MessageWhereUniqueInput>
  }

  export type ChatsOnUsersUncheckedCreateNestedManyWithoutChatInput = {
    create?: XOR<Enumerable<ChatsOnUsersCreateWithoutChatInput>, Enumerable<ChatsOnUsersUncheckedCreateWithoutChatInput>>
    connectOrCreate?: Enumerable<ChatsOnUsersCreateOrConnectWithoutChatInput>
    createMany?: ChatsOnUsersCreateManyChatInputEnvelope
    connect?: Enumerable<ChatsOnUsersWhereUniqueInput>
  }

  export type MessageUncheckedCreateNestedManyWithoutChatInput = {
    create?: XOR<Enumerable<MessageCreateWithoutChatInput>, Enumerable<MessageUncheckedCreateWithoutChatInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutChatInput>
    createMany?: MessageCreateManyChatInputEnvelope
    connect?: Enumerable<MessageWhereUniqueInput>
  }

  export type ChatsOnUsersUpdateManyWithoutChatNestedInput = {
    create?: XOR<Enumerable<ChatsOnUsersCreateWithoutChatInput>, Enumerable<ChatsOnUsersUncheckedCreateWithoutChatInput>>
    connectOrCreate?: Enumerable<ChatsOnUsersCreateOrConnectWithoutChatInput>
    upsert?: Enumerable<ChatsOnUsersUpsertWithWhereUniqueWithoutChatInput>
    createMany?: ChatsOnUsersCreateManyChatInputEnvelope
    set?: Enumerable<ChatsOnUsersWhereUniqueInput>
    disconnect?: Enumerable<ChatsOnUsersWhereUniqueInput>
    delete?: Enumerable<ChatsOnUsersWhereUniqueInput>
    connect?: Enumerable<ChatsOnUsersWhereUniqueInput>
    update?: Enumerable<ChatsOnUsersUpdateWithWhereUniqueWithoutChatInput>
    updateMany?: Enumerable<ChatsOnUsersUpdateManyWithWhereWithoutChatInput>
    deleteMany?: Enumerable<ChatsOnUsersScalarWhereInput>
  }

  export type MessageUpdateManyWithoutChatNestedInput = {
    create?: XOR<Enumerable<MessageCreateWithoutChatInput>, Enumerable<MessageUncheckedCreateWithoutChatInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutChatInput>
    upsert?: Enumerable<MessageUpsertWithWhereUniqueWithoutChatInput>
    createMany?: MessageCreateManyChatInputEnvelope
    set?: Enumerable<MessageWhereUniqueInput>
    disconnect?: Enumerable<MessageWhereUniqueInput>
    delete?: Enumerable<MessageWhereUniqueInput>
    connect?: Enumerable<MessageWhereUniqueInput>
    update?: Enumerable<MessageUpdateWithWhereUniqueWithoutChatInput>
    updateMany?: Enumerable<MessageUpdateManyWithWhereWithoutChatInput>
    deleteMany?: Enumerable<MessageScalarWhereInput>
  }

  export type ChatsOnUsersUncheckedUpdateManyWithoutChatNestedInput = {
    create?: XOR<Enumerable<ChatsOnUsersCreateWithoutChatInput>, Enumerable<ChatsOnUsersUncheckedCreateWithoutChatInput>>
    connectOrCreate?: Enumerable<ChatsOnUsersCreateOrConnectWithoutChatInput>
    upsert?: Enumerable<ChatsOnUsersUpsertWithWhereUniqueWithoutChatInput>
    createMany?: ChatsOnUsersCreateManyChatInputEnvelope
    set?: Enumerable<ChatsOnUsersWhereUniqueInput>
    disconnect?: Enumerable<ChatsOnUsersWhereUniqueInput>
    delete?: Enumerable<ChatsOnUsersWhereUniqueInput>
    connect?: Enumerable<ChatsOnUsersWhereUniqueInput>
    update?: Enumerable<ChatsOnUsersUpdateWithWhereUniqueWithoutChatInput>
    updateMany?: Enumerable<ChatsOnUsersUpdateManyWithWhereWithoutChatInput>
    deleteMany?: Enumerable<ChatsOnUsersScalarWhereInput>
  }

  export type MessageUncheckedUpdateManyWithoutChatNestedInput = {
    create?: XOR<Enumerable<MessageCreateWithoutChatInput>, Enumerable<MessageUncheckedCreateWithoutChatInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutChatInput>
    upsert?: Enumerable<MessageUpsertWithWhereUniqueWithoutChatInput>
    createMany?: MessageCreateManyChatInputEnvelope
    set?: Enumerable<MessageWhereUniqueInput>
    disconnect?: Enumerable<MessageWhereUniqueInput>
    delete?: Enumerable<MessageWhereUniqueInput>
    connect?: Enumerable<MessageWhereUniqueInput>
    update?: Enumerable<MessageUpdateWithWhereUniqueWithoutChatInput>
    updateMany?: Enumerable<MessageUpdateManyWithWhereWithoutChatInput>
    deleteMany?: Enumerable<MessageScalarWhereInput>
  }

  export type ChatCreateNestedOneWithoutUsersInput = {
    create?: XOR<ChatCreateWithoutUsersInput, ChatUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ChatCreateOrConnectWithoutUsersInput
    connect?: ChatWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutChatsInput = {
    create?: XOR<UserCreateWithoutChatsInput, UserUncheckedCreateWithoutChatsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatsInput
    connect?: UserWhereUniqueInput
  }

  export type ChatUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<ChatCreateWithoutUsersInput, ChatUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ChatCreateOrConnectWithoutUsersInput
    upsert?: ChatUpsertWithoutUsersInput
    connect?: ChatWhereUniqueInput
    update?: XOR<ChatUpdateWithoutUsersInput, ChatUncheckedUpdateWithoutUsersInput>
  }

  export type UserUpdateOneRequiredWithoutChatsNestedInput = {
    create?: XOR<UserCreateWithoutChatsInput, UserUncheckedCreateWithoutChatsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatsInput
    upsert?: UserUpsertWithoutChatsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutChatsInput, UserUncheckedUpdateWithoutChatsInput>
  }

  export type UserCreateNestedOneWithoutMessagesInput = {
    create?: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type ChatCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ChatCreateWithoutMessagesInput, ChatUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatCreateOrConnectWithoutMessagesInput
    connect?: ChatWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesInput
    upsert?: UserUpsertWithoutMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutMessagesInput, UserUncheckedUpdateWithoutMessagesInput>
  }

  export type ChatUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<ChatCreateWithoutMessagesInput, ChatUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatCreateOrConnectWithoutMessagesInput
    upsert?: ChatUpsertWithoutMessagesInput
    connect?: ChatWhereUniqueInput
    update?: XOR<ChatUpdateWithoutMessagesInput, ChatUncheckedUpdateWithoutMessagesInput>
  }

  export type QuizCreateNestedOneWithoutCoursesInput = {
    create?: XOR<QuizCreateWithoutCoursesInput, QuizUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: QuizCreateOrConnectWithoutCoursesInput
    connect?: QuizWhereUniqueInput
  }

  export type CourseCreateNestedOneWithoutQuizzesInput = {
    create?: XOR<CourseCreateWithoutQuizzesInput, CourseUncheckedCreateWithoutQuizzesInput>
    connectOrCreate?: CourseCreateOrConnectWithoutQuizzesInput
    connect?: CourseWhereUniqueInput
  }

  export type QuizUpdateOneRequiredWithoutCoursesNestedInput = {
    create?: XOR<QuizCreateWithoutCoursesInput, QuizUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: QuizCreateOrConnectWithoutCoursesInput
    upsert?: QuizUpsertWithoutCoursesInput
    connect?: QuizWhereUniqueInput
    update?: XOR<QuizUpdateWithoutCoursesInput, QuizUncheckedUpdateWithoutCoursesInput>
  }

  export type CourseUpdateOneRequiredWithoutQuizzesNestedInput = {
    create?: XOR<CourseCreateWithoutQuizzesInput, CourseUncheckedCreateWithoutQuizzesInput>
    connectOrCreate?: CourseCreateOrConnectWithoutQuizzesInput
    upsert?: CourseUpsertWithoutQuizzesInput
    connect?: CourseWhereUniqueInput
    update?: XOR<CourseUpdateWithoutQuizzesInput, CourseUncheckedUpdateWithoutQuizzesInput>
  }

  export type QuizzesOnCourseCreateNestedManyWithoutQuizInput = {
    create?: XOR<Enumerable<QuizzesOnCourseCreateWithoutQuizInput>, Enumerable<QuizzesOnCourseUncheckedCreateWithoutQuizInput>>
    connectOrCreate?: Enumerable<QuizzesOnCourseCreateOrConnectWithoutQuizInput>
    createMany?: QuizzesOnCourseCreateManyQuizInputEnvelope
    connect?: Enumerable<QuizzesOnCourseWhereUniqueInput>
  }

  export type QuestionCreateNestedManyWithoutQuizInput = {
    create?: XOR<Enumerable<QuestionCreateWithoutQuizInput>, Enumerable<QuestionUncheckedCreateWithoutQuizInput>>
    connectOrCreate?: Enumerable<QuestionCreateOrConnectWithoutQuizInput>
    createMany?: QuestionCreateManyQuizInputEnvelope
    connect?: Enumerable<QuestionWhereUniqueInput>
  }

  export type QuizzesOnCourseUncheckedCreateNestedManyWithoutQuizInput = {
    create?: XOR<Enumerable<QuizzesOnCourseCreateWithoutQuizInput>, Enumerable<QuizzesOnCourseUncheckedCreateWithoutQuizInput>>
    connectOrCreate?: Enumerable<QuizzesOnCourseCreateOrConnectWithoutQuizInput>
    createMany?: QuizzesOnCourseCreateManyQuizInputEnvelope
    connect?: Enumerable<QuizzesOnCourseWhereUniqueInput>
  }

  export type QuestionUncheckedCreateNestedManyWithoutQuizInput = {
    create?: XOR<Enumerable<QuestionCreateWithoutQuizInput>, Enumerable<QuestionUncheckedCreateWithoutQuizInput>>
    connectOrCreate?: Enumerable<QuestionCreateOrConnectWithoutQuizInput>
    createMany?: QuestionCreateManyQuizInputEnvelope
    connect?: Enumerable<QuestionWhereUniqueInput>
  }

  export type QuizzesOnCourseUpdateManyWithoutQuizNestedInput = {
    create?: XOR<Enumerable<QuizzesOnCourseCreateWithoutQuizInput>, Enumerable<QuizzesOnCourseUncheckedCreateWithoutQuizInput>>
    connectOrCreate?: Enumerable<QuizzesOnCourseCreateOrConnectWithoutQuizInput>
    upsert?: Enumerable<QuizzesOnCourseUpsertWithWhereUniqueWithoutQuizInput>
    createMany?: QuizzesOnCourseCreateManyQuizInputEnvelope
    set?: Enumerable<QuizzesOnCourseWhereUniqueInput>
    disconnect?: Enumerable<QuizzesOnCourseWhereUniqueInput>
    delete?: Enumerable<QuizzesOnCourseWhereUniqueInput>
    connect?: Enumerable<QuizzesOnCourseWhereUniqueInput>
    update?: Enumerable<QuizzesOnCourseUpdateWithWhereUniqueWithoutQuizInput>
    updateMany?: Enumerable<QuizzesOnCourseUpdateManyWithWhereWithoutQuizInput>
    deleteMany?: Enumerable<QuizzesOnCourseScalarWhereInput>
  }

  export type QuestionUpdateManyWithoutQuizNestedInput = {
    create?: XOR<Enumerable<QuestionCreateWithoutQuizInput>, Enumerable<QuestionUncheckedCreateWithoutQuizInput>>
    connectOrCreate?: Enumerable<QuestionCreateOrConnectWithoutQuizInput>
    upsert?: Enumerable<QuestionUpsertWithWhereUniqueWithoutQuizInput>
    createMany?: QuestionCreateManyQuizInputEnvelope
    set?: Enumerable<QuestionWhereUniqueInput>
    disconnect?: Enumerable<QuestionWhereUniqueInput>
    delete?: Enumerable<QuestionWhereUniqueInput>
    connect?: Enumerable<QuestionWhereUniqueInput>
    update?: Enumerable<QuestionUpdateWithWhereUniqueWithoutQuizInput>
    updateMany?: Enumerable<QuestionUpdateManyWithWhereWithoutQuizInput>
    deleteMany?: Enumerable<QuestionScalarWhereInput>
  }

  export type QuizzesOnCourseUncheckedUpdateManyWithoutQuizNestedInput = {
    create?: XOR<Enumerable<QuizzesOnCourseCreateWithoutQuizInput>, Enumerable<QuizzesOnCourseUncheckedCreateWithoutQuizInput>>
    connectOrCreate?: Enumerable<QuizzesOnCourseCreateOrConnectWithoutQuizInput>
    upsert?: Enumerable<QuizzesOnCourseUpsertWithWhereUniqueWithoutQuizInput>
    createMany?: QuizzesOnCourseCreateManyQuizInputEnvelope
    set?: Enumerable<QuizzesOnCourseWhereUniqueInput>
    disconnect?: Enumerable<QuizzesOnCourseWhereUniqueInput>
    delete?: Enumerable<QuizzesOnCourseWhereUniqueInput>
    connect?: Enumerable<QuizzesOnCourseWhereUniqueInput>
    update?: Enumerable<QuizzesOnCourseUpdateWithWhereUniqueWithoutQuizInput>
    updateMany?: Enumerable<QuizzesOnCourseUpdateManyWithWhereWithoutQuizInput>
    deleteMany?: Enumerable<QuizzesOnCourseScalarWhereInput>
  }

  export type QuestionUncheckedUpdateManyWithoutQuizNestedInput = {
    create?: XOR<Enumerable<QuestionCreateWithoutQuizInput>, Enumerable<QuestionUncheckedCreateWithoutQuizInput>>
    connectOrCreate?: Enumerable<QuestionCreateOrConnectWithoutQuizInput>
    upsert?: Enumerable<QuestionUpsertWithWhereUniqueWithoutQuizInput>
    createMany?: QuestionCreateManyQuizInputEnvelope
    set?: Enumerable<QuestionWhereUniqueInput>
    disconnect?: Enumerable<QuestionWhereUniqueInput>
    delete?: Enumerable<QuestionWhereUniqueInput>
    connect?: Enumerable<QuestionWhereUniqueInput>
    update?: Enumerable<QuestionUpdateWithWhereUniqueWithoutQuizInput>
    updateMany?: Enumerable<QuestionUpdateManyWithWhereWithoutQuizInput>
    deleteMany?: Enumerable<QuestionScalarWhereInput>
  }

  export type AnswerCreateNestedManyWithoutQuestionInput = {
    create?: XOR<Enumerable<AnswerCreateWithoutQuestionInput>, Enumerable<AnswerUncheckedCreateWithoutQuestionInput>>
    connectOrCreate?: Enumerable<AnswerCreateOrConnectWithoutQuestionInput>
    createMany?: AnswerCreateManyQuestionInputEnvelope
    connect?: Enumerable<AnswerWhereUniqueInput>
  }

  export type QuizCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<QuizCreateWithoutQuestionsInput, QuizUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: QuizCreateOrConnectWithoutQuestionsInput
    connect?: QuizWhereUniqueInput
  }

  export type AnswerUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<Enumerable<AnswerCreateWithoutQuestionInput>, Enumerable<AnswerUncheckedCreateWithoutQuestionInput>>
    connectOrCreate?: Enumerable<AnswerCreateOrConnectWithoutQuestionInput>
    createMany?: AnswerCreateManyQuestionInputEnvelope
    connect?: Enumerable<AnswerWhereUniqueInput>
  }

  export type AnswerUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<Enumerable<AnswerCreateWithoutQuestionInput>, Enumerable<AnswerUncheckedCreateWithoutQuestionInput>>
    connectOrCreate?: Enumerable<AnswerCreateOrConnectWithoutQuestionInput>
    upsert?: Enumerable<AnswerUpsertWithWhereUniqueWithoutQuestionInput>
    createMany?: AnswerCreateManyQuestionInputEnvelope
    set?: Enumerable<AnswerWhereUniqueInput>
    disconnect?: Enumerable<AnswerWhereUniqueInput>
    delete?: Enumerable<AnswerWhereUniqueInput>
    connect?: Enumerable<AnswerWhereUniqueInput>
    update?: Enumerable<AnswerUpdateWithWhereUniqueWithoutQuestionInput>
    updateMany?: Enumerable<AnswerUpdateManyWithWhereWithoutQuestionInput>
    deleteMany?: Enumerable<AnswerScalarWhereInput>
  }

  export type QuizUpdateOneRequiredWithoutQuestionsNestedInput = {
    create?: XOR<QuizCreateWithoutQuestionsInput, QuizUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: QuizCreateOrConnectWithoutQuestionsInput
    upsert?: QuizUpsertWithoutQuestionsInput
    connect?: QuizWhereUniqueInput
    update?: XOR<QuizUpdateWithoutQuestionsInput, QuizUncheckedUpdateWithoutQuestionsInput>
  }

  export type AnswerUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<Enumerable<AnswerCreateWithoutQuestionInput>, Enumerable<AnswerUncheckedCreateWithoutQuestionInput>>
    connectOrCreate?: Enumerable<AnswerCreateOrConnectWithoutQuestionInput>
    upsert?: Enumerable<AnswerUpsertWithWhereUniqueWithoutQuestionInput>
    createMany?: AnswerCreateManyQuestionInputEnvelope
    set?: Enumerable<AnswerWhereUniqueInput>
    disconnect?: Enumerable<AnswerWhereUniqueInput>
    delete?: Enumerable<AnswerWhereUniqueInput>
    connect?: Enumerable<AnswerWhereUniqueInput>
    update?: Enumerable<AnswerUpdateWithWhereUniqueWithoutQuestionInput>
    updateMany?: Enumerable<AnswerUpdateManyWithWhereWithoutQuestionInput>
    deleteMany?: Enumerable<AnswerScalarWhereInput>
  }

  export type QuestionCreateNestedOneWithoutAnswersInput = {
    create?: XOR<QuestionCreateWithoutAnswersInput, QuestionUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutAnswersInput
    connect?: QuestionWhereUniqueInput
  }

  export type QuestionUpdateOneRequiredWithoutAnswersNestedInput = {
    create?: XOR<QuestionCreateWithoutAnswersInput, QuestionUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutAnswersInput
    upsert?: QuestionUpsertWithoutAnswersInput
    connect?: QuestionWhereUniqueInput
    update?: XOR<QuestionUpdateWithoutAnswersInput, QuestionUncheckedUpdateWithoutAnswersInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedEnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedEnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedEnumPaymentMethodFilter = {
    equals?: PaymentMethod
    in?: Enumerable<PaymentMethod>
    notIn?: Enumerable<PaymentMethod>
    not?: NestedEnumPaymentMethodFilter | PaymentMethod
  }

  export type NestedEnumPaymentTypeFilter = {
    equals?: PaymentType
    in?: Enumerable<PaymentType>
    notIn?: Enumerable<PaymentType>
    not?: NestedEnumPaymentTypeFilter | PaymentType
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedEnumPaymentMethodWithAggregatesFilter = {
    equals?: PaymentMethod
    in?: Enumerable<PaymentMethod>
    notIn?: Enumerable<PaymentMethod>
    not?: NestedEnumPaymentMethodWithAggregatesFilter | PaymentMethod
    _count?: NestedIntFilter
    _min?: NestedEnumPaymentMethodFilter
    _max?: NestedEnumPaymentMethodFilter
  }

  export type NestedEnumPaymentTypeWithAggregatesFilter = {
    equals?: PaymentType
    in?: Enumerable<PaymentType>
    notIn?: Enumerable<PaymentType>
    not?: NestedEnumPaymentTypeWithAggregatesFilter | PaymentType
    _count?: NestedIntFilter
    _min?: NestedEnumPaymentTypeFilter
    _max?: NestedEnumPaymentTypeFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type PaymentCreateWithoutUserInput = {
    id?: string
    amount: number
    currency: string
    method: PaymentMethod
    type: PaymentType
    description?: string | null
    paidAt: Date | string
    stripePaymentIntentId?: string | null
    woocommerceOrderId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentUncheckedCreateWithoutUserInput = {
    id?: string
    amount: number
    currency: string
    method: PaymentMethod
    type: PaymentType
    description?: string | null
    paidAt: Date | string
    stripePaymentIntentId?: string | null
    woocommerceOrderId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentCreateOrConnectWithoutUserInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutUserInput, PaymentUncheckedCreateWithoutUserInput>
  }

  export type PaymentCreateManyUserInputEnvelope = {
    data: Enumerable<PaymentCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ChatsOnUsersCreateWithoutUserInput = {
    lastSeenAt?: Date | string
    chat: ChatCreateNestedOneWithoutUsersInput
  }

  export type ChatsOnUsersUncheckedCreateWithoutUserInput = {
    chatId: string
    lastSeenAt?: Date | string
  }

  export type ChatsOnUsersCreateOrConnectWithoutUserInput = {
    where: ChatsOnUsersWhereUniqueInput
    create: XOR<ChatsOnUsersCreateWithoutUserInput, ChatsOnUsersUncheckedCreateWithoutUserInput>
  }

  export type ChatsOnUsersCreateManyUserInputEnvelope = {
    data: Enumerable<ChatsOnUsersCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type UsersOnEventsCreateWithoutUserInput = {
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    event: EventCreateNestedOneWithoutUsersInput
    waitlistEvent?: EventCreateNestedOneWithoutWaitlistInput
    visitedEvent?: EventCreateNestedOneWithoutVisitedUsersInput
  }

  export type UsersOnEventsUncheckedCreateWithoutUserInput = {
    eventId: string
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    waitlistEventId?: string | null
    visitedEventId?: string | null
  }

  export type UsersOnEventsCreateOrConnectWithoutUserInput = {
    where: UsersOnEventsWhereUniqueInput
    create: XOR<UsersOnEventsCreateWithoutUserInput, UsersOnEventsUncheckedCreateWithoutUserInput>
  }

  export type UsersOnEventsCreateManyUserInputEnvelope = {
    data: Enumerable<UsersOnEventsCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutSenderInput = {
    id?: string
    content: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chat: ChatCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutSenderInput = {
    id?: string
    content: string
    deletedAt?: Date | string | null
    chatId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageCreateOrConnectWithoutSenderInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageCreateManySenderInputEnvelope = {
    data: Enumerable<MessageCreateManySenderInput>
    skipDuplicates?: boolean
  }

  export type CourseCreateWithoutStudentsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    folders?: FolderCreateNestedManyWithoutCourseInput
    files?: FileCreateNestedManyWithoutCourseInput
    videos?: VideosOnCoursesCreateNestedManyWithoutCourseInput
    quizzes?: QuizzesOnCourseCreateNestedManyWithoutCourseInput
    predefinedEvents?: PredefinedEventOnCoursesCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutStudentsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    folders?: FolderUncheckedCreateNestedManyWithoutCourseInput
    files?: FileUncheckedCreateNestedManyWithoutCourseInput
    videos?: VideosOnCoursesUncheckedCreateNestedManyWithoutCourseInput
    quizzes?: QuizzesOnCourseUncheckedCreateNestedManyWithoutCourseInput
    predefinedEvents?: PredefinedEventOnCoursesUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutStudentsInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutStudentsInput, CourseUncheckedCreateWithoutStudentsInput>
  }

  export type PasswordRecoveryTokenCreateWithoutUserInput = {
    id?: string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PasswordRecoveryTokenUncheckedCreateWithoutUserInput = {
    id?: string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PasswordRecoveryTokenCreateOrConnectWithoutUserInput = {
    where: PasswordRecoveryTokenWhereUniqueInput
    create: XOR<PasswordRecoveryTokenCreateWithoutUserInput, PasswordRecoveryTokenUncheckedCreateWithoutUserInput>
  }

  export type QuizAttemptCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuizAttemptUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuizAttemptCreateOrConnectWithoutUserInput = {
    where: QuizAttemptWhereUniqueInput
    create: XOR<QuizAttemptCreateWithoutUserInput, QuizAttemptUncheckedCreateWithoutUserInput>
  }

  export type QuizAttemptCreateManyUserInputEnvelope = {
    data: Enumerable<QuizAttemptCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type WebPushSubscriptionCreateWithoutUserInput = {
    id?: string
    endpoint: string
    p256dh: string
    auth: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatEnabled?: boolean
    calendarEnabled?: boolean
  }

  export type WebPushSubscriptionUncheckedCreateWithoutUserInput = {
    id?: string
    endpoint: string
    p256dh: string
    auth: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatEnabled?: boolean
    calendarEnabled?: boolean
  }

  export type WebPushSubscriptionCreateOrConnectWithoutUserInput = {
    where: WebPushSubscriptionWhereUniqueInput
    create: XOR<WebPushSubscriptionCreateWithoutUserInput, WebPushSubscriptionUncheckedCreateWithoutUserInput>
  }

  export type WebPushSubscriptionCreateManyUserInputEnvelope = {
    data: Enumerable<WebPushSubscriptionCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type PaymentUpsertWithWhereUniqueWithoutUserInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutUserInput, PaymentUncheckedUpdateWithoutUserInput>
    create: XOR<PaymentCreateWithoutUserInput, PaymentUncheckedCreateWithoutUserInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutUserInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutUserInput, PaymentUncheckedUpdateWithoutUserInput>
  }

  export type PaymentUpdateManyWithWhereWithoutUserInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutPaymentsInput>
  }

  export type PaymentScalarWhereInput = {
    AND?: Enumerable<PaymentScalarWhereInput>
    OR?: Enumerable<PaymentScalarWhereInput>
    NOT?: Enumerable<PaymentScalarWhereInput>
    id?: StringFilter | string
    amount?: FloatFilter | number
    currency?: StringFilter | string
    method?: EnumPaymentMethodFilter | PaymentMethod
    type?: EnumPaymentTypeFilter | PaymentType
    userId?: StringFilter | string
    description?: StringNullableFilter | string | null
    paidAt?: DateTimeFilter | Date | string
    stripePaymentIntentId?: StringNullableFilter | string | null
    woocommerceOrderId?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ChatsOnUsersUpsertWithWhereUniqueWithoutUserInput = {
    where: ChatsOnUsersWhereUniqueInput
    update: XOR<ChatsOnUsersUpdateWithoutUserInput, ChatsOnUsersUncheckedUpdateWithoutUserInput>
    create: XOR<ChatsOnUsersCreateWithoutUserInput, ChatsOnUsersUncheckedCreateWithoutUserInput>
  }

  export type ChatsOnUsersUpdateWithWhereUniqueWithoutUserInput = {
    where: ChatsOnUsersWhereUniqueInput
    data: XOR<ChatsOnUsersUpdateWithoutUserInput, ChatsOnUsersUncheckedUpdateWithoutUserInput>
  }

  export type ChatsOnUsersUpdateManyWithWhereWithoutUserInput = {
    where: ChatsOnUsersScalarWhereInput
    data: XOR<ChatsOnUsersUpdateManyMutationInput, ChatsOnUsersUncheckedUpdateManyWithoutChatsInput>
  }

  export type ChatsOnUsersScalarWhereInput = {
    AND?: Enumerable<ChatsOnUsersScalarWhereInput>
    OR?: Enumerable<ChatsOnUsersScalarWhereInput>
    NOT?: Enumerable<ChatsOnUsersScalarWhereInput>
    chatId?: StringFilter | string
    userId?: StringFilter | string
    lastSeenAt?: DateTimeFilter | Date | string
  }

  export type UsersOnEventsUpsertWithWhereUniqueWithoutUserInput = {
    where: UsersOnEventsWhereUniqueInput
    update: XOR<UsersOnEventsUpdateWithoutUserInput, UsersOnEventsUncheckedUpdateWithoutUserInput>
    create: XOR<UsersOnEventsCreateWithoutUserInput, UsersOnEventsUncheckedCreateWithoutUserInput>
  }

  export type UsersOnEventsUpdateWithWhereUniqueWithoutUserInput = {
    where: UsersOnEventsWhereUniqueInput
    data: XOR<UsersOnEventsUpdateWithoutUserInput, UsersOnEventsUncheckedUpdateWithoutUserInput>
  }

  export type UsersOnEventsUpdateManyWithWhereWithoutUserInput = {
    where: UsersOnEventsScalarWhereInput
    data: XOR<UsersOnEventsUpdateManyMutationInput, UsersOnEventsUncheckedUpdateManyWithoutEventsInput>
  }

  export type UsersOnEventsScalarWhereInput = {
    AND?: Enumerable<UsersOnEventsScalarWhereInput>
    OR?: Enumerable<UsersOnEventsScalarWhereInput>
    NOT?: Enumerable<UsersOnEventsScalarWhereInput>
    userId?: StringFilter | string
    eventId?: StringFilter | string
    isCompleted?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    waitlistEventId?: StringNullableFilter | string | null
    visitedEventId?: StringNullableFilter | string | null
  }

  export type MessageUpsertWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
  }

  export type MessageUpdateManyWithWhereWithoutSenderInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutMessagesInput>
  }

  export type MessageScalarWhereInput = {
    AND?: Enumerable<MessageScalarWhereInput>
    OR?: Enumerable<MessageScalarWhereInput>
    NOT?: Enumerable<MessageScalarWhereInput>
    id?: StringFilter | string
    content?: StringFilter | string
    deletedAt?: DateTimeNullableFilter | Date | string | null
    senderId?: StringFilter | string
    chatId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type CourseUpsertWithoutStudentsInput = {
    update: XOR<CourseUpdateWithoutStudentsInput, CourseUncheckedUpdateWithoutStudentsInput>
    create: XOR<CourseCreateWithoutStudentsInput, CourseUncheckedCreateWithoutStudentsInput>
  }

  export type CourseUpdateWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    folders?: FolderUpdateManyWithoutCourseNestedInput
    files?: FileUpdateManyWithoutCourseNestedInput
    videos?: VideosOnCoursesUpdateManyWithoutCourseNestedInput
    quizzes?: QuizzesOnCourseUpdateManyWithoutCourseNestedInput
    predefinedEvents?: PredefinedEventOnCoursesUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    folders?: FolderUncheckedUpdateManyWithoutCourseNestedInput
    files?: FileUncheckedUpdateManyWithoutCourseNestedInput
    videos?: VideosOnCoursesUncheckedUpdateManyWithoutCourseNestedInput
    quizzes?: QuizzesOnCourseUncheckedUpdateManyWithoutCourseNestedInput
    predefinedEvents?: PredefinedEventOnCoursesUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type PasswordRecoveryTokenUpsertWithoutUserInput = {
    update: XOR<PasswordRecoveryTokenUpdateWithoutUserInput, PasswordRecoveryTokenUncheckedUpdateWithoutUserInput>
    create: XOR<PasswordRecoveryTokenCreateWithoutUserInput, PasswordRecoveryTokenUncheckedCreateWithoutUserInput>
  }

  export type PasswordRecoveryTokenUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordRecoveryTokenUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuizAttemptUpsertWithWhereUniqueWithoutUserInput = {
    where: QuizAttemptWhereUniqueInput
    update: XOR<QuizAttemptUpdateWithoutUserInput, QuizAttemptUncheckedUpdateWithoutUserInput>
    create: XOR<QuizAttemptCreateWithoutUserInput, QuizAttemptUncheckedCreateWithoutUserInput>
  }

  export type QuizAttemptUpdateWithWhereUniqueWithoutUserInput = {
    where: QuizAttemptWhereUniqueInput
    data: XOR<QuizAttemptUpdateWithoutUserInput, QuizAttemptUncheckedUpdateWithoutUserInput>
  }

  export type QuizAttemptUpdateManyWithWhereWithoutUserInput = {
    where: QuizAttemptScalarWhereInput
    data: XOR<QuizAttemptUpdateManyMutationInput, QuizAttemptUncheckedUpdateManyWithoutQuizAttemptsInput>
  }

  export type QuizAttemptScalarWhereInput = {
    AND?: Enumerable<QuizAttemptScalarWhereInput>
    OR?: Enumerable<QuizAttemptScalarWhereInput>
    NOT?: Enumerable<QuizAttemptScalarWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type WebPushSubscriptionUpsertWithWhereUniqueWithoutUserInput = {
    where: WebPushSubscriptionWhereUniqueInput
    update: XOR<WebPushSubscriptionUpdateWithoutUserInput, WebPushSubscriptionUncheckedUpdateWithoutUserInput>
    create: XOR<WebPushSubscriptionCreateWithoutUserInput, WebPushSubscriptionUncheckedCreateWithoutUserInput>
  }

  export type WebPushSubscriptionUpdateWithWhereUniqueWithoutUserInput = {
    where: WebPushSubscriptionWhereUniqueInput
    data: XOR<WebPushSubscriptionUpdateWithoutUserInput, WebPushSubscriptionUncheckedUpdateWithoutUserInput>
  }

  export type WebPushSubscriptionUpdateManyWithWhereWithoutUserInput = {
    where: WebPushSubscriptionScalarWhereInput
    data: XOR<WebPushSubscriptionUpdateManyMutationInput, WebPushSubscriptionUncheckedUpdateManyWithoutWebPushSubscriptionInput>
  }

  export type WebPushSubscriptionScalarWhereInput = {
    AND?: Enumerable<WebPushSubscriptionScalarWhereInput>
    OR?: Enumerable<WebPushSubscriptionScalarWhereInput>
    NOT?: Enumerable<WebPushSubscriptionScalarWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    endpoint?: StringFilter | string
    p256dh?: StringFilter | string
    auth?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    chatEnabled?: BoolFilter | boolean
    calendarEnabled?: BoolFilter | boolean
  }

  export type UserCreateWithoutWebPushSubscriptionInput = {
    id?: string
    email: string
    password: string
    role?: Role
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    birthDate?: Date | string | null
    address?: string | null
    zipCode?: string | null
    city?: string | null
    idNumber?: string | null
    idIssueDate?: Date | string | null
    profilePicturePath?: string | null
    isInClub?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isCalendarEnable?: boolean
    calendarBlockingDeadline?: Date | string | null
    receiveEmailsOnNewEvent?: boolean
    payments?: PaymentCreateNestedManyWithoutUserInput
    chats?: ChatsOnUsersCreateNestedManyWithoutUserInput
    events?: UsersOnEventsCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutSenderInput
    course?: CourseCreateNestedOneWithoutStudentsInput
    passwordRecoveryToken?: PasswordRecoveryTokenCreateNestedOneWithoutUserInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWebPushSubscriptionInput = {
    id?: string
    email: string
    password: string
    role?: Role
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    birthDate?: Date | string | null
    address?: string | null
    zipCode?: string | null
    city?: string | null
    idNumber?: string | null
    idIssueDate?: Date | string | null
    profilePicturePath?: string | null
    isInClub?: boolean
    courseId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isCalendarEnable?: boolean
    calendarBlockingDeadline?: Date | string | null
    receiveEmailsOnNewEvent?: boolean
    payments?: PaymentUncheckedCreateNestedManyWithoutUserInput
    chats?: ChatsOnUsersUncheckedCreateNestedManyWithoutUserInput
    events?: UsersOnEventsUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    passwordRecoveryToken?: PasswordRecoveryTokenUncheckedCreateNestedOneWithoutUserInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWebPushSubscriptionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWebPushSubscriptionInput, UserUncheckedCreateWithoutWebPushSubscriptionInput>
  }

  export type UserUpsertWithoutWebPushSubscriptionInput = {
    update: XOR<UserUpdateWithoutWebPushSubscriptionInput, UserUncheckedUpdateWithoutWebPushSubscriptionInput>
    create: XOR<UserCreateWithoutWebPushSubscriptionInput, UserUncheckedCreateWithoutWebPushSubscriptionInput>
  }

  export type UserUpdateWithoutWebPushSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idIssueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profilePicturePath?: NullableStringFieldUpdateOperationsInput | string | null
    isInClub?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCalendarEnable?: BoolFieldUpdateOperationsInput | boolean
    calendarBlockingDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receiveEmailsOnNewEvent?: BoolFieldUpdateOperationsInput | boolean
    payments?: PaymentUpdateManyWithoutUserNestedInput
    chats?: ChatsOnUsersUpdateManyWithoutUserNestedInput
    events?: UsersOnEventsUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
    course?: CourseUpdateOneWithoutStudentsNestedInput
    passwordRecoveryToken?: PasswordRecoveryTokenUpdateOneWithoutUserNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWebPushSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idIssueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profilePicturePath?: NullableStringFieldUpdateOperationsInput | string | null
    isInClub?: BoolFieldUpdateOperationsInput | boolean
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCalendarEnable?: BoolFieldUpdateOperationsInput | boolean
    calendarBlockingDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receiveEmailsOnNewEvent?: BoolFieldUpdateOperationsInput | boolean
    payments?: PaymentUncheckedUpdateManyWithoutUserNestedInput
    chats?: ChatsOnUsersUncheckedUpdateManyWithoutUserNestedInput
    events?: UsersOnEventsUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    passwordRecoveryToken?: PasswordRecoveryTokenUncheckedUpdateOneWithoutUserNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutQuizAttemptsInput = {
    id?: string
    email: string
    password: string
    role?: Role
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    birthDate?: Date | string | null
    address?: string | null
    zipCode?: string | null
    city?: string | null
    idNumber?: string | null
    idIssueDate?: Date | string | null
    profilePicturePath?: string | null
    isInClub?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isCalendarEnable?: boolean
    calendarBlockingDeadline?: Date | string | null
    receiveEmailsOnNewEvent?: boolean
    payments?: PaymentCreateNestedManyWithoutUserInput
    chats?: ChatsOnUsersCreateNestedManyWithoutUserInput
    events?: UsersOnEventsCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutSenderInput
    course?: CourseCreateNestedOneWithoutStudentsInput
    passwordRecoveryToken?: PasswordRecoveryTokenCreateNestedOneWithoutUserInput
    WebPushSubscription?: WebPushSubscriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutQuizAttemptsInput = {
    id?: string
    email: string
    password: string
    role?: Role
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    birthDate?: Date | string | null
    address?: string | null
    zipCode?: string | null
    city?: string | null
    idNumber?: string | null
    idIssueDate?: Date | string | null
    profilePicturePath?: string | null
    isInClub?: boolean
    courseId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isCalendarEnable?: boolean
    calendarBlockingDeadline?: Date | string | null
    receiveEmailsOnNewEvent?: boolean
    payments?: PaymentUncheckedCreateNestedManyWithoutUserInput
    chats?: ChatsOnUsersUncheckedCreateNestedManyWithoutUserInput
    events?: UsersOnEventsUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    passwordRecoveryToken?: PasswordRecoveryTokenUncheckedCreateNestedOneWithoutUserInput
    WebPushSubscription?: WebPushSubscriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutQuizAttemptsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutQuizAttemptsInput, UserUncheckedCreateWithoutQuizAttemptsInput>
  }

  export type UserUpsertWithoutQuizAttemptsInput = {
    update: XOR<UserUpdateWithoutQuizAttemptsInput, UserUncheckedUpdateWithoutQuizAttemptsInput>
    create: XOR<UserCreateWithoutQuizAttemptsInput, UserUncheckedCreateWithoutQuizAttemptsInput>
  }

  export type UserUpdateWithoutQuizAttemptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idIssueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profilePicturePath?: NullableStringFieldUpdateOperationsInput | string | null
    isInClub?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCalendarEnable?: BoolFieldUpdateOperationsInput | boolean
    calendarBlockingDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receiveEmailsOnNewEvent?: BoolFieldUpdateOperationsInput | boolean
    payments?: PaymentUpdateManyWithoutUserNestedInput
    chats?: ChatsOnUsersUpdateManyWithoutUserNestedInput
    events?: UsersOnEventsUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
    course?: CourseUpdateOneWithoutStudentsNestedInput
    passwordRecoveryToken?: PasswordRecoveryTokenUpdateOneWithoutUserNestedInput
    WebPushSubscription?: WebPushSubscriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutQuizAttemptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idIssueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profilePicturePath?: NullableStringFieldUpdateOperationsInput | string | null
    isInClub?: BoolFieldUpdateOperationsInput | boolean
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCalendarEnable?: BoolFieldUpdateOperationsInput | boolean
    calendarBlockingDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receiveEmailsOnNewEvent?: BoolFieldUpdateOperationsInput | boolean
    payments?: PaymentUncheckedUpdateManyWithoutUserNestedInput
    chats?: ChatsOnUsersUncheckedUpdateManyWithoutUserNestedInput
    events?: UsersOnEventsUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    passwordRecoveryToken?: PasswordRecoveryTokenUncheckedUpdateOneWithoutUserNestedInput
    WebPushSubscription?: WebPushSubscriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutPasswordRecoveryTokenInput = {
    id?: string
    email: string
    password: string
    role?: Role
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    birthDate?: Date | string | null
    address?: string | null
    zipCode?: string | null
    city?: string | null
    idNumber?: string | null
    idIssueDate?: Date | string | null
    profilePicturePath?: string | null
    isInClub?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isCalendarEnable?: boolean
    calendarBlockingDeadline?: Date | string | null
    receiveEmailsOnNewEvent?: boolean
    payments?: PaymentCreateNestedManyWithoutUserInput
    chats?: ChatsOnUsersCreateNestedManyWithoutUserInput
    events?: UsersOnEventsCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutSenderInput
    course?: CourseCreateNestedOneWithoutStudentsInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutUserInput
    WebPushSubscription?: WebPushSubscriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPasswordRecoveryTokenInput = {
    id?: string
    email: string
    password: string
    role?: Role
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    birthDate?: Date | string | null
    address?: string | null
    zipCode?: string | null
    city?: string | null
    idNumber?: string | null
    idIssueDate?: Date | string | null
    profilePicturePath?: string | null
    isInClub?: boolean
    courseId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isCalendarEnable?: boolean
    calendarBlockingDeadline?: Date | string | null
    receiveEmailsOnNewEvent?: boolean
    payments?: PaymentUncheckedCreateNestedManyWithoutUserInput
    chats?: ChatsOnUsersUncheckedCreateNestedManyWithoutUserInput
    events?: UsersOnEventsUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutUserInput
    WebPushSubscription?: WebPushSubscriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPasswordRecoveryTokenInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPasswordRecoveryTokenInput, UserUncheckedCreateWithoutPasswordRecoveryTokenInput>
  }

  export type UserUpsertWithoutPasswordRecoveryTokenInput = {
    update: XOR<UserUpdateWithoutPasswordRecoveryTokenInput, UserUncheckedUpdateWithoutPasswordRecoveryTokenInput>
    create: XOR<UserCreateWithoutPasswordRecoveryTokenInput, UserUncheckedCreateWithoutPasswordRecoveryTokenInput>
  }

  export type UserUpdateWithoutPasswordRecoveryTokenInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idIssueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profilePicturePath?: NullableStringFieldUpdateOperationsInput | string | null
    isInClub?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCalendarEnable?: BoolFieldUpdateOperationsInput | boolean
    calendarBlockingDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receiveEmailsOnNewEvent?: BoolFieldUpdateOperationsInput | boolean
    payments?: PaymentUpdateManyWithoutUserNestedInput
    chats?: ChatsOnUsersUpdateManyWithoutUserNestedInput
    events?: UsersOnEventsUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
    course?: CourseUpdateOneWithoutStudentsNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutUserNestedInput
    WebPushSubscription?: WebPushSubscriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPasswordRecoveryTokenInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idIssueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profilePicturePath?: NullableStringFieldUpdateOperationsInput | string | null
    isInClub?: BoolFieldUpdateOperationsInput | boolean
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCalendarEnable?: BoolFieldUpdateOperationsInput | boolean
    calendarBlockingDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receiveEmailsOnNewEvent?: BoolFieldUpdateOperationsInput | boolean
    payments?: PaymentUncheckedUpdateManyWithoutUserNestedInput
    chats?: ChatsOnUsersUncheckedUpdateManyWithoutUserNestedInput
    events?: UsersOnEventsUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutUserNestedInput
    WebPushSubscription?: WebPushSubscriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type VideosOnCoursesCreateWithoutVideoInput = {
    course: CourseCreateNestedOneWithoutVideosInput
  }

  export type VideosOnCoursesUncheckedCreateWithoutVideoInput = {
    courseId: string
  }

  export type VideosOnCoursesCreateOrConnectWithoutVideoInput = {
    where: VideosOnCoursesWhereUniqueInput
    create: XOR<VideosOnCoursesCreateWithoutVideoInput, VideosOnCoursesUncheckedCreateWithoutVideoInput>
  }

  export type VideosOnCoursesCreateManyVideoInputEnvelope = {
    data: Enumerable<VideosOnCoursesCreateManyVideoInput>
    skipDuplicates?: boolean
  }

  export type VideosOnCoursesUpsertWithWhereUniqueWithoutVideoInput = {
    where: VideosOnCoursesWhereUniqueInput
    update: XOR<VideosOnCoursesUpdateWithoutVideoInput, VideosOnCoursesUncheckedUpdateWithoutVideoInput>
    create: XOR<VideosOnCoursesCreateWithoutVideoInput, VideosOnCoursesUncheckedCreateWithoutVideoInput>
  }

  export type VideosOnCoursesUpdateWithWhereUniqueWithoutVideoInput = {
    where: VideosOnCoursesWhereUniqueInput
    data: XOR<VideosOnCoursesUpdateWithoutVideoInput, VideosOnCoursesUncheckedUpdateWithoutVideoInput>
  }

  export type VideosOnCoursesUpdateManyWithWhereWithoutVideoInput = {
    where: VideosOnCoursesScalarWhereInput
    data: XOR<VideosOnCoursesUpdateManyMutationInput, VideosOnCoursesUncheckedUpdateManyWithoutCoursesInput>
  }

  export type VideosOnCoursesScalarWhereInput = {
    AND?: Enumerable<VideosOnCoursesScalarWhereInput>
    OR?: Enumerable<VideosOnCoursesScalarWhereInput>
    NOT?: Enumerable<VideosOnCoursesScalarWhereInput>
    videoId?: StringFilter | string
    courseId?: StringFilter | string
  }

  export type VideoCreateWithoutCoursesInput = {
    id?: string
    url: string
    title: string
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VideoUncheckedCreateWithoutCoursesInput = {
    id?: string
    url: string
    title: string
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VideoCreateOrConnectWithoutCoursesInput = {
    where: VideoWhereUniqueInput
    create: XOR<VideoCreateWithoutCoursesInput, VideoUncheckedCreateWithoutCoursesInput>
  }

  export type CourseCreateWithoutVideosInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    folders?: FolderCreateNestedManyWithoutCourseInput
    files?: FileCreateNestedManyWithoutCourseInput
    students?: UserCreateNestedManyWithoutCourseInput
    quizzes?: QuizzesOnCourseCreateNestedManyWithoutCourseInput
    predefinedEvents?: PredefinedEventOnCoursesCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutVideosInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    folders?: FolderUncheckedCreateNestedManyWithoutCourseInput
    files?: FileUncheckedCreateNestedManyWithoutCourseInput
    students?: UserUncheckedCreateNestedManyWithoutCourseInput
    quizzes?: QuizzesOnCourseUncheckedCreateNestedManyWithoutCourseInput
    predefinedEvents?: PredefinedEventOnCoursesUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutVideosInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutVideosInput, CourseUncheckedCreateWithoutVideosInput>
  }

  export type VideoUpsertWithoutCoursesInput = {
    update: XOR<VideoUpdateWithoutCoursesInput, VideoUncheckedUpdateWithoutCoursesInput>
    create: XOR<VideoCreateWithoutCoursesInput, VideoUncheckedCreateWithoutCoursesInput>
  }

  export type VideoUpdateWithoutCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VideoUncheckedUpdateWithoutCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseUpsertWithoutVideosInput = {
    update: XOR<CourseUpdateWithoutVideosInput, CourseUncheckedUpdateWithoutVideosInput>
    create: XOR<CourseCreateWithoutVideosInput, CourseUncheckedCreateWithoutVideosInput>
  }

  export type CourseUpdateWithoutVideosInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    folders?: FolderUpdateManyWithoutCourseNestedInput
    files?: FileUpdateManyWithoutCourseNestedInput
    students?: UserUpdateManyWithoutCourseNestedInput
    quizzes?: QuizzesOnCourseUpdateManyWithoutCourseNestedInput
    predefinedEvents?: PredefinedEventOnCoursesUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutVideosInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    folders?: FolderUncheckedUpdateManyWithoutCourseNestedInput
    files?: FileUncheckedUpdateManyWithoutCourseNestedInput
    students?: UserUncheckedUpdateManyWithoutCourseNestedInput
    quizzes?: QuizzesOnCourseUncheckedUpdateManyWithoutCourseNestedInput
    predefinedEvents?: PredefinedEventOnCoursesUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type UserCreateWithoutPaymentsInput = {
    id?: string
    email: string
    password: string
    role?: Role
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    birthDate?: Date | string | null
    address?: string | null
    zipCode?: string | null
    city?: string | null
    idNumber?: string | null
    idIssueDate?: Date | string | null
    profilePicturePath?: string | null
    isInClub?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isCalendarEnable?: boolean
    calendarBlockingDeadline?: Date | string | null
    receiveEmailsOnNewEvent?: boolean
    chats?: ChatsOnUsersCreateNestedManyWithoutUserInput
    events?: UsersOnEventsCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutSenderInput
    course?: CourseCreateNestedOneWithoutStudentsInput
    passwordRecoveryToken?: PasswordRecoveryTokenCreateNestedOneWithoutUserInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutUserInput
    WebPushSubscription?: WebPushSubscriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPaymentsInput = {
    id?: string
    email: string
    password: string
    role?: Role
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    birthDate?: Date | string | null
    address?: string | null
    zipCode?: string | null
    city?: string | null
    idNumber?: string | null
    idIssueDate?: Date | string | null
    profilePicturePath?: string | null
    isInClub?: boolean
    courseId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isCalendarEnable?: boolean
    calendarBlockingDeadline?: Date | string | null
    receiveEmailsOnNewEvent?: boolean
    chats?: ChatsOnUsersUncheckedCreateNestedManyWithoutUserInput
    events?: UsersOnEventsUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    passwordRecoveryToken?: PasswordRecoveryTokenUncheckedCreateNestedOneWithoutUserInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutUserInput
    WebPushSubscription?: WebPushSubscriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPaymentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPaymentsInput, UserUncheckedCreateWithoutPaymentsInput>
  }

  export type UserUpsertWithoutPaymentsInput = {
    update: XOR<UserUpdateWithoutPaymentsInput, UserUncheckedUpdateWithoutPaymentsInput>
    create: XOR<UserCreateWithoutPaymentsInput, UserUncheckedCreateWithoutPaymentsInput>
  }

  export type UserUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idIssueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profilePicturePath?: NullableStringFieldUpdateOperationsInput | string | null
    isInClub?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCalendarEnable?: BoolFieldUpdateOperationsInput | boolean
    calendarBlockingDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receiveEmailsOnNewEvent?: BoolFieldUpdateOperationsInput | boolean
    chats?: ChatsOnUsersUpdateManyWithoutUserNestedInput
    events?: UsersOnEventsUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
    course?: CourseUpdateOneWithoutStudentsNestedInput
    passwordRecoveryToken?: PasswordRecoveryTokenUpdateOneWithoutUserNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutUserNestedInput
    WebPushSubscription?: WebPushSubscriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idIssueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profilePicturePath?: NullableStringFieldUpdateOperationsInput | string | null
    isInClub?: BoolFieldUpdateOperationsInput | boolean
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCalendarEnable?: BoolFieldUpdateOperationsInput | boolean
    calendarBlockingDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receiveEmailsOnNewEvent?: BoolFieldUpdateOperationsInput | boolean
    chats?: ChatsOnUsersUncheckedUpdateManyWithoutUserNestedInput
    events?: UsersOnEventsUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    passwordRecoveryToken?: PasswordRecoveryTokenUncheckedUpdateOneWithoutUserNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutUserNestedInput
    WebPushSubscription?: WebPushSubscriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FolderCreateWithoutFilesInput = {
    id?: string
    name: string
    isRoot?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    folders?: FolderCreateNestedManyWithoutParentInput
    parent?: FolderCreateNestedOneWithoutFoldersInput
    course: CourseCreateNestedOneWithoutFoldersInput
  }

  export type FolderUncheckedCreateWithoutFilesInput = {
    id?: string
    name: string
    parentId?: string | null
    isRoot?: boolean
    courseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    folders?: FolderUncheckedCreateNestedManyWithoutParentInput
  }

  export type FolderCreateOrConnectWithoutFilesInput = {
    where: FolderWhereUniqueInput
    create: XOR<FolderCreateWithoutFilesInput, FolderUncheckedCreateWithoutFilesInput>
  }

  export type CourseCreateWithoutFilesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    folders?: FolderCreateNestedManyWithoutCourseInput
    videos?: VideosOnCoursesCreateNestedManyWithoutCourseInput
    students?: UserCreateNestedManyWithoutCourseInput
    quizzes?: QuizzesOnCourseCreateNestedManyWithoutCourseInput
    predefinedEvents?: PredefinedEventOnCoursesCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutFilesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    folders?: FolderUncheckedCreateNestedManyWithoutCourseInput
    videos?: VideosOnCoursesUncheckedCreateNestedManyWithoutCourseInput
    students?: UserUncheckedCreateNestedManyWithoutCourseInput
    quizzes?: QuizzesOnCourseUncheckedCreateNestedManyWithoutCourseInput
    predefinedEvents?: PredefinedEventOnCoursesUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutFilesInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutFilesInput, CourseUncheckedCreateWithoutFilesInput>
  }

  export type FolderUpsertWithoutFilesInput = {
    update: XOR<FolderUpdateWithoutFilesInput, FolderUncheckedUpdateWithoutFilesInput>
    create: XOR<FolderCreateWithoutFilesInput, FolderUncheckedCreateWithoutFilesInput>
  }

  export type FolderUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isRoot?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    folders?: FolderUpdateManyWithoutParentNestedInput
    parent?: FolderUpdateOneWithoutFoldersNestedInput
    course?: CourseUpdateOneRequiredWithoutFoldersNestedInput
  }

  export type FolderUncheckedUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isRoot?: BoolFieldUpdateOperationsInput | boolean
    courseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    folders?: FolderUncheckedUpdateManyWithoutParentNestedInput
  }

  export type CourseUpsertWithoutFilesInput = {
    update: XOR<CourseUpdateWithoutFilesInput, CourseUncheckedUpdateWithoutFilesInput>
    create: XOR<CourseCreateWithoutFilesInput, CourseUncheckedCreateWithoutFilesInput>
  }

  export type CourseUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    folders?: FolderUpdateManyWithoutCourseNestedInput
    videos?: VideosOnCoursesUpdateManyWithoutCourseNestedInput
    students?: UserUpdateManyWithoutCourseNestedInput
    quizzes?: QuizzesOnCourseUpdateManyWithoutCourseNestedInput
    predefinedEvents?: PredefinedEventOnCoursesUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    folders?: FolderUncheckedUpdateManyWithoutCourseNestedInput
    videos?: VideosOnCoursesUncheckedUpdateManyWithoutCourseNestedInput
    students?: UserUncheckedUpdateManyWithoutCourseNestedInput
    quizzes?: QuizzesOnCourseUncheckedUpdateManyWithoutCourseNestedInput
    predefinedEvents?: PredefinedEventOnCoursesUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type FileCreateWithoutFolderInput = {
    id?: string
    name: string
    s3Key: string
    contentType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Course: CourseCreateNestedOneWithoutFilesInput
  }

  export type FileUncheckedCreateWithoutFolderInput = {
    id?: string
    name: string
    s3Key: string
    contentType: string
    courseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileCreateOrConnectWithoutFolderInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutFolderInput, FileUncheckedCreateWithoutFolderInput>
  }

  export type FileCreateManyFolderInputEnvelope = {
    data: Enumerable<FileCreateManyFolderInput>
    skipDuplicates?: boolean
  }

  export type FolderCreateWithoutParentInput = {
    id?: string
    name: string
    isRoot?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    files?: FileCreateNestedManyWithoutFolderInput
    folders?: FolderCreateNestedManyWithoutParentInput
    course: CourseCreateNestedOneWithoutFoldersInput
  }

  export type FolderUncheckedCreateWithoutParentInput = {
    id?: string
    name: string
    isRoot?: boolean
    courseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    files?: FileUncheckedCreateNestedManyWithoutFolderInput
    folders?: FolderUncheckedCreateNestedManyWithoutParentInput
  }

  export type FolderCreateOrConnectWithoutParentInput = {
    where: FolderWhereUniqueInput
    create: XOR<FolderCreateWithoutParentInput, FolderUncheckedCreateWithoutParentInput>
  }

  export type FolderCreateManyParentInputEnvelope = {
    data: Enumerable<FolderCreateManyParentInput>
    skipDuplicates?: boolean
  }

  export type FolderCreateWithoutFoldersInput = {
    id?: string
    name: string
    isRoot?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    files?: FileCreateNestedManyWithoutFolderInput
    parent?: FolderCreateNestedOneWithoutFoldersInput
    course: CourseCreateNestedOneWithoutFoldersInput
  }

  export type FolderUncheckedCreateWithoutFoldersInput = {
    id?: string
    name: string
    parentId?: string | null
    isRoot?: boolean
    courseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    files?: FileUncheckedCreateNestedManyWithoutFolderInput
  }

  export type FolderCreateOrConnectWithoutFoldersInput = {
    where: FolderWhereUniqueInput
    create: XOR<FolderCreateWithoutFoldersInput, FolderUncheckedCreateWithoutFoldersInput>
  }

  export type CourseCreateWithoutFoldersInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    files?: FileCreateNestedManyWithoutCourseInput
    videos?: VideosOnCoursesCreateNestedManyWithoutCourseInput
    students?: UserCreateNestedManyWithoutCourseInput
    quizzes?: QuizzesOnCourseCreateNestedManyWithoutCourseInput
    predefinedEvents?: PredefinedEventOnCoursesCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutFoldersInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    files?: FileUncheckedCreateNestedManyWithoutCourseInput
    videos?: VideosOnCoursesUncheckedCreateNestedManyWithoutCourseInput
    students?: UserUncheckedCreateNestedManyWithoutCourseInput
    quizzes?: QuizzesOnCourseUncheckedCreateNestedManyWithoutCourseInput
    predefinedEvents?: PredefinedEventOnCoursesUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutFoldersInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutFoldersInput, CourseUncheckedCreateWithoutFoldersInput>
  }

  export type FileUpsertWithWhereUniqueWithoutFolderInput = {
    where: FileWhereUniqueInput
    update: XOR<FileUpdateWithoutFolderInput, FileUncheckedUpdateWithoutFolderInput>
    create: XOR<FileCreateWithoutFolderInput, FileUncheckedCreateWithoutFolderInput>
  }

  export type FileUpdateWithWhereUniqueWithoutFolderInput = {
    where: FileWhereUniqueInput
    data: XOR<FileUpdateWithoutFolderInput, FileUncheckedUpdateWithoutFolderInput>
  }

  export type FileUpdateManyWithWhereWithoutFolderInput = {
    where: FileScalarWhereInput
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyWithoutFilesInput>
  }

  export type FileScalarWhereInput = {
    AND?: Enumerable<FileScalarWhereInput>
    OR?: Enumerable<FileScalarWhereInput>
    NOT?: Enumerable<FileScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    s3Key?: StringFilter | string
    contentType?: StringFilter | string
    folderId?: StringFilter | string
    courseId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type FolderUpsertWithWhereUniqueWithoutParentInput = {
    where: FolderWhereUniqueInput
    update: XOR<FolderUpdateWithoutParentInput, FolderUncheckedUpdateWithoutParentInput>
    create: XOR<FolderCreateWithoutParentInput, FolderUncheckedCreateWithoutParentInput>
  }

  export type FolderUpdateWithWhereUniqueWithoutParentInput = {
    where: FolderWhereUniqueInput
    data: XOR<FolderUpdateWithoutParentInput, FolderUncheckedUpdateWithoutParentInput>
  }

  export type FolderUpdateManyWithWhereWithoutParentInput = {
    where: FolderScalarWhereInput
    data: XOR<FolderUpdateManyMutationInput, FolderUncheckedUpdateManyWithoutFoldersInput>
  }

  export type FolderScalarWhereInput = {
    AND?: Enumerable<FolderScalarWhereInput>
    OR?: Enumerable<FolderScalarWhereInput>
    NOT?: Enumerable<FolderScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    parentId?: StringNullableFilter | string | null
    isRoot?: BoolFilter | boolean
    courseId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type FolderUpsertWithoutFoldersInput = {
    update: XOR<FolderUpdateWithoutFoldersInput, FolderUncheckedUpdateWithoutFoldersInput>
    create: XOR<FolderCreateWithoutFoldersInput, FolderUncheckedCreateWithoutFoldersInput>
  }

  export type FolderUpdateWithoutFoldersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isRoot?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: FileUpdateManyWithoutFolderNestedInput
    parent?: FolderUpdateOneWithoutFoldersNestedInput
    course?: CourseUpdateOneRequiredWithoutFoldersNestedInput
  }

  export type FolderUncheckedUpdateWithoutFoldersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isRoot?: BoolFieldUpdateOperationsInput | boolean
    courseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: FileUncheckedUpdateManyWithoutFolderNestedInput
  }

  export type CourseUpsertWithoutFoldersInput = {
    update: XOR<CourseUpdateWithoutFoldersInput, CourseUncheckedUpdateWithoutFoldersInput>
    create: XOR<CourseCreateWithoutFoldersInput, CourseUncheckedCreateWithoutFoldersInput>
  }

  export type CourseUpdateWithoutFoldersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: FileUpdateManyWithoutCourseNestedInput
    videos?: VideosOnCoursesUpdateManyWithoutCourseNestedInput
    students?: UserUpdateManyWithoutCourseNestedInput
    quizzes?: QuizzesOnCourseUpdateManyWithoutCourseNestedInput
    predefinedEvents?: PredefinedEventOnCoursesUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutFoldersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: FileUncheckedUpdateManyWithoutCourseNestedInput
    videos?: VideosOnCoursesUncheckedUpdateManyWithoutCourseNestedInput
    students?: UserUncheckedUpdateManyWithoutCourseNestedInput
    quizzes?: QuizzesOnCourseUncheckedUpdateManyWithoutCourseNestedInput
    predefinedEvents?: PredefinedEventOnCoursesUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type FolderCreateWithoutCourseInput = {
    id?: string
    name: string
    isRoot?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    files?: FileCreateNestedManyWithoutFolderInput
    folders?: FolderCreateNestedManyWithoutParentInput
    parent?: FolderCreateNestedOneWithoutFoldersInput
  }

  export type FolderUncheckedCreateWithoutCourseInput = {
    id?: string
    name: string
    parentId?: string | null
    isRoot?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    files?: FileUncheckedCreateNestedManyWithoutFolderInput
    folders?: FolderUncheckedCreateNestedManyWithoutParentInput
  }

  export type FolderCreateOrConnectWithoutCourseInput = {
    where: FolderWhereUniqueInput
    create: XOR<FolderCreateWithoutCourseInput, FolderUncheckedCreateWithoutCourseInput>
  }

  export type FolderCreateManyCourseInputEnvelope = {
    data: Enumerable<FolderCreateManyCourseInput>
    skipDuplicates?: boolean
  }

  export type FileCreateWithoutCourseInput = {
    id?: string
    name: string
    s3Key: string
    contentType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    folder: FolderCreateNestedOneWithoutFilesInput
  }

  export type FileUncheckedCreateWithoutCourseInput = {
    id?: string
    name: string
    s3Key: string
    contentType: string
    folderId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileCreateOrConnectWithoutCourseInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutCourseInput, FileUncheckedCreateWithoutCourseInput>
  }

  export type FileCreateManyCourseInputEnvelope = {
    data: Enumerable<FileCreateManyCourseInput>
    skipDuplicates?: boolean
  }

  export type VideosOnCoursesCreateWithoutCourseInput = {
    video: VideoCreateNestedOneWithoutCoursesInput
  }

  export type VideosOnCoursesUncheckedCreateWithoutCourseInput = {
    videoId: string
  }

  export type VideosOnCoursesCreateOrConnectWithoutCourseInput = {
    where: VideosOnCoursesWhereUniqueInput
    create: XOR<VideosOnCoursesCreateWithoutCourseInput, VideosOnCoursesUncheckedCreateWithoutCourseInput>
  }

  export type VideosOnCoursesCreateManyCourseInputEnvelope = {
    data: Enumerable<VideosOnCoursesCreateManyCourseInput>
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCourseInput = {
    id?: string
    email: string
    password: string
    role?: Role
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    birthDate?: Date | string | null
    address?: string | null
    zipCode?: string | null
    city?: string | null
    idNumber?: string | null
    idIssueDate?: Date | string | null
    profilePicturePath?: string | null
    isInClub?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isCalendarEnable?: boolean
    calendarBlockingDeadline?: Date | string | null
    receiveEmailsOnNewEvent?: boolean
    payments?: PaymentCreateNestedManyWithoutUserInput
    chats?: ChatsOnUsersCreateNestedManyWithoutUserInput
    events?: UsersOnEventsCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutSenderInput
    passwordRecoveryToken?: PasswordRecoveryTokenCreateNestedOneWithoutUserInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutUserInput
    WebPushSubscription?: WebPushSubscriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCourseInput = {
    id?: string
    email: string
    password: string
    role?: Role
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    birthDate?: Date | string | null
    address?: string | null
    zipCode?: string | null
    city?: string | null
    idNumber?: string | null
    idIssueDate?: Date | string | null
    profilePicturePath?: string | null
    isInClub?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isCalendarEnable?: boolean
    calendarBlockingDeadline?: Date | string | null
    receiveEmailsOnNewEvent?: boolean
    payments?: PaymentUncheckedCreateNestedManyWithoutUserInput
    chats?: ChatsOnUsersUncheckedCreateNestedManyWithoutUserInput
    events?: UsersOnEventsUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    passwordRecoveryToken?: PasswordRecoveryTokenUncheckedCreateNestedOneWithoutUserInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutUserInput
    WebPushSubscription?: WebPushSubscriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCourseInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCourseInput, UserUncheckedCreateWithoutCourseInput>
  }

  export type UserCreateManyCourseInputEnvelope = {
    data: Enumerable<UserCreateManyCourseInput>
    skipDuplicates?: boolean
  }

  export type QuizzesOnCourseCreateWithoutCourseInput = {
    quiz: QuizCreateNestedOneWithoutCoursesInput
  }

  export type QuizzesOnCourseUncheckedCreateWithoutCourseInput = {
    quizId: string
  }

  export type QuizzesOnCourseCreateOrConnectWithoutCourseInput = {
    where: QuizzesOnCourseWhereUniqueInput
    create: XOR<QuizzesOnCourseCreateWithoutCourseInput, QuizzesOnCourseUncheckedCreateWithoutCourseInput>
  }

  export type QuizzesOnCourseCreateManyCourseInputEnvelope = {
    data: Enumerable<QuizzesOnCourseCreateManyCourseInput>
    skipDuplicates?: boolean
  }

  export type PredefinedEventOnCoursesCreateWithoutCourseInput = {
    predefinedEvent: PredefinedEventCreateNestedOneWithoutCoursesInput
  }

  export type PredefinedEventOnCoursesUncheckedCreateWithoutCourseInput = {
    predefinedEventId: string
  }

  export type PredefinedEventOnCoursesCreateOrConnectWithoutCourseInput = {
    where: PredefinedEventOnCoursesWhereUniqueInput
    create: XOR<PredefinedEventOnCoursesCreateWithoutCourseInput, PredefinedEventOnCoursesUncheckedCreateWithoutCourseInput>
  }

  export type PredefinedEventOnCoursesCreateManyCourseInputEnvelope = {
    data: Enumerable<PredefinedEventOnCoursesCreateManyCourseInput>
    skipDuplicates?: boolean
  }

  export type FolderUpsertWithWhereUniqueWithoutCourseInput = {
    where: FolderWhereUniqueInput
    update: XOR<FolderUpdateWithoutCourseInput, FolderUncheckedUpdateWithoutCourseInput>
    create: XOR<FolderCreateWithoutCourseInput, FolderUncheckedCreateWithoutCourseInput>
  }

  export type FolderUpdateWithWhereUniqueWithoutCourseInput = {
    where: FolderWhereUniqueInput
    data: XOR<FolderUpdateWithoutCourseInput, FolderUncheckedUpdateWithoutCourseInput>
  }

  export type FolderUpdateManyWithWhereWithoutCourseInput = {
    where: FolderScalarWhereInput
    data: XOR<FolderUpdateManyMutationInput, FolderUncheckedUpdateManyWithoutFoldersInput>
  }

  export type FileUpsertWithWhereUniqueWithoutCourseInput = {
    where: FileWhereUniqueInput
    update: XOR<FileUpdateWithoutCourseInput, FileUncheckedUpdateWithoutCourseInput>
    create: XOR<FileCreateWithoutCourseInput, FileUncheckedCreateWithoutCourseInput>
  }

  export type FileUpdateWithWhereUniqueWithoutCourseInput = {
    where: FileWhereUniqueInput
    data: XOR<FileUpdateWithoutCourseInput, FileUncheckedUpdateWithoutCourseInput>
  }

  export type FileUpdateManyWithWhereWithoutCourseInput = {
    where: FileScalarWhereInput
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyWithoutFilesInput>
  }

  export type VideosOnCoursesUpsertWithWhereUniqueWithoutCourseInput = {
    where: VideosOnCoursesWhereUniqueInput
    update: XOR<VideosOnCoursesUpdateWithoutCourseInput, VideosOnCoursesUncheckedUpdateWithoutCourseInput>
    create: XOR<VideosOnCoursesCreateWithoutCourseInput, VideosOnCoursesUncheckedCreateWithoutCourseInput>
  }

  export type VideosOnCoursesUpdateWithWhereUniqueWithoutCourseInput = {
    where: VideosOnCoursesWhereUniqueInput
    data: XOR<VideosOnCoursesUpdateWithoutCourseInput, VideosOnCoursesUncheckedUpdateWithoutCourseInput>
  }

  export type VideosOnCoursesUpdateManyWithWhereWithoutCourseInput = {
    where: VideosOnCoursesScalarWhereInput
    data: XOR<VideosOnCoursesUpdateManyMutationInput, VideosOnCoursesUncheckedUpdateManyWithoutVideosInput>
  }

  export type UserUpsertWithWhereUniqueWithoutCourseInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutCourseInput, UserUncheckedUpdateWithoutCourseInput>
    create: XOR<UserCreateWithoutCourseInput, UserUncheckedCreateWithoutCourseInput>
  }

  export type UserUpdateWithWhereUniqueWithoutCourseInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutCourseInput, UserUncheckedUpdateWithoutCourseInput>
  }

  export type UserUpdateManyWithWhereWithoutCourseInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutStudentsInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    role?: EnumRoleFilter | Role
    firstName?: StringNullableFilter | string | null
    lastName?: StringNullableFilter | string | null
    phoneNumber?: StringNullableFilter | string | null
    birthDate?: DateTimeNullableFilter | Date | string | null
    address?: StringNullableFilter | string | null
    zipCode?: StringNullableFilter | string | null
    city?: StringNullableFilter | string | null
    idNumber?: StringNullableFilter | string | null
    idIssueDate?: DateTimeNullableFilter | Date | string | null
    profilePicturePath?: StringNullableFilter | string | null
    isInClub?: BoolFilter | boolean
    courseId?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    isActive?: BoolFilter | boolean
    isCalendarEnable?: BoolFilter | boolean
    calendarBlockingDeadline?: DateTimeNullableFilter | Date | string | null
    receiveEmailsOnNewEvent?: BoolFilter | boolean
  }

  export type QuizzesOnCourseUpsertWithWhereUniqueWithoutCourseInput = {
    where: QuizzesOnCourseWhereUniqueInput
    update: XOR<QuizzesOnCourseUpdateWithoutCourseInput, QuizzesOnCourseUncheckedUpdateWithoutCourseInput>
    create: XOR<QuizzesOnCourseCreateWithoutCourseInput, QuizzesOnCourseUncheckedCreateWithoutCourseInput>
  }

  export type QuizzesOnCourseUpdateWithWhereUniqueWithoutCourseInput = {
    where: QuizzesOnCourseWhereUniqueInput
    data: XOR<QuizzesOnCourseUpdateWithoutCourseInput, QuizzesOnCourseUncheckedUpdateWithoutCourseInput>
  }

  export type QuizzesOnCourseUpdateManyWithWhereWithoutCourseInput = {
    where: QuizzesOnCourseScalarWhereInput
    data: XOR<QuizzesOnCourseUpdateManyMutationInput, QuizzesOnCourseUncheckedUpdateManyWithoutQuizzesInput>
  }

  export type QuizzesOnCourseScalarWhereInput = {
    AND?: Enumerable<QuizzesOnCourseScalarWhereInput>
    OR?: Enumerable<QuizzesOnCourseScalarWhereInput>
    NOT?: Enumerable<QuizzesOnCourseScalarWhereInput>
    quizId?: StringFilter | string
    courseId?: StringFilter | string
  }

  export type PredefinedEventOnCoursesUpsertWithWhereUniqueWithoutCourseInput = {
    where: PredefinedEventOnCoursesWhereUniqueInput
    update: XOR<PredefinedEventOnCoursesUpdateWithoutCourseInput, PredefinedEventOnCoursesUncheckedUpdateWithoutCourseInput>
    create: XOR<PredefinedEventOnCoursesCreateWithoutCourseInput, PredefinedEventOnCoursesUncheckedCreateWithoutCourseInput>
  }

  export type PredefinedEventOnCoursesUpdateWithWhereUniqueWithoutCourseInput = {
    where: PredefinedEventOnCoursesWhereUniqueInput
    data: XOR<PredefinedEventOnCoursesUpdateWithoutCourseInput, PredefinedEventOnCoursesUncheckedUpdateWithoutCourseInput>
  }

  export type PredefinedEventOnCoursesUpdateManyWithWhereWithoutCourseInput = {
    where: PredefinedEventOnCoursesScalarWhereInput
    data: XOR<PredefinedEventOnCoursesUpdateManyMutationInput, PredefinedEventOnCoursesUncheckedUpdateManyWithoutPredefinedEventsInput>
  }

  export type PredefinedEventOnCoursesScalarWhereInput = {
    AND?: Enumerable<PredefinedEventOnCoursesScalarWhereInput>
    OR?: Enumerable<PredefinedEventOnCoursesScalarWhereInput>
    NOT?: Enumerable<PredefinedEventOnCoursesScalarWhereInput>
    predefinedEventId?: StringFilter | string
    courseId?: StringFilter | string
  }

  export type EventCreateWithoutPredefinedEventInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    totalSlots: number
    description?: string | null
    title?: string | null
    isClub?: boolean
    isHidden?: boolean
    enableBooking?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    color?: string | null
    recurrenceRule?: string | null
    recurrenceEnd?: Date | string | null
    users?: UsersOnEventsCreateNestedManyWithoutEventInput
    waitlist?: UsersOnEventsCreateNestedManyWithoutWaitlistEventInput
    visitedUsers?: UsersOnEventsCreateNestedManyWithoutVisitedEventInput
  }

  export type EventUncheckedCreateWithoutPredefinedEventInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    totalSlots: number
    description?: string | null
    title?: string | null
    isClub?: boolean
    isHidden?: boolean
    enableBooking?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    color?: string | null
    recurrenceRule?: string | null
    recurrenceEnd?: Date | string | null
    users?: UsersOnEventsUncheckedCreateNestedManyWithoutEventInput
    waitlist?: UsersOnEventsUncheckedCreateNestedManyWithoutWaitlistEventInput
    visitedUsers?: UsersOnEventsUncheckedCreateNestedManyWithoutVisitedEventInput
  }

  export type EventCreateOrConnectWithoutPredefinedEventInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutPredefinedEventInput, EventUncheckedCreateWithoutPredefinedEventInput>
  }

  export type EventCreateManyPredefinedEventInputEnvelope = {
    data: Enumerable<EventCreateManyPredefinedEventInput>
    skipDuplicates?: boolean
  }

  export type PredefinedEventOnCoursesCreateWithoutPredefinedEventInput = {
    course: CourseCreateNestedOneWithoutPredefinedEventsInput
  }

  export type PredefinedEventOnCoursesUncheckedCreateWithoutPredefinedEventInput = {
    courseId: string
  }

  export type PredefinedEventOnCoursesCreateOrConnectWithoutPredefinedEventInput = {
    where: PredefinedEventOnCoursesWhereUniqueInput
    create: XOR<PredefinedEventOnCoursesCreateWithoutPredefinedEventInput, PredefinedEventOnCoursesUncheckedCreateWithoutPredefinedEventInput>
  }

  export type PredefinedEventOnCoursesCreateManyPredefinedEventInputEnvelope = {
    data: Enumerable<PredefinedEventOnCoursesCreateManyPredefinedEventInput>
    skipDuplicates?: boolean
  }

  export type EventUpsertWithWhereUniqueWithoutPredefinedEventInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutPredefinedEventInput, EventUncheckedUpdateWithoutPredefinedEventInput>
    create: XOR<EventCreateWithoutPredefinedEventInput, EventUncheckedCreateWithoutPredefinedEventInput>
  }

  export type EventUpdateWithWhereUniqueWithoutPredefinedEventInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutPredefinedEventInput, EventUncheckedUpdateWithoutPredefinedEventInput>
  }

  export type EventUpdateManyWithWhereWithoutPredefinedEventInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutEventsInput>
  }

  export type EventScalarWhereInput = {
    AND?: Enumerable<EventScalarWhereInput>
    OR?: Enumerable<EventScalarWhereInput>
    NOT?: Enumerable<EventScalarWhereInput>
    id?: StringFilter | string
    startDate?: DateTimeFilter | Date | string
    endDate?: DateTimeFilter | Date | string
    totalSlots?: IntFilter | number
    description?: StringNullableFilter | string | null
    predefinedEventId?: StringNullableFilter | string | null
    title?: StringNullableFilter | string | null
    isClub?: BoolFilter | boolean
    isHidden?: BoolFilter | boolean
    enableBooking?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    color?: StringNullableFilter | string | null
    recurrenceRule?: StringNullableFilter | string | null
    recurrenceEnd?: DateTimeNullableFilter | Date | string | null
  }

  export type PredefinedEventOnCoursesUpsertWithWhereUniqueWithoutPredefinedEventInput = {
    where: PredefinedEventOnCoursesWhereUniqueInput
    update: XOR<PredefinedEventOnCoursesUpdateWithoutPredefinedEventInput, PredefinedEventOnCoursesUncheckedUpdateWithoutPredefinedEventInput>
    create: XOR<PredefinedEventOnCoursesCreateWithoutPredefinedEventInput, PredefinedEventOnCoursesUncheckedCreateWithoutPredefinedEventInput>
  }

  export type PredefinedEventOnCoursesUpdateWithWhereUniqueWithoutPredefinedEventInput = {
    where: PredefinedEventOnCoursesWhereUniqueInput
    data: XOR<PredefinedEventOnCoursesUpdateWithoutPredefinedEventInput, PredefinedEventOnCoursesUncheckedUpdateWithoutPredefinedEventInput>
  }

  export type PredefinedEventOnCoursesUpdateManyWithWhereWithoutPredefinedEventInput = {
    where: PredefinedEventOnCoursesScalarWhereInput
    data: XOR<PredefinedEventOnCoursesUpdateManyMutationInput, PredefinedEventOnCoursesUncheckedUpdateManyWithoutCoursesInput>
  }

  export type PredefinedEventCreateWithoutCoursesInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: EventCreateNestedManyWithoutPredefinedEventInput
  }

  export type PredefinedEventUncheckedCreateWithoutCoursesInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: EventUncheckedCreateNestedManyWithoutPredefinedEventInput
  }

  export type PredefinedEventCreateOrConnectWithoutCoursesInput = {
    where: PredefinedEventWhereUniqueInput
    create: XOR<PredefinedEventCreateWithoutCoursesInput, PredefinedEventUncheckedCreateWithoutCoursesInput>
  }

  export type CourseCreateWithoutPredefinedEventsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    folders?: FolderCreateNestedManyWithoutCourseInput
    files?: FileCreateNestedManyWithoutCourseInput
    videos?: VideosOnCoursesCreateNestedManyWithoutCourseInput
    students?: UserCreateNestedManyWithoutCourseInput
    quizzes?: QuizzesOnCourseCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutPredefinedEventsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    folders?: FolderUncheckedCreateNestedManyWithoutCourseInput
    files?: FileUncheckedCreateNestedManyWithoutCourseInput
    videos?: VideosOnCoursesUncheckedCreateNestedManyWithoutCourseInput
    students?: UserUncheckedCreateNestedManyWithoutCourseInput
    quizzes?: QuizzesOnCourseUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutPredefinedEventsInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutPredefinedEventsInput, CourseUncheckedCreateWithoutPredefinedEventsInput>
  }

  export type PredefinedEventUpsertWithoutCoursesInput = {
    update: XOR<PredefinedEventUpdateWithoutCoursesInput, PredefinedEventUncheckedUpdateWithoutCoursesInput>
    create: XOR<PredefinedEventCreateWithoutCoursesInput, PredefinedEventUncheckedCreateWithoutCoursesInput>
  }

  export type PredefinedEventUpdateWithoutCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUpdateManyWithoutPredefinedEventNestedInput
  }

  export type PredefinedEventUncheckedUpdateWithoutCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUncheckedUpdateManyWithoutPredefinedEventNestedInput
  }

  export type CourseUpsertWithoutPredefinedEventsInput = {
    update: XOR<CourseUpdateWithoutPredefinedEventsInput, CourseUncheckedUpdateWithoutPredefinedEventsInput>
    create: XOR<CourseCreateWithoutPredefinedEventsInput, CourseUncheckedCreateWithoutPredefinedEventsInput>
  }

  export type CourseUpdateWithoutPredefinedEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    folders?: FolderUpdateManyWithoutCourseNestedInput
    files?: FileUpdateManyWithoutCourseNestedInput
    videos?: VideosOnCoursesUpdateManyWithoutCourseNestedInput
    students?: UserUpdateManyWithoutCourseNestedInput
    quizzes?: QuizzesOnCourseUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutPredefinedEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    folders?: FolderUncheckedUpdateManyWithoutCourseNestedInput
    files?: FileUncheckedUpdateManyWithoutCourseNestedInput
    videos?: VideosOnCoursesUncheckedUpdateManyWithoutCourseNestedInput
    students?: UserUncheckedUpdateManyWithoutCourseNestedInput
    quizzes?: QuizzesOnCourseUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type PredefinedEventCreateWithoutEventsInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    courses?: PredefinedEventOnCoursesCreateNestedManyWithoutPredefinedEventInput
  }

  export type PredefinedEventUncheckedCreateWithoutEventsInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    courses?: PredefinedEventOnCoursesUncheckedCreateNestedManyWithoutPredefinedEventInput
  }

  export type PredefinedEventCreateOrConnectWithoutEventsInput = {
    where: PredefinedEventWhereUniqueInput
    create: XOR<PredefinedEventCreateWithoutEventsInput, PredefinedEventUncheckedCreateWithoutEventsInput>
  }

  export type UsersOnEventsCreateWithoutEventInput = {
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutEventsInput
    waitlistEvent?: EventCreateNestedOneWithoutWaitlistInput
    visitedEvent?: EventCreateNestedOneWithoutVisitedUsersInput
  }

  export type UsersOnEventsUncheckedCreateWithoutEventInput = {
    userId: string
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    waitlistEventId?: string | null
    visitedEventId?: string | null
  }

  export type UsersOnEventsCreateOrConnectWithoutEventInput = {
    where: UsersOnEventsWhereUniqueInput
    create: XOR<UsersOnEventsCreateWithoutEventInput, UsersOnEventsUncheckedCreateWithoutEventInput>
  }

  export type UsersOnEventsCreateManyEventInputEnvelope = {
    data: Enumerable<UsersOnEventsCreateManyEventInput>
    skipDuplicates?: boolean
  }

  export type UsersOnEventsCreateWithoutWaitlistEventInput = {
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutEventsInput
    event: EventCreateNestedOneWithoutUsersInput
    visitedEvent?: EventCreateNestedOneWithoutVisitedUsersInput
  }

  export type UsersOnEventsUncheckedCreateWithoutWaitlistEventInput = {
    userId: string
    eventId: string
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    visitedEventId?: string | null
  }

  export type UsersOnEventsCreateOrConnectWithoutWaitlistEventInput = {
    where: UsersOnEventsWhereUniqueInput
    create: XOR<UsersOnEventsCreateWithoutWaitlistEventInput, UsersOnEventsUncheckedCreateWithoutWaitlistEventInput>
  }

  export type UsersOnEventsCreateManyWaitlistEventInputEnvelope = {
    data: Enumerable<UsersOnEventsCreateManyWaitlistEventInput>
    skipDuplicates?: boolean
  }

  export type UsersOnEventsCreateWithoutVisitedEventInput = {
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutEventsInput
    event: EventCreateNestedOneWithoutUsersInput
    waitlistEvent?: EventCreateNestedOneWithoutWaitlistInput
  }

  export type UsersOnEventsUncheckedCreateWithoutVisitedEventInput = {
    userId: string
    eventId: string
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    waitlistEventId?: string | null
  }

  export type UsersOnEventsCreateOrConnectWithoutVisitedEventInput = {
    where: UsersOnEventsWhereUniqueInput
    create: XOR<UsersOnEventsCreateWithoutVisitedEventInput, UsersOnEventsUncheckedCreateWithoutVisitedEventInput>
  }

  export type UsersOnEventsCreateManyVisitedEventInputEnvelope = {
    data: Enumerable<UsersOnEventsCreateManyVisitedEventInput>
    skipDuplicates?: boolean
  }

  export type PredefinedEventUpsertWithoutEventsInput = {
    update: XOR<PredefinedEventUpdateWithoutEventsInput, PredefinedEventUncheckedUpdateWithoutEventsInput>
    create: XOR<PredefinedEventCreateWithoutEventsInput, PredefinedEventUncheckedCreateWithoutEventsInput>
  }

  export type PredefinedEventUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courses?: PredefinedEventOnCoursesUpdateManyWithoutPredefinedEventNestedInput
  }

  export type PredefinedEventUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courses?: PredefinedEventOnCoursesUncheckedUpdateManyWithoutPredefinedEventNestedInput
  }

  export type UsersOnEventsUpsertWithWhereUniqueWithoutEventInput = {
    where: UsersOnEventsWhereUniqueInput
    update: XOR<UsersOnEventsUpdateWithoutEventInput, UsersOnEventsUncheckedUpdateWithoutEventInput>
    create: XOR<UsersOnEventsCreateWithoutEventInput, UsersOnEventsUncheckedCreateWithoutEventInput>
  }

  export type UsersOnEventsUpdateWithWhereUniqueWithoutEventInput = {
    where: UsersOnEventsWhereUniqueInput
    data: XOR<UsersOnEventsUpdateWithoutEventInput, UsersOnEventsUncheckedUpdateWithoutEventInput>
  }

  export type UsersOnEventsUpdateManyWithWhereWithoutEventInput = {
    where: UsersOnEventsScalarWhereInput
    data: XOR<UsersOnEventsUpdateManyMutationInput, UsersOnEventsUncheckedUpdateManyWithoutUsersInput>
  }

  export type UsersOnEventsUpsertWithWhereUniqueWithoutWaitlistEventInput = {
    where: UsersOnEventsWhereUniqueInput
    update: XOR<UsersOnEventsUpdateWithoutWaitlistEventInput, UsersOnEventsUncheckedUpdateWithoutWaitlistEventInput>
    create: XOR<UsersOnEventsCreateWithoutWaitlistEventInput, UsersOnEventsUncheckedCreateWithoutWaitlistEventInput>
  }

  export type UsersOnEventsUpdateWithWhereUniqueWithoutWaitlistEventInput = {
    where: UsersOnEventsWhereUniqueInput
    data: XOR<UsersOnEventsUpdateWithoutWaitlistEventInput, UsersOnEventsUncheckedUpdateWithoutWaitlistEventInput>
  }

  export type UsersOnEventsUpdateManyWithWhereWithoutWaitlistEventInput = {
    where: UsersOnEventsScalarWhereInput
    data: XOR<UsersOnEventsUpdateManyMutationInput, UsersOnEventsUncheckedUpdateManyWithoutWaitlistInput>
  }

  export type UsersOnEventsUpsertWithWhereUniqueWithoutVisitedEventInput = {
    where: UsersOnEventsWhereUniqueInput
    update: XOR<UsersOnEventsUpdateWithoutVisitedEventInput, UsersOnEventsUncheckedUpdateWithoutVisitedEventInput>
    create: XOR<UsersOnEventsCreateWithoutVisitedEventInput, UsersOnEventsUncheckedCreateWithoutVisitedEventInput>
  }

  export type UsersOnEventsUpdateWithWhereUniqueWithoutVisitedEventInput = {
    where: UsersOnEventsWhereUniqueInput
    data: XOR<UsersOnEventsUpdateWithoutVisitedEventInput, UsersOnEventsUncheckedUpdateWithoutVisitedEventInput>
  }

  export type UsersOnEventsUpdateManyWithWhereWithoutVisitedEventInput = {
    where: UsersOnEventsScalarWhereInput
    data: XOR<UsersOnEventsUpdateManyMutationInput, UsersOnEventsUncheckedUpdateManyWithoutVisitedUsersInput>
  }

  export type UserCreateWithoutEventsInput = {
    id?: string
    email: string
    password: string
    role?: Role
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    birthDate?: Date | string | null
    address?: string | null
    zipCode?: string | null
    city?: string | null
    idNumber?: string | null
    idIssueDate?: Date | string | null
    profilePicturePath?: string | null
    isInClub?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isCalendarEnable?: boolean
    calendarBlockingDeadline?: Date | string | null
    receiveEmailsOnNewEvent?: boolean
    payments?: PaymentCreateNestedManyWithoutUserInput
    chats?: ChatsOnUsersCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutSenderInput
    course?: CourseCreateNestedOneWithoutStudentsInput
    passwordRecoveryToken?: PasswordRecoveryTokenCreateNestedOneWithoutUserInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutUserInput
    WebPushSubscription?: WebPushSubscriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEventsInput = {
    id?: string
    email: string
    password: string
    role?: Role
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    birthDate?: Date | string | null
    address?: string | null
    zipCode?: string | null
    city?: string | null
    idNumber?: string | null
    idIssueDate?: Date | string | null
    profilePicturePath?: string | null
    isInClub?: boolean
    courseId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isCalendarEnable?: boolean
    calendarBlockingDeadline?: Date | string | null
    receiveEmailsOnNewEvent?: boolean
    payments?: PaymentUncheckedCreateNestedManyWithoutUserInput
    chats?: ChatsOnUsersUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    passwordRecoveryToken?: PasswordRecoveryTokenUncheckedCreateNestedOneWithoutUserInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutUserInput
    WebPushSubscription?: WebPushSubscriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEventsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEventsInput, UserUncheckedCreateWithoutEventsInput>
  }

  export type EventCreateWithoutUsersInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    totalSlots: number
    description?: string | null
    title?: string | null
    isClub?: boolean
    isHidden?: boolean
    enableBooking?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    color?: string | null
    recurrenceRule?: string | null
    recurrenceEnd?: Date | string | null
    predefinedEvent?: PredefinedEventCreateNestedOneWithoutEventsInput
    waitlist?: UsersOnEventsCreateNestedManyWithoutWaitlistEventInput
    visitedUsers?: UsersOnEventsCreateNestedManyWithoutVisitedEventInput
  }

  export type EventUncheckedCreateWithoutUsersInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    totalSlots: number
    description?: string | null
    predefinedEventId?: string | null
    title?: string | null
    isClub?: boolean
    isHidden?: boolean
    enableBooking?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    color?: string | null
    recurrenceRule?: string | null
    recurrenceEnd?: Date | string | null
    waitlist?: UsersOnEventsUncheckedCreateNestedManyWithoutWaitlistEventInput
    visitedUsers?: UsersOnEventsUncheckedCreateNestedManyWithoutVisitedEventInput
  }

  export type EventCreateOrConnectWithoutUsersInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutUsersInput, EventUncheckedCreateWithoutUsersInput>
  }

  export type EventCreateWithoutWaitlistInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    totalSlots: number
    description?: string | null
    title?: string | null
    isClub?: boolean
    isHidden?: boolean
    enableBooking?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    color?: string | null
    recurrenceRule?: string | null
    recurrenceEnd?: Date | string | null
    predefinedEvent?: PredefinedEventCreateNestedOneWithoutEventsInput
    users?: UsersOnEventsCreateNestedManyWithoutEventInput
    visitedUsers?: UsersOnEventsCreateNestedManyWithoutVisitedEventInput
  }

  export type EventUncheckedCreateWithoutWaitlistInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    totalSlots: number
    description?: string | null
    predefinedEventId?: string | null
    title?: string | null
    isClub?: boolean
    isHidden?: boolean
    enableBooking?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    color?: string | null
    recurrenceRule?: string | null
    recurrenceEnd?: Date | string | null
    users?: UsersOnEventsUncheckedCreateNestedManyWithoutEventInput
    visitedUsers?: UsersOnEventsUncheckedCreateNestedManyWithoutVisitedEventInput
  }

  export type EventCreateOrConnectWithoutWaitlistInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutWaitlistInput, EventUncheckedCreateWithoutWaitlistInput>
  }

  export type EventCreateWithoutVisitedUsersInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    totalSlots: number
    description?: string | null
    title?: string | null
    isClub?: boolean
    isHidden?: boolean
    enableBooking?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    color?: string | null
    recurrenceRule?: string | null
    recurrenceEnd?: Date | string | null
    predefinedEvent?: PredefinedEventCreateNestedOneWithoutEventsInput
    users?: UsersOnEventsCreateNestedManyWithoutEventInput
    waitlist?: UsersOnEventsCreateNestedManyWithoutWaitlistEventInput
  }

  export type EventUncheckedCreateWithoutVisitedUsersInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    totalSlots: number
    description?: string | null
    predefinedEventId?: string | null
    title?: string | null
    isClub?: boolean
    isHidden?: boolean
    enableBooking?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    color?: string | null
    recurrenceRule?: string | null
    recurrenceEnd?: Date | string | null
    users?: UsersOnEventsUncheckedCreateNestedManyWithoutEventInput
    waitlist?: UsersOnEventsUncheckedCreateNestedManyWithoutWaitlistEventInput
  }

  export type EventCreateOrConnectWithoutVisitedUsersInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutVisitedUsersInput, EventUncheckedCreateWithoutVisitedUsersInput>
  }

  export type UserUpsertWithoutEventsInput = {
    update: XOR<UserUpdateWithoutEventsInput, UserUncheckedUpdateWithoutEventsInput>
    create: XOR<UserCreateWithoutEventsInput, UserUncheckedCreateWithoutEventsInput>
  }

  export type UserUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idIssueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profilePicturePath?: NullableStringFieldUpdateOperationsInput | string | null
    isInClub?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCalendarEnable?: BoolFieldUpdateOperationsInput | boolean
    calendarBlockingDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receiveEmailsOnNewEvent?: BoolFieldUpdateOperationsInput | boolean
    payments?: PaymentUpdateManyWithoutUserNestedInput
    chats?: ChatsOnUsersUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
    course?: CourseUpdateOneWithoutStudentsNestedInput
    passwordRecoveryToken?: PasswordRecoveryTokenUpdateOneWithoutUserNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutUserNestedInput
    WebPushSubscription?: WebPushSubscriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idIssueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profilePicturePath?: NullableStringFieldUpdateOperationsInput | string | null
    isInClub?: BoolFieldUpdateOperationsInput | boolean
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCalendarEnable?: BoolFieldUpdateOperationsInput | boolean
    calendarBlockingDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receiveEmailsOnNewEvent?: BoolFieldUpdateOperationsInput | boolean
    payments?: PaymentUncheckedUpdateManyWithoutUserNestedInput
    chats?: ChatsOnUsersUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    passwordRecoveryToken?: PasswordRecoveryTokenUncheckedUpdateOneWithoutUserNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutUserNestedInput
    WebPushSubscription?: WebPushSubscriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EventUpsertWithoutUsersInput = {
    update: XOR<EventUpdateWithoutUsersInput, EventUncheckedUpdateWithoutUsersInput>
    create: XOR<EventCreateWithoutUsersInput, EventUncheckedCreateWithoutUsersInput>
  }

  export type EventUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSlots?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    isClub?: BoolFieldUpdateOperationsInput | boolean
    isHidden?: BoolFieldUpdateOperationsInput | boolean
    enableBooking?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceRule?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    predefinedEvent?: PredefinedEventUpdateOneWithoutEventsNestedInput
    waitlist?: UsersOnEventsUpdateManyWithoutWaitlistEventNestedInput
    visitedUsers?: UsersOnEventsUpdateManyWithoutVisitedEventNestedInput
  }

  export type EventUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSlots?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    predefinedEventId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    isClub?: BoolFieldUpdateOperationsInput | boolean
    isHidden?: BoolFieldUpdateOperationsInput | boolean
    enableBooking?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceRule?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    waitlist?: UsersOnEventsUncheckedUpdateManyWithoutWaitlistEventNestedInput
    visitedUsers?: UsersOnEventsUncheckedUpdateManyWithoutVisitedEventNestedInput
  }

  export type EventUpsertWithoutWaitlistInput = {
    update: XOR<EventUpdateWithoutWaitlistInput, EventUncheckedUpdateWithoutWaitlistInput>
    create: XOR<EventCreateWithoutWaitlistInput, EventUncheckedCreateWithoutWaitlistInput>
  }

  export type EventUpdateWithoutWaitlistInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSlots?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    isClub?: BoolFieldUpdateOperationsInput | boolean
    isHidden?: BoolFieldUpdateOperationsInput | boolean
    enableBooking?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceRule?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    predefinedEvent?: PredefinedEventUpdateOneWithoutEventsNestedInput
    users?: UsersOnEventsUpdateManyWithoutEventNestedInput
    visitedUsers?: UsersOnEventsUpdateManyWithoutVisitedEventNestedInput
  }

  export type EventUncheckedUpdateWithoutWaitlistInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSlots?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    predefinedEventId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    isClub?: BoolFieldUpdateOperationsInput | boolean
    isHidden?: BoolFieldUpdateOperationsInput | boolean
    enableBooking?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceRule?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UsersOnEventsUncheckedUpdateManyWithoutEventNestedInput
    visitedUsers?: UsersOnEventsUncheckedUpdateManyWithoutVisitedEventNestedInput
  }

  export type EventUpsertWithoutVisitedUsersInput = {
    update: XOR<EventUpdateWithoutVisitedUsersInput, EventUncheckedUpdateWithoutVisitedUsersInput>
    create: XOR<EventCreateWithoutVisitedUsersInput, EventUncheckedCreateWithoutVisitedUsersInput>
  }

  export type EventUpdateWithoutVisitedUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSlots?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    isClub?: BoolFieldUpdateOperationsInput | boolean
    isHidden?: BoolFieldUpdateOperationsInput | boolean
    enableBooking?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceRule?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    predefinedEvent?: PredefinedEventUpdateOneWithoutEventsNestedInput
    users?: UsersOnEventsUpdateManyWithoutEventNestedInput
    waitlist?: UsersOnEventsUpdateManyWithoutWaitlistEventNestedInput
  }

  export type EventUncheckedUpdateWithoutVisitedUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSlots?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    predefinedEventId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    isClub?: BoolFieldUpdateOperationsInput | boolean
    isHidden?: BoolFieldUpdateOperationsInput | boolean
    enableBooking?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceRule?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UsersOnEventsUncheckedUpdateManyWithoutEventNestedInput
    waitlist?: UsersOnEventsUncheckedUpdateManyWithoutWaitlistEventNestedInput
  }

  export type ChatsOnUsersCreateWithoutChatInput = {
    lastSeenAt?: Date | string
    user: UserCreateNestedOneWithoutChatsInput
  }

  export type ChatsOnUsersUncheckedCreateWithoutChatInput = {
    userId: string
    lastSeenAt?: Date | string
  }

  export type ChatsOnUsersCreateOrConnectWithoutChatInput = {
    where: ChatsOnUsersWhereUniqueInput
    create: XOR<ChatsOnUsersCreateWithoutChatInput, ChatsOnUsersUncheckedCreateWithoutChatInput>
  }

  export type ChatsOnUsersCreateManyChatInputEnvelope = {
    data: Enumerable<ChatsOnUsersCreateManyChatInput>
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutChatInput = {
    id?: string
    content: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sender: UserCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutChatInput = {
    id?: string
    content: string
    deletedAt?: Date | string | null
    senderId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageCreateOrConnectWithoutChatInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutChatInput, MessageUncheckedCreateWithoutChatInput>
  }

  export type MessageCreateManyChatInputEnvelope = {
    data: Enumerable<MessageCreateManyChatInput>
    skipDuplicates?: boolean
  }

  export type ChatsOnUsersUpsertWithWhereUniqueWithoutChatInput = {
    where: ChatsOnUsersWhereUniqueInput
    update: XOR<ChatsOnUsersUpdateWithoutChatInput, ChatsOnUsersUncheckedUpdateWithoutChatInput>
    create: XOR<ChatsOnUsersCreateWithoutChatInput, ChatsOnUsersUncheckedCreateWithoutChatInput>
  }

  export type ChatsOnUsersUpdateWithWhereUniqueWithoutChatInput = {
    where: ChatsOnUsersWhereUniqueInput
    data: XOR<ChatsOnUsersUpdateWithoutChatInput, ChatsOnUsersUncheckedUpdateWithoutChatInput>
  }

  export type ChatsOnUsersUpdateManyWithWhereWithoutChatInput = {
    where: ChatsOnUsersScalarWhereInput
    data: XOR<ChatsOnUsersUpdateManyMutationInput, ChatsOnUsersUncheckedUpdateManyWithoutUsersInput>
  }

  export type MessageUpsertWithWhereUniqueWithoutChatInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutChatInput, MessageUncheckedUpdateWithoutChatInput>
    create: XOR<MessageCreateWithoutChatInput, MessageUncheckedCreateWithoutChatInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutChatInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutChatInput, MessageUncheckedUpdateWithoutChatInput>
  }

  export type MessageUpdateManyWithWhereWithoutChatInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutMessagesInput>
  }

  export type ChatCreateWithoutUsersInput = {
    id?: string
    name?: string | null
    pictureS3Key?: string | null
    isGroup: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessageCreateNestedManyWithoutChatInput
  }

  export type ChatUncheckedCreateWithoutUsersInput = {
    id?: string
    name?: string | null
    pictureS3Key?: string | null
    isGroup: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessageUncheckedCreateNestedManyWithoutChatInput
  }

  export type ChatCreateOrConnectWithoutUsersInput = {
    where: ChatWhereUniqueInput
    create: XOR<ChatCreateWithoutUsersInput, ChatUncheckedCreateWithoutUsersInput>
  }

  export type UserCreateWithoutChatsInput = {
    id?: string
    email: string
    password: string
    role?: Role
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    birthDate?: Date | string | null
    address?: string | null
    zipCode?: string | null
    city?: string | null
    idNumber?: string | null
    idIssueDate?: Date | string | null
    profilePicturePath?: string | null
    isInClub?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isCalendarEnable?: boolean
    calendarBlockingDeadline?: Date | string | null
    receiveEmailsOnNewEvent?: boolean
    payments?: PaymentCreateNestedManyWithoutUserInput
    events?: UsersOnEventsCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutSenderInput
    course?: CourseCreateNestedOneWithoutStudentsInput
    passwordRecoveryToken?: PasswordRecoveryTokenCreateNestedOneWithoutUserInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutUserInput
    WebPushSubscription?: WebPushSubscriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutChatsInput = {
    id?: string
    email: string
    password: string
    role?: Role
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    birthDate?: Date | string | null
    address?: string | null
    zipCode?: string | null
    city?: string | null
    idNumber?: string | null
    idIssueDate?: Date | string | null
    profilePicturePath?: string | null
    isInClub?: boolean
    courseId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isCalendarEnable?: boolean
    calendarBlockingDeadline?: Date | string | null
    receiveEmailsOnNewEvent?: boolean
    payments?: PaymentUncheckedCreateNestedManyWithoutUserInput
    events?: UsersOnEventsUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    passwordRecoveryToken?: PasswordRecoveryTokenUncheckedCreateNestedOneWithoutUserInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutUserInput
    WebPushSubscription?: WebPushSubscriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutChatsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChatsInput, UserUncheckedCreateWithoutChatsInput>
  }

  export type ChatUpsertWithoutUsersInput = {
    update: XOR<ChatUpdateWithoutUsersInput, ChatUncheckedUpdateWithoutUsersInput>
    create: XOR<ChatCreateWithoutUsersInput, ChatUncheckedCreateWithoutUsersInput>
  }

  export type ChatUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    pictureS3Key?: NullableStringFieldUpdateOperationsInput | string | null
    isGroup?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUpdateManyWithoutChatNestedInput
  }

  export type ChatUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    pictureS3Key?: NullableStringFieldUpdateOperationsInput | string | null
    isGroup?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUncheckedUpdateManyWithoutChatNestedInput
  }

  export type UserUpsertWithoutChatsInput = {
    update: XOR<UserUpdateWithoutChatsInput, UserUncheckedUpdateWithoutChatsInput>
    create: XOR<UserCreateWithoutChatsInput, UserUncheckedCreateWithoutChatsInput>
  }

  export type UserUpdateWithoutChatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idIssueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profilePicturePath?: NullableStringFieldUpdateOperationsInput | string | null
    isInClub?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCalendarEnable?: BoolFieldUpdateOperationsInput | boolean
    calendarBlockingDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receiveEmailsOnNewEvent?: BoolFieldUpdateOperationsInput | boolean
    payments?: PaymentUpdateManyWithoutUserNestedInput
    events?: UsersOnEventsUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
    course?: CourseUpdateOneWithoutStudentsNestedInput
    passwordRecoveryToken?: PasswordRecoveryTokenUpdateOneWithoutUserNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutUserNestedInput
    WebPushSubscription?: WebPushSubscriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutChatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idIssueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profilePicturePath?: NullableStringFieldUpdateOperationsInput | string | null
    isInClub?: BoolFieldUpdateOperationsInput | boolean
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCalendarEnable?: BoolFieldUpdateOperationsInput | boolean
    calendarBlockingDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receiveEmailsOnNewEvent?: BoolFieldUpdateOperationsInput | boolean
    payments?: PaymentUncheckedUpdateManyWithoutUserNestedInput
    events?: UsersOnEventsUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    passwordRecoveryToken?: PasswordRecoveryTokenUncheckedUpdateOneWithoutUserNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutUserNestedInput
    WebPushSubscription?: WebPushSubscriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutMessagesInput = {
    id?: string
    email: string
    password: string
    role?: Role
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    birthDate?: Date | string | null
    address?: string | null
    zipCode?: string | null
    city?: string | null
    idNumber?: string | null
    idIssueDate?: Date | string | null
    profilePicturePath?: string | null
    isInClub?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isCalendarEnable?: boolean
    calendarBlockingDeadline?: Date | string | null
    receiveEmailsOnNewEvent?: boolean
    payments?: PaymentCreateNestedManyWithoutUserInput
    chats?: ChatsOnUsersCreateNestedManyWithoutUserInput
    events?: UsersOnEventsCreateNestedManyWithoutUserInput
    course?: CourseCreateNestedOneWithoutStudentsInput
    passwordRecoveryToken?: PasswordRecoveryTokenCreateNestedOneWithoutUserInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutUserInput
    WebPushSubscription?: WebPushSubscriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMessagesInput = {
    id?: string
    email: string
    password: string
    role?: Role
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    birthDate?: Date | string | null
    address?: string | null
    zipCode?: string | null
    city?: string | null
    idNumber?: string | null
    idIssueDate?: Date | string | null
    profilePicturePath?: string | null
    isInClub?: boolean
    courseId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isCalendarEnable?: boolean
    calendarBlockingDeadline?: Date | string | null
    receiveEmailsOnNewEvent?: boolean
    payments?: PaymentUncheckedCreateNestedManyWithoutUserInput
    chats?: ChatsOnUsersUncheckedCreateNestedManyWithoutUserInput
    events?: UsersOnEventsUncheckedCreateNestedManyWithoutUserInput
    passwordRecoveryToken?: PasswordRecoveryTokenUncheckedCreateNestedOneWithoutUserInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutUserInput
    WebPushSubscription?: WebPushSubscriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
  }

  export type ChatCreateWithoutMessagesInput = {
    id?: string
    name?: string | null
    pictureS3Key?: string | null
    isGroup: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: ChatsOnUsersCreateNestedManyWithoutChatInput
  }

  export type ChatUncheckedCreateWithoutMessagesInput = {
    id?: string
    name?: string | null
    pictureS3Key?: string | null
    isGroup: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: ChatsOnUsersUncheckedCreateNestedManyWithoutChatInput
  }

  export type ChatCreateOrConnectWithoutMessagesInput = {
    where: ChatWhereUniqueInput
    create: XOR<ChatCreateWithoutMessagesInput, ChatUncheckedCreateWithoutMessagesInput>
  }

  export type UserUpsertWithoutMessagesInput = {
    update: XOR<UserUpdateWithoutMessagesInput, UserUncheckedUpdateWithoutMessagesInput>
    create: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
  }

  export type UserUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idIssueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profilePicturePath?: NullableStringFieldUpdateOperationsInput | string | null
    isInClub?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCalendarEnable?: BoolFieldUpdateOperationsInput | boolean
    calendarBlockingDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receiveEmailsOnNewEvent?: BoolFieldUpdateOperationsInput | boolean
    payments?: PaymentUpdateManyWithoutUserNestedInput
    chats?: ChatsOnUsersUpdateManyWithoutUserNestedInput
    events?: UsersOnEventsUpdateManyWithoutUserNestedInput
    course?: CourseUpdateOneWithoutStudentsNestedInput
    passwordRecoveryToken?: PasswordRecoveryTokenUpdateOneWithoutUserNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutUserNestedInput
    WebPushSubscription?: WebPushSubscriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idIssueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profilePicturePath?: NullableStringFieldUpdateOperationsInput | string | null
    isInClub?: BoolFieldUpdateOperationsInput | boolean
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCalendarEnable?: BoolFieldUpdateOperationsInput | boolean
    calendarBlockingDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receiveEmailsOnNewEvent?: BoolFieldUpdateOperationsInput | boolean
    payments?: PaymentUncheckedUpdateManyWithoutUserNestedInput
    chats?: ChatsOnUsersUncheckedUpdateManyWithoutUserNestedInput
    events?: UsersOnEventsUncheckedUpdateManyWithoutUserNestedInput
    passwordRecoveryToken?: PasswordRecoveryTokenUncheckedUpdateOneWithoutUserNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutUserNestedInput
    WebPushSubscription?: WebPushSubscriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ChatUpsertWithoutMessagesInput = {
    update: XOR<ChatUpdateWithoutMessagesInput, ChatUncheckedUpdateWithoutMessagesInput>
    create: XOR<ChatCreateWithoutMessagesInput, ChatUncheckedCreateWithoutMessagesInput>
  }

  export type ChatUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    pictureS3Key?: NullableStringFieldUpdateOperationsInput | string | null
    isGroup?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: ChatsOnUsersUpdateManyWithoutChatNestedInput
  }

  export type ChatUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    pictureS3Key?: NullableStringFieldUpdateOperationsInput | string | null
    isGroup?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: ChatsOnUsersUncheckedUpdateManyWithoutChatNestedInput
  }

  export type QuizCreateWithoutCoursesInput = {
    id?: string
    name: string
    nQuestionsPerAttempt?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    questions?: QuestionCreateNestedManyWithoutQuizInput
  }

  export type QuizUncheckedCreateWithoutCoursesInput = {
    id?: string
    name: string
    nQuestionsPerAttempt?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    questions?: QuestionUncheckedCreateNestedManyWithoutQuizInput
  }

  export type QuizCreateOrConnectWithoutCoursesInput = {
    where: QuizWhereUniqueInput
    create: XOR<QuizCreateWithoutCoursesInput, QuizUncheckedCreateWithoutCoursesInput>
  }

  export type CourseCreateWithoutQuizzesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    folders?: FolderCreateNestedManyWithoutCourseInput
    files?: FileCreateNestedManyWithoutCourseInput
    videos?: VideosOnCoursesCreateNestedManyWithoutCourseInput
    students?: UserCreateNestedManyWithoutCourseInput
    predefinedEvents?: PredefinedEventOnCoursesCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutQuizzesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    folders?: FolderUncheckedCreateNestedManyWithoutCourseInput
    files?: FileUncheckedCreateNestedManyWithoutCourseInput
    videos?: VideosOnCoursesUncheckedCreateNestedManyWithoutCourseInput
    students?: UserUncheckedCreateNestedManyWithoutCourseInput
    predefinedEvents?: PredefinedEventOnCoursesUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutQuizzesInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutQuizzesInput, CourseUncheckedCreateWithoutQuizzesInput>
  }

  export type QuizUpsertWithoutCoursesInput = {
    update: XOR<QuizUpdateWithoutCoursesInput, QuizUncheckedUpdateWithoutCoursesInput>
    create: XOR<QuizCreateWithoutCoursesInput, QuizUncheckedCreateWithoutCoursesInput>
  }

  export type QuizUpdateWithoutCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nQuestionsPerAttempt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUpdateManyWithoutQuizNestedInput
  }

  export type QuizUncheckedUpdateWithoutCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nQuestionsPerAttempt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type CourseUpsertWithoutQuizzesInput = {
    update: XOR<CourseUpdateWithoutQuizzesInput, CourseUncheckedUpdateWithoutQuizzesInput>
    create: XOR<CourseCreateWithoutQuizzesInput, CourseUncheckedCreateWithoutQuizzesInput>
  }

  export type CourseUpdateWithoutQuizzesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    folders?: FolderUpdateManyWithoutCourseNestedInput
    files?: FileUpdateManyWithoutCourseNestedInput
    videos?: VideosOnCoursesUpdateManyWithoutCourseNestedInput
    students?: UserUpdateManyWithoutCourseNestedInput
    predefinedEvents?: PredefinedEventOnCoursesUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutQuizzesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    folders?: FolderUncheckedUpdateManyWithoutCourseNestedInput
    files?: FileUncheckedUpdateManyWithoutCourseNestedInput
    videos?: VideosOnCoursesUncheckedUpdateManyWithoutCourseNestedInput
    students?: UserUncheckedUpdateManyWithoutCourseNestedInput
    predefinedEvents?: PredefinedEventOnCoursesUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type QuizzesOnCourseCreateWithoutQuizInput = {
    course: CourseCreateNestedOneWithoutQuizzesInput
  }

  export type QuizzesOnCourseUncheckedCreateWithoutQuizInput = {
    courseId: string
  }

  export type QuizzesOnCourseCreateOrConnectWithoutQuizInput = {
    where: QuizzesOnCourseWhereUniqueInput
    create: XOR<QuizzesOnCourseCreateWithoutQuizInput, QuizzesOnCourseUncheckedCreateWithoutQuizInput>
  }

  export type QuizzesOnCourseCreateManyQuizInputEnvelope = {
    data: Enumerable<QuizzesOnCourseCreateManyQuizInput>
    skipDuplicates?: boolean
  }

  export type QuestionCreateWithoutQuizInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    answers?: AnswerCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutQuizInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    answers?: AnswerUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutQuizInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutQuizInput, QuestionUncheckedCreateWithoutQuizInput>
  }

  export type QuestionCreateManyQuizInputEnvelope = {
    data: Enumerable<QuestionCreateManyQuizInput>
    skipDuplicates?: boolean
  }

  export type QuizzesOnCourseUpsertWithWhereUniqueWithoutQuizInput = {
    where: QuizzesOnCourseWhereUniqueInput
    update: XOR<QuizzesOnCourseUpdateWithoutQuizInput, QuizzesOnCourseUncheckedUpdateWithoutQuizInput>
    create: XOR<QuizzesOnCourseCreateWithoutQuizInput, QuizzesOnCourseUncheckedCreateWithoutQuizInput>
  }

  export type QuizzesOnCourseUpdateWithWhereUniqueWithoutQuizInput = {
    where: QuizzesOnCourseWhereUniqueInput
    data: XOR<QuizzesOnCourseUpdateWithoutQuizInput, QuizzesOnCourseUncheckedUpdateWithoutQuizInput>
  }

  export type QuizzesOnCourseUpdateManyWithWhereWithoutQuizInput = {
    where: QuizzesOnCourseScalarWhereInput
    data: XOR<QuizzesOnCourseUpdateManyMutationInput, QuizzesOnCourseUncheckedUpdateManyWithoutCoursesInput>
  }

  export type QuestionUpsertWithWhereUniqueWithoutQuizInput = {
    where: QuestionWhereUniqueInput
    update: XOR<QuestionUpdateWithoutQuizInput, QuestionUncheckedUpdateWithoutQuizInput>
    create: XOR<QuestionCreateWithoutQuizInput, QuestionUncheckedCreateWithoutQuizInput>
  }

  export type QuestionUpdateWithWhereUniqueWithoutQuizInput = {
    where: QuestionWhereUniqueInput
    data: XOR<QuestionUpdateWithoutQuizInput, QuestionUncheckedUpdateWithoutQuizInput>
  }

  export type QuestionUpdateManyWithWhereWithoutQuizInput = {
    where: QuestionScalarWhereInput
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyWithoutQuestionsInput>
  }

  export type QuestionScalarWhereInput = {
    AND?: Enumerable<QuestionScalarWhereInput>
    OR?: Enumerable<QuestionScalarWhereInput>
    NOT?: Enumerable<QuestionScalarWhereInput>
    id?: StringFilter | string
    content?: StringFilter | string
    quizId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type AnswerCreateWithoutQuestionInput = {
    id?: string
    content: string
    isCorrect: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AnswerUncheckedCreateWithoutQuestionInput = {
    id?: string
    content: string
    isCorrect: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AnswerCreateOrConnectWithoutQuestionInput = {
    where: AnswerWhereUniqueInput
    create: XOR<AnswerCreateWithoutQuestionInput, AnswerUncheckedCreateWithoutQuestionInput>
  }

  export type AnswerCreateManyQuestionInputEnvelope = {
    data: Enumerable<AnswerCreateManyQuestionInput>
    skipDuplicates?: boolean
  }

  export type QuizCreateWithoutQuestionsInput = {
    id?: string
    name: string
    nQuestionsPerAttempt?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    courses?: QuizzesOnCourseCreateNestedManyWithoutQuizInput
  }

  export type QuizUncheckedCreateWithoutQuestionsInput = {
    id?: string
    name: string
    nQuestionsPerAttempt?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    courses?: QuizzesOnCourseUncheckedCreateNestedManyWithoutQuizInput
  }

  export type QuizCreateOrConnectWithoutQuestionsInput = {
    where: QuizWhereUniqueInput
    create: XOR<QuizCreateWithoutQuestionsInput, QuizUncheckedCreateWithoutQuestionsInput>
  }

  export type AnswerUpsertWithWhereUniqueWithoutQuestionInput = {
    where: AnswerWhereUniqueInput
    update: XOR<AnswerUpdateWithoutQuestionInput, AnswerUncheckedUpdateWithoutQuestionInput>
    create: XOR<AnswerCreateWithoutQuestionInput, AnswerUncheckedCreateWithoutQuestionInput>
  }

  export type AnswerUpdateWithWhereUniqueWithoutQuestionInput = {
    where: AnswerWhereUniqueInput
    data: XOR<AnswerUpdateWithoutQuestionInput, AnswerUncheckedUpdateWithoutQuestionInput>
  }

  export type AnswerUpdateManyWithWhereWithoutQuestionInput = {
    where: AnswerScalarWhereInput
    data: XOR<AnswerUpdateManyMutationInput, AnswerUncheckedUpdateManyWithoutAnswersInput>
  }

  export type AnswerScalarWhereInput = {
    AND?: Enumerable<AnswerScalarWhereInput>
    OR?: Enumerable<AnswerScalarWhereInput>
    NOT?: Enumerable<AnswerScalarWhereInput>
    id?: StringFilter | string
    content?: StringFilter | string
    isCorrect?: BoolFilter | boolean
    questionId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type QuizUpsertWithoutQuestionsInput = {
    update: XOR<QuizUpdateWithoutQuestionsInput, QuizUncheckedUpdateWithoutQuestionsInput>
    create: XOR<QuizCreateWithoutQuestionsInput, QuizUncheckedCreateWithoutQuestionsInput>
  }

  export type QuizUpdateWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nQuestionsPerAttempt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courses?: QuizzesOnCourseUpdateManyWithoutQuizNestedInput
  }

  export type QuizUncheckedUpdateWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nQuestionsPerAttempt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courses?: QuizzesOnCourseUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type QuestionCreateWithoutAnswersInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    quiz: QuizCreateNestedOneWithoutQuestionsInput
  }

  export type QuestionUncheckedCreateWithoutAnswersInput = {
    id?: string
    content: string
    quizId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionCreateOrConnectWithoutAnswersInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutAnswersInput, QuestionUncheckedCreateWithoutAnswersInput>
  }

  export type QuestionUpsertWithoutAnswersInput = {
    update: XOR<QuestionUpdateWithoutAnswersInput, QuestionUncheckedUpdateWithoutAnswersInput>
    create: XOR<QuestionCreateWithoutAnswersInput, QuestionUncheckedCreateWithoutAnswersInput>
  }

  export type QuestionUpdateWithoutAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quiz?: QuizUpdateOneRequiredWithoutQuestionsNestedInput
  }

  export type QuestionUncheckedUpdateWithoutAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    quizId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateManyUserInput = {
    id?: string
    amount: number
    currency: string
    method: PaymentMethod
    type: PaymentType
    description?: string | null
    paidAt: Date | string
    stripePaymentIntentId?: string | null
    woocommerceOrderId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatsOnUsersCreateManyUserInput = {
    chatId: string
    lastSeenAt?: Date | string
  }

  export type UsersOnEventsCreateManyUserInput = {
    eventId: string
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    waitlistEventId?: string | null
    visitedEventId?: string | null
  }

  export type MessageCreateManySenderInput = {
    id?: string
    content: string
    deletedAt?: Date | string | null
    chatId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuizAttemptCreateManyUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WebPushSubscriptionCreateManyUserInput = {
    id?: string
    endpoint: string
    p256dh: string
    auth: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatEnabled?: boolean
    calendarEnabled?: boolean
  }

  export type PaymentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | PaymentMethod
    type?: EnumPaymentTypeFieldUpdateOperationsInput | PaymentType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stripePaymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    woocommerceOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | PaymentMethod
    type?: EnumPaymentTypeFieldUpdateOperationsInput | PaymentType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stripePaymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    woocommerceOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | PaymentMethod
    type?: EnumPaymentTypeFieldUpdateOperationsInput | PaymentType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stripePaymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    woocommerceOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatsOnUsersUpdateWithoutUserInput = {
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chat?: ChatUpdateOneRequiredWithoutUsersNestedInput
  }

  export type ChatsOnUsersUncheckedUpdateWithoutUserInput = {
    chatId?: StringFieldUpdateOperationsInput | string
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatsOnUsersUncheckedUpdateManyWithoutChatsInput = {
    chatId?: StringFieldUpdateOperationsInput | string
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersOnEventsUpdateWithoutUserInput = {
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutUsersNestedInput
    waitlistEvent?: EventUpdateOneWithoutWaitlistNestedInput
    visitedEvent?: EventUpdateOneWithoutVisitedUsersNestedInput
  }

  export type UsersOnEventsUncheckedUpdateWithoutUserInput = {
    eventId?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    waitlistEventId?: NullableStringFieldUpdateOperationsInput | string | null
    visitedEventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsersOnEventsUncheckedUpdateManyWithoutEventsInput = {
    eventId?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    waitlistEventId?: NullableStringFieldUpdateOperationsInput | string | null
    visitedEventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chat?: ChatUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    chatId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    chatId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuizAttemptUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuizAttemptUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuizAttemptUncheckedUpdateManyWithoutQuizAttemptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebPushSubscriptionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    endpoint?: StringFieldUpdateOperationsInput | string
    p256dh?: StringFieldUpdateOperationsInput | string
    auth?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatEnabled?: BoolFieldUpdateOperationsInput | boolean
    calendarEnabled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WebPushSubscriptionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    endpoint?: StringFieldUpdateOperationsInput | string
    p256dh?: StringFieldUpdateOperationsInput | string
    auth?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatEnabled?: BoolFieldUpdateOperationsInput | boolean
    calendarEnabled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WebPushSubscriptionUncheckedUpdateManyWithoutWebPushSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    endpoint?: StringFieldUpdateOperationsInput | string
    p256dh?: StringFieldUpdateOperationsInput | string
    auth?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatEnabled?: BoolFieldUpdateOperationsInput | boolean
    calendarEnabled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VideosOnCoursesCreateManyVideoInput = {
    courseId: string
  }

  export type VideosOnCoursesUpdateWithoutVideoInput = {
    course?: CourseUpdateOneRequiredWithoutVideosNestedInput
  }

  export type VideosOnCoursesUncheckedUpdateWithoutVideoInput = {
    courseId?: StringFieldUpdateOperationsInput | string
  }

  export type VideosOnCoursesUncheckedUpdateManyWithoutCoursesInput = {
    courseId?: StringFieldUpdateOperationsInput | string
  }

  export type FileCreateManyFolderInput = {
    id?: string
    name: string
    s3Key: string
    contentType: string
    courseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FolderCreateManyParentInput = {
    id?: string
    name: string
    isRoot?: boolean
    courseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileUpdateWithoutFolderInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    s3Key?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Course?: CourseUpdateOneRequiredWithoutFilesNestedInput
  }

  export type FileUncheckedUpdateWithoutFolderInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    s3Key?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUncheckedUpdateManyWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    s3Key?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FolderUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isRoot?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: FileUpdateManyWithoutFolderNestedInput
    folders?: FolderUpdateManyWithoutParentNestedInput
    course?: CourseUpdateOneRequiredWithoutFoldersNestedInput
  }

  export type FolderUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isRoot?: BoolFieldUpdateOperationsInput | boolean
    courseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: FileUncheckedUpdateManyWithoutFolderNestedInput
    folders?: FolderUncheckedUpdateManyWithoutParentNestedInput
  }

  export type FolderUncheckedUpdateManyWithoutFoldersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isRoot?: BoolFieldUpdateOperationsInput | boolean
    courseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FolderCreateManyCourseInput = {
    id?: string
    name: string
    parentId?: string | null
    isRoot?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileCreateManyCourseInput = {
    id?: string
    name: string
    s3Key: string
    contentType: string
    folderId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VideosOnCoursesCreateManyCourseInput = {
    videoId: string
  }

  export type UserCreateManyCourseInput = {
    id?: string
    email: string
    password: string
    role?: Role
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    birthDate?: Date | string | null
    address?: string | null
    zipCode?: string | null
    city?: string | null
    idNumber?: string | null
    idIssueDate?: Date | string | null
    profilePicturePath?: string | null
    isInClub?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isCalendarEnable?: boolean
    calendarBlockingDeadline?: Date | string | null
    receiveEmailsOnNewEvent?: boolean
  }

  export type QuizzesOnCourseCreateManyCourseInput = {
    quizId: string
  }

  export type PredefinedEventOnCoursesCreateManyCourseInput = {
    predefinedEventId: string
  }

  export type FolderUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isRoot?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: FileUpdateManyWithoutFolderNestedInput
    folders?: FolderUpdateManyWithoutParentNestedInput
    parent?: FolderUpdateOneWithoutFoldersNestedInput
  }

  export type FolderUncheckedUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isRoot?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: FileUncheckedUpdateManyWithoutFolderNestedInput
    folders?: FolderUncheckedUpdateManyWithoutParentNestedInput
  }

  export type FileUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    s3Key?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    folder?: FolderUpdateOneRequiredWithoutFilesNestedInput
  }

  export type FileUncheckedUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    s3Key?: StringFieldUpdateOperationsInput | string
    contentType?: StringFieldUpdateOperationsInput | string
    folderId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VideosOnCoursesUpdateWithoutCourseInput = {
    video?: VideoUpdateOneRequiredWithoutCoursesNestedInput
  }

  export type VideosOnCoursesUncheckedUpdateWithoutCourseInput = {
    videoId?: StringFieldUpdateOperationsInput | string
  }

  export type VideosOnCoursesUncheckedUpdateManyWithoutVideosInput = {
    videoId?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idIssueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profilePicturePath?: NullableStringFieldUpdateOperationsInput | string | null
    isInClub?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCalendarEnable?: BoolFieldUpdateOperationsInput | boolean
    calendarBlockingDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receiveEmailsOnNewEvent?: BoolFieldUpdateOperationsInput | boolean
    payments?: PaymentUpdateManyWithoutUserNestedInput
    chats?: ChatsOnUsersUpdateManyWithoutUserNestedInput
    events?: UsersOnEventsUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
    passwordRecoveryToken?: PasswordRecoveryTokenUpdateOneWithoutUserNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutUserNestedInput
    WebPushSubscription?: WebPushSubscriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idIssueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profilePicturePath?: NullableStringFieldUpdateOperationsInput | string | null
    isInClub?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCalendarEnable?: BoolFieldUpdateOperationsInput | boolean
    calendarBlockingDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receiveEmailsOnNewEvent?: BoolFieldUpdateOperationsInput | boolean
    payments?: PaymentUncheckedUpdateManyWithoutUserNestedInput
    chats?: ChatsOnUsersUncheckedUpdateManyWithoutUserNestedInput
    events?: UsersOnEventsUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    passwordRecoveryToken?: PasswordRecoveryTokenUncheckedUpdateOneWithoutUserNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutUserNestedInput
    WebPushSubscription?: WebPushSubscriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idIssueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profilePicturePath?: NullableStringFieldUpdateOperationsInput | string | null
    isInClub?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCalendarEnable?: BoolFieldUpdateOperationsInput | boolean
    calendarBlockingDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receiveEmailsOnNewEvent?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuizzesOnCourseUpdateWithoutCourseInput = {
    quiz?: QuizUpdateOneRequiredWithoutCoursesNestedInput
  }

  export type QuizzesOnCourseUncheckedUpdateWithoutCourseInput = {
    quizId?: StringFieldUpdateOperationsInput | string
  }

  export type QuizzesOnCourseUncheckedUpdateManyWithoutQuizzesInput = {
    quizId?: StringFieldUpdateOperationsInput | string
  }

  export type PredefinedEventOnCoursesUpdateWithoutCourseInput = {
    predefinedEvent?: PredefinedEventUpdateOneRequiredWithoutCoursesNestedInput
  }

  export type PredefinedEventOnCoursesUncheckedUpdateWithoutCourseInput = {
    predefinedEventId?: StringFieldUpdateOperationsInput | string
  }

  export type PredefinedEventOnCoursesUncheckedUpdateManyWithoutPredefinedEventsInput = {
    predefinedEventId?: StringFieldUpdateOperationsInput | string
  }

  export type EventCreateManyPredefinedEventInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    totalSlots: number
    description?: string | null
    title?: string | null
    isClub?: boolean
    isHidden?: boolean
    enableBooking?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    color?: string | null
    recurrenceRule?: string | null
    recurrenceEnd?: Date | string | null
  }

  export type PredefinedEventOnCoursesCreateManyPredefinedEventInput = {
    courseId: string
  }

  export type EventUpdateWithoutPredefinedEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSlots?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    isClub?: BoolFieldUpdateOperationsInput | boolean
    isHidden?: BoolFieldUpdateOperationsInput | boolean
    enableBooking?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceRule?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UsersOnEventsUpdateManyWithoutEventNestedInput
    waitlist?: UsersOnEventsUpdateManyWithoutWaitlistEventNestedInput
    visitedUsers?: UsersOnEventsUpdateManyWithoutVisitedEventNestedInput
  }

  export type EventUncheckedUpdateWithoutPredefinedEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSlots?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    isClub?: BoolFieldUpdateOperationsInput | boolean
    isHidden?: BoolFieldUpdateOperationsInput | boolean
    enableBooking?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceRule?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UsersOnEventsUncheckedUpdateManyWithoutEventNestedInput
    waitlist?: UsersOnEventsUncheckedUpdateManyWithoutWaitlistEventNestedInput
    visitedUsers?: UsersOnEventsUncheckedUpdateManyWithoutVisitedEventNestedInput
  }

  export type EventUncheckedUpdateManyWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSlots?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    isClub?: BoolFieldUpdateOperationsInput | boolean
    isHidden?: BoolFieldUpdateOperationsInput | boolean
    enableBooking?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceRule?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PredefinedEventOnCoursesUpdateWithoutPredefinedEventInput = {
    course?: CourseUpdateOneRequiredWithoutPredefinedEventsNestedInput
  }

  export type PredefinedEventOnCoursesUncheckedUpdateWithoutPredefinedEventInput = {
    courseId?: StringFieldUpdateOperationsInput | string
  }

  export type PredefinedEventOnCoursesUncheckedUpdateManyWithoutCoursesInput = {
    courseId?: StringFieldUpdateOperationsInput | string
  }

  export type UsersOnEventsCreateManyEventInput = {
    userId: string
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    waitlistEventId?: string | null
    visitedEventId?: string | null
  }

  export type UsersOnEventsCreateManyWaitlistEventInput = {
    userId: string
    eventId: string
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    visitedEventId?: string | null
  }

  export type UsersOnEventsCreateManyVisitedEventInput = {
    userId: string
    eventId: string
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    waitlistEventId?: string | null
  }

  export type UsersOnEventsUpdateWithoutEventInput = {
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutEventsNestedInput
    waitlistEvent?: EventUpdateOneWithoutWaitlistNestedInput
    visitedEvent?: EventUpdateOneWithoutVisitedUsersNestedInput
  }

  export type UsersOnEventsUncheckedUpdateWithoutEventInput = {
    userId?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    waitlistEventId?: NullableStringFieldUpdateOperationsInput | string | null
    visitedEventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsersOnEventsUncheckedUpdateManyWithoutUsersInput = {
    userId?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    waitlistEventId?: NullableStringFieldUpdateOperationsInput | string | null
    visitedEventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsersOnEventsUpdateWithoutWaitlistEventInput = {
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutEventsNestedInput
    event?: EventUpdateOneRequiredWithoutUsersNestedInput
    visitedEvent?: EventUpdateOneWithoutVisitedUsersNestedInput
  }

  export type UsersOnEventsUncheckedUpdateWithoutWaitlistEventInput = {
    userId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visitedEventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsersOnEventsUncheckedUpdateManyWithoutWaitlistInput = {
    userId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visitedEventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsersOnEventsUpdateWithoutVisitedEventInput = {
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutEventsNestedInput
    event?: EventUpdateOneRequiredWithoutUsersNestedInput
    waitlistEvent?: EventUpdateOneWithoutWaitlistNestedInput
  }

  export type UsersOnEventsUncheckedUpdateWithoutVisitedEventInput = {
    userId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    waitlistEventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsersOnEventsUncheckedUpdateManyWithoutVisitedUsersInput = {
    userId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    waitlistEventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChatsOnUsersCreateManyChatInput = {
    userId: string
    lastSeenAt?: Date | string
  }

  export type MessageCreateManyChatInput = {
    id?: string
    content: string
    deletedAt?: Date | string | null
    senderId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatsOnUsersUpdateWithoutChatInput = {
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutChatsNestedInput
  }

  export type ChatsOnUsersUncheckedUpdateWithoutChatInput = {
    userId?: StringFieldUpdateOperationsInput | string
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatsOnUsersUncheckedUpdateManyWithoutUsersInput = {
    userId?: StringFieldUpdateOperationsInput | string
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUpdateWithoutChatInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutChatInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    senderId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuizzesOnCourseCreateManyQuizInput = {
    courseId: string
  }

  export type QuestionCreateManyQuizInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuizzesOnCourseUpdateWithoutQuizInput = {
    course?: CourseUpdateOneRequiredWithoutQuizzesNestedInput
  }

  export type QuizzesOnCourseUncheckedUpdateWithoutQuizInput = {
    courseId?: StringFieldUpdateOperationsInput | string
  }

  export type QuizzesOnCourseUncheckedUpdateManyWithoutCoursesInput = {
    courseId?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionUpdateWithoutQuizInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answers?: AnswerUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutQuizInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answers?: AnswerUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateManyWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnswerCreateManyQuestionInput = {
    id?: string
    content: string
    isCorrect: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AnswerUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnswerUncheckedUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnswerUncheckedUpdateManyWithoutAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}